{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"JE/documents/API/api/","title":"EDGE FUNCTIONS","text":"<p>METHOD: POST</p> <pre><code>.../functions/ \n</code></pre>"},{"location":"JE/documents/Apps/tables%26apps/","title":"TABLE \u4e0e APPS \u7684\u5bf9\u5e94\u6743\u9650","text":"APP\\TABLE apps businesses companies staffs clients client_points orders payments products \u5168\u4f53 r(local) r(local) r(local) #1 \u5e97\u94fa/\u90e8\u95e8 ru(global) #2 \u4f01\u4e1a ru(global) #3 \u5458\u5de5 rwu(global) #4 \u5546\u54c1 rwu(local) #5 \u6cb9\u54c1 ruw(local) #6 \u8ba2\u5355 rw(refund)(local) rw(refund)(local) #7 \u5546\u54c1POS r(local) r(global) rwu(global) rwu(local) rw(local) r(local) #8 \u6cb9\u54c1POS r(local) r(global) rwu(global) rwu(local) rw(local) r(local) #9 \u5ba2\u6237 rwu(global) rwu(global) rw(refund)(global) rw(refund)(global) <p>r: \u53ef\u8bfb</p> <p>w: \u53ef\u5199</p> <p>u: \u53ef\u66f4\u65b0</p> <p>(local): \u5f53\u524d\u5e97\u94fa\u7684\u6570\u636e</p> <p>(global): \u5168\u516c\u53f8\u7684\u6570\u636e</p>"},{"location":"JE/documents/Apps/tables%26apps/#table","title":"TABLE \u7b80\u4ecb","text":""},{"location":"JE/documents/Apps/tables%26apps/#clients","title":"clients","text":"\u8868\u5934 id create_at update_at family_master user_id company_id metadata \u7c7b\u578b text(uuid) timestamptz timestamptz text(uuid) text(uuid) int8 jsonb foreign clients-&gt;id auth-&gt;user-&gt;id companies-&gt;id \u9ed8\u8ba4 id+ now() now() {} \u5fc5\u586b x x x x x <p>metadata</p> <pre><code>{\n    \"contact\": {\n        \"name\": string,\n        \"birthday\": string,\n        \"plate\": string,\n        \"wechat\": string,\n    }\n    \"remark\": string,\n}\n</code></pre>"},{"location":"JE/documents/DB/apps/","title":"apps","text":"\u8868\u5934 \u53c2\u6570\u540d\u79f0 \u7c7b\u578b \u5fc5\u586b \u9ed8\u8ba4 \u63cf\u8ff0 CHECK id \u7f16\u53f7 int8 auto \u7a0b\u5e8f\u7f16\u53f7 created_at \u521b\u5efa\u65f6\u95f4 timestamptz now() \u8bcd\u6761\u521b\u5efa\u65f6\u95f4\u6233 updated_at \u66f4\u65b0\u65f6\u95f4 timestamptz x now() \u8bcd\u6761\u66f4\u65b0\u65f6\u95f4\u6233 layout \u8def\u7531\u8def\u5f84 text x \"store\" \"store\"\"company\"\"public\" catalog int8 x 0 0: \u901a\u75281: \u9500\u552e\u8fd0\u84252: \u5e93\u5b58\u7ba1\u74063: \u91c7\u8d2d\u7ba1\u74064: \u5ba2\u6237\u5173\u7cfb5: \u8d22\u52a1\u7ba1\u74066: \u4eba\u4e8b\u7ba1\u7406 metadata \u5176\u4ed6\u4fe1\u606f x {\"maintenance\": false,  \"subscribable\": false} \u4e0d\u9700\u8981\u68c0\u7d22\u7684\u4fe1\u606f !=null"},{"location":"JE/documents/DB/apps/#apps_1","title":"apps \u76ee\u5f55","text":"<pre><code>{\n    \"0\": \"\u4eea\u8868\u76d8\",\n    \"1\": \"\u4f01\u4e1a\u5217\u8868\",\n    \"2\": \"\u5458\u5de5\u5217\u8868\",\n    \"3\": \"\u5546\u54c1\u5e93\u5b58\",\n    \"4\": \"\u9500\u552e\u7ec8\u7aef\",\n    \"5\": \"\u8ba2\u5355\u5217\u8868\",\n    \"6\": \"\u52a0\u6cb9\u7ad9\u9500\u552e\u7ec8\u7aef\",\n    \"7\": \"\u5ba2\u6237\u5217\u8868\",\n    \"8\": \"\u6cb9\u6c14\u5e93\u5b58\"\n}\n</code></pre>"},{"location":"JE/documents/DB/apps/#access-policies","title":"access policies","text":"<pre><code>// \u53ea\u6709\u5458\u5de5\u53ef\u4ee5\u8bbf\u95eeapps\u8bcd\u6761\nSELECT -&gt; authenticated\n</code></pre>"},{"location":"JE/documents/DB/businesses/","title":"businesses","text":"\u8868\u5934 \u53c2\u6570\u540d\u79f0 \u7c7b\u578b \u5fc5\u586b \u9ed8\u8ba4 \u63cf\u8ff0 CHECK id \u7f16\u53f7 int8 auto \u7a0b\u5e8f\u7f16\u53f7 created_at \u521b\u5efa\u65f6\u95f4 timestamptz now() \u8bcd\u6761\u521b\u5efa\u65f6\u95f4\u6233 updated_at \u66f4\u65b0\u65f6\u95f4 timestamptz x now() \u8bcd\u6761\u66f4\u65b0\u65f6\u95f4\u6233 deleted_at \u5220\u9664\u65f6\u95f4 timestamptz \u5220\u9664\u8bb0\u5f55\u65f6\u95f4\u6233 name \u540d\u79f0 text x \u5546\u5e97\u540d\u79f0 app_permissions apps\u8bbf\u95ee\u6743\u9650 int8[] x [] \u53ef\u4ee5\u8bbf\u95ee\u7684app\u7f16\u53f7 client_group_id \u5ba2\u6237\u7fa4\u79df metadata \u5176\u4ed6\u4fe1\u606f x \u4e0d\u9700\u8981\u68c0\u7d22\u7684\u4fe1\u606f"},{"location":"JE/documents/DB/businesses/#metadata","title":"metadata","text":"<pre><code>{   \"type\": null,\n    \"contact\": {\n        \"phone\": null,\n        \"email\": null,\n        \"website\": null,\n        \"address\": null,\n        \"city\": null,\n        \"state\": null,\n        \"country\": null,\n        \"latitude\": null,\n        \"longitude\": null\n    }\n}\n</code></pre>"},{"location":"JE/documents/DB/businesses/#_1","title":"\u6743\u9650\u6a21\u5f0f","text":"<p>\u5047\u8bbe\u73b0\u5728\u6709business A, B, C\uff0c \u5176\u4e2d B \u548c C \u96b6\u5c5e\u4e8e A\uff0c\u5982\u4e0b</p> <pre><code>    A\n   / \\\n  B   C\n</code></pre> <p>A\uff0cB\uff0cC\u5206\u522b\u62e5\u6709\u72ec\u7acb\u7684app\u8bbf\u95ee\u6743\u9650\uff0c\u4f46B\u548cC\u7684\u6743\u9650\u4e0d\u80fd\u591a\u4e8eA\uff0c\u5982\u4e0b</p> <pre><code>                        A (0, 1, 2, 3, 4, 5, 6)\n                       / \\\n                      B   C\n               (0, 1, 2)  (0, 5, 6)\n</code></pre> <p>A\uff0cB\uff0cC\u5206\u522b\u62e5\u6709\u72ec\u7acb\u7684\u6570\u636e\u8bbf\u95ee\u6743\u9650\uff0c\u5047\u5982\u8bbf\u95eeproducts\u8fd9\u4e2a\u8868\u65f6, B\u548cC\u90fd\u53ea\u80fd\u8bbf\u95ee\u6807\u6709\u4ed6\u4eecbusiness id\u7684\u6570\u636e\uff0c\u800c A\u53ef\u4ee5\u540c\u65f6\u8bbf\u95eeA\uff0cB\uff0cC \u7684\u6570\u636e\u3002</p> <pre><code>A -&gt; from products select * where product.business_id = A \n        or product.business_id = B \n        or product.business_id = C\n\nB -&gt; from products select * where product.business_id = B\n\nC -&gt; from products select * where product.business_id = C\n</code></pre>"},{"location":"JE/documents/DB/businesses/#_2","title":"\u9875\u9762\u903b\u8f91","text":"<pre><code>host\\business\\$business_id\\$app_id\npages\\business\\[businessId]\\[appId]\n</code></pre>"},{"location":"JE/documents/DB/businesses/#access-policies","title":"access policies","text":"<pre><code>// \u5458\u5de5\u53ea\u53ef\u4ee5\u8bbf\u95ee\u6240\u5c5e\u7684business\u7684\u8bcd\u6761\nSELECT -&gt;  authenticated -&gt; id IN (select business_id from employees where employees.user_id = auth.uid()) \n</code></pre>"},{"location":"JE/documents/DB/clients/","title":"clients","text":"\u8868\u5934 \u53c2\u6570\u540d\u79f0 \u7c7b\u578b \u5fc5\u586b \u9ed8\u8ba4 \u63cf\u8ff0 CHECK id \u7f16\u53f7 uuid auto \u7a0b\u5e8f\u7f16\u53f7 created_at \u521b\u5efa\u65f6\u95f4 timestamptz now() \u8bcd\u6761\u521b\u5efa\u65f6\u95f4\u6233 updated_at \u66f4\u65b0\u65f6\u95f4 timestamptz x now() \u8bcd\u6761\u66f4\u65b0\u65f6\u95f4\u6233 type \u5ba2\u6237\u79cd\u7c7b int4 x 0 0: \u4e00\u822c\u5ba2\u62371: \u4f01\u4e1a\u5ba2\u6237 2: \u4f9b\u8d27\u5546 client_group_id uuid x user_id \u7528\u6237id uuid x \u7528\u6237\u7684\u552f\u4e00id family_id \u5bb6\u5eadid uuid metadata \u5176\u4ed6\u4fe1\u606f x {} \u4e0d\u9700\u8981\u68c0\u7d22\u7684\u4fe1\u606f !=null"},{"location":"JE/documents/DB/clients/#_1","title":"\u5bb6\u5ead","text":""},{"location":"JE/documents/DB/clients/#client_groups","title":"client_groups","text":"\u8868\u5934 \u53c2\u6570\u540d\u79f0 \u7c7b\u578b \u5fc5\u586b \u9ed8\u8ba4 \u63cf\u8ff0 CHECK id \u7f16\u53f7 uuid auto \u7a0b\u5e8f\u7f16\u53f7 created_at \u521b\u5efa\u65f6\u95f4 timestamptz now() \u8bcd\u6761\u521b\u5efa\u65f6\u95f4\u6233 updated_at \u66f4\u65b0\u65f6\u95f4 timestamptz x now() \u8bcd\u6761\u66f4\u65b0\u65f6\u95f4\u6233 metadata \u5176\u4ed6\u4fe1\u606f x {} \u4e0d\u9700\u8981\u68c0\u7d22\u7684\u4fe1\u606f !=null"},{"location":"JE/documents/DB/employees/","title":"employees","text":"\u8868\u5934 \u53c2\u6570\u540d\u79f0 \u7c7b\u578b \u5fc5\u586b \u9ed8\u8ba4 \u63cf\u8ff0 CHECK id \u7f16\u53f7 uuid auto \u5458\u5de5\u7f16\u53f7 created_at \u521b\u5efa\u65f6\u95f4 timestamptz now() \u8bcd\u6761\u521b\u5efa\u65f6\u95f4\u6233 updated_at \u66f4\u65b0\u65f6\u95f4 timestamptz x now() \u8bcd\u6761\u66f4\u65b0\u65f6\u95f4\u6233 deleted_at \u5220\u9664\u65f6\u95f4 timestamptz \u5220\u9664\u8bb0\u5f55\u65f6\u95f4\u6233 name \u540d\u79f0 text x \u5546\u5e97\u540d\u79f0 app_permissions apps\u8bbf\u95ee\u6743\u9650 int8[] x [] \u53ef\u4ee5\u8bbf\u95ee\u7684app\u7f16\u53f7 user_id \u7528\u6237id uuid x \u7528\u6237\u552f\u4e00id business_id \u4f01\u4e1aid uuid \u4f01\u4e1a\u552f\u4e00id metadata \u5176\u4ed6\u4fe1\u606f x \u4e0d\u9700\u8981\u68c0\u7d22\u7684\u4fe1\u606f"},{"location":"JE/documents/DB/employees/#metadata","title":"metadata","text":"<pre><code>{\n    \"position\": null,\n    \"department\": null, \n    \"contact\": {\n        \"avatar\": null,\n        \"phone\": null,\n        \"email\": null,\n        \"address\": null,\n        \"city\": null,\n        \"state\": null,\n        \"country\": null,\n        \"birthday\": null\n    }\n}\n</code></pre>"},{"location":"JE/documents/DB/employees/#access-policies","title":"access policies","text":"<pre><code>// \u5458\u5de5\u53ea\u767b\u9646\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\nSELECT -&gt; authenticated -&gt; (user_id = auth.uid())\n</code></pre>"},{"location":"JE/documents/DB/inventories/","title":"inventories","text":"\u8868\u5934 \u53c2\u6570\u540d\u79f0 \u7c7b\u578b \u5fc5\u586b \u9ed8\u8ba4 \u63cf\u8ff0 CHECK id \u7f16\u53f7 uuid auto \u5546\u54c1\u7f16\u53f7 created_at \u521b\u5efa\u65f6\u95f4 timestamptz now() \u8bcd\u6761\u521b\u5efa\u65f6\u95f4\u6233 updated_at \u66f4\u65b0\u65f6\u95f4 timestamptz x now() \u8bcd\u6761\u66f4\u65b0\u65f6\u95f4\u6233 deleted_at \u5220\u9664\u65f6\u95f4 timestamptz \u5220\u9664\u8bb0\u5f55\u65f6\u95f4\u6233 product_id \u4ea7\u54c1\u7f16\u53f7 uuid x \u5e93\u5b58\u5bf9\u5e94\u4ea7\u54c1\u7684\u7f16\u53f7 value \u5e93\u5b58\u6570\u91cf number x 0 \u5e93\u5b58\u6570\u91cf metadata \u5176\u4ed6\u4fe1\u606f x \u4e0d\u9700\u8981\u68c0\u7d22\u7684\u4fe1\u606f"},{"location":"JE/documents/DB/inventories/#metadata","title":"metadata","text":"<pre><code>{\n    \"promotion_value\": 0\n}\n</code></pre>"},{"location":"JE/documents/DB/orders/","title":"inventories","text":"\u8868\u5934 \u53c2\u6570\u540d\u79f0 \u7c7b\u578b \u5fc5\u586b \u9ed8\u8ba4 \u63cf\u8ff0 CHECK id \u7f16\u53f7 uuid auto \u5546\u54c1\u7f16\u53f7 created_at \u521b\u5efa\u65f6\u95f4 timestamptz now() \u8bcd\u6761\u521b\u5efa\u65f6\u95f4\u6233 updated_at \u66f4\u65b0\u65f6\u95f4 timestamptz x now() \u8bcd\u6761\u66f4\u65b0\u65f6\u95f4\u6233 deleted_at \u5220\u9664\u65f6\u95f4 timestamptz \u5220\u9664\u8bb0\u5f55\u65f6\u95f4\u6233 amount \u91d1\u989d numeric x \u8ba2\u5355\u91d1\u989d(\u4f7f\u7528\u4f18\u60e0\u524d) type \u8ba2\u5355\u79cd\u7c7b int8 x 0 0: sale  1: purchase  2: refund details \u8ba2\u5355\u8be6\u60c5 jsonb[] x [{product: product{}, quantity: 2},{product: product{}, quantity: 1}] \u5305\u542b\u5546\u54c1\u4fe1\u606f\u7684\u8ba2\u5355\u8be6\u60c5 metadata \u5176\u4ed6\u4fe1\u606f x \u4e0d\u9700\u8981\u68c0\u7d22\u7684\u4fe1\u606f"},{"location":"JE/documents/DB/orders/#metadata","title":"metadata","text":"<pre><code>{\n    \"note\": null\n}\n</code></pre>"},{"location":"JE/documents/DB/products/","title":"products","text":"\u8868\u5934 \u53c2\u6570\u540d\u79f0 \u7c7b\u578b \u5fc5\u586b \u9ed8\u8ba4 \u63cf\u8ff0 CHECK id \u7f16\u53f7 uuid auto \u5546\u54c1\u7f16\u53f7 created_at \u521b\u5efa\u65f6\u95f4 timestamptz now() \u8bcd\u6761\u521b\u5efa\u65f6\u95f4\u6233 updated_at \u66f4\u65b0\u65f6\u95f4 timestamptz x now() \u8bcd\u6761\u66f4\u65b0\u65f6\u95f4\u6233 deleted_at \u5220\u9664\u65f6\u95f4 timestamptz \u5220\u9664\u8bb0\u5f55\u65f6\u95f4\u6233 name \u540d\u79f0 text x \u5546\u54c1\u540d\u79f0 catalog \u5206\u7c7b text x \u5546\u54c1\u5206\u7c7b business_id \u4f01\u4e1aid uuid \u4f01\u4e1a\u552f\u4e00id metadata \u5176\u4ed6\u4fe1\u606f x \u4e0d\u9700\u8981\u68c0\u7d22\u7684\u4fe1\u606f"},{"location":"JE/documents/DB/products/#metadata","title":"metadata","text":"<pre><code>{\n    \"unit\": 0,\n    \"decimal\": 0,\n    \"price\": 0,\n    \"brand\": null,\n    \"description\": null,\n    \"tag\": null\n}\n</code></pre>"},{"location":"JE/documents/DB/products/#units","title":"units","text":"<pre><code>{\n    \"0\": \"pcs\",\n    \"1\": \"sets\",\n    \"2\": \"packages\",\n    \"3\": \"l\",\n    \"4\": \"ml\",\n    \"5\": \"kg\" \n}\n</code></pre>"},{"location":"JE/documents/DB/transactions/","title":"transactions","text":"\u8868\u5934 \u53c2\u6570\u540d\u79f0 \u7c7b\u578b \u5fc5\u586b \u9ed8\u8ba4 \u63cf\u8ff0 CHECK id \u7f16\u53f7 uuid auto \u4ea4\u6613\u7f16\u53f7 created_at \u521b\u5efa\u65f6\u95f4 timestamptz now() \u8bcd\u6761\u521b\u5efa\u65f6\u95f4\u6233 updated_at \u66f4\u65b0\u65f6\u95f4 timestamptz x now() \u8bcd\u6761\u66f4\u65b0\u65f6\u95f4\u6233 deleted_at \u5220\u9664\u65f6\u95f4 timestamptz \u5220\u9664\u8bb0\u5f55\u65f6\u95f4\u6233 amount \u91d1\u989d numeric x \u8ba2\u5355\u91d1\u989d(\u5305\u542b\u4f18\u60e0) method \u652f\u4ed8\u65b9\u5f0f int4 x 0: cash  1: bank_card  2: shou_qian_ba discounts \u6298\u6263 jsonb[] {} \u6298\u6263\u8be6\u60c5 third_party_transaction_id \u7b2c\u4e09\u65b9\u4ea4\u6613\u56de\u6267\u7801 text metadata \u5176\u4ed6\u4fe1\u606f x \u4e0d\u9700\u8981\u68c0\u7d22\u7684\u4fe1\u606f"},{"location":"JE/documents/DB/transactions/#metadata","title":"metadata","text":"<pre><code>{\n    \"note\": null\n}\n</code></pre>"},{"location":"JE/documents/DB/%E9%80%BB%E8%BE%91%26use%20case/","title":"\u6570\u636e\u5e93\u903b\u8f91","text":""},{"location":"JE/documents/DB/%E9%80%BB%E8%BE%91%26use%20case/#_2","title":"\u6cb9\u54c1\u91c7\u8d2d","text":"<pre><code>                      |---\u65e0---\u521b\u5efa\u4f9b\u5e94\u5546---|\n\u9884\u8d2d   clients(\u4f9b\u5e94\u5546)--|                   |---\u9009\u62e9\u4e0e\u4f9b\u5e94\u5546\u6709\u5173\u7684\u5546\u54c1ids    \n                      |---\u6709--------------|            |                   \n                                                      |\n                                            \u521b\u5efa order(type: purchase)\n\n\n\n\n\n\n\u5165\u5e93    insert inventories_detail(type: \u6cb9)---link(optional)---&gt;\u76f8\u5173 order \u8bb0\u5f55order\u548c\u4f9b\u5e94\u5546\u4fe1\u606f\u5728metadata\u4e2d\n                        |\n                        |\n                        |              |---\u65e0---insert inventories\u8bb0\u5f55\n        select inventories \u6709\u76f8\u5173\u8bb0\u5f55---|\n                                       |---\u6709---update inventories\u8bb0\u5f55\n\n</code></pre>"},{"location":"JE/documents/DB/%E9%80%BB%E8%BE%91%26use%20case/#_3","title":"\u5546\u54c1\u91c7\u8d2d","text":"<pre><code>                      |---\u65e0---\u521b\u5efa\u4f9b\u5e94\u5546---|\n\u9884\u8d2d   clients(\u4f9b\u5e94\u5546)--|                   |---\u9009\u62e9\u4e0e\u4f9b\u5e94\u5546\u6709\u5173\u7684\u5546\u54c1ids    \n                      |---\u6709--------------|            |                   \n                                                      |\n                                            \u521b\u5efa order(type: purchase)\n\n\n\n\n\n\n\u5165\u5e93    insert inventories_detail(type: \u5546\u54c1)---link(optional)---&gt;\u76f8\u5173 order/\u4f9b\u5e94\u5546 \u8bb0\u5f55order/\u4f9b\u5e94\u5546\u4fe1\u606f\u5728metadata\u4e2d\n                        |\n                        |\n                        |              |---\u65e0---insert inventories\u8bb0\u5f55\n        select inventories \u6709\u76f8\u5173\u8bb0\u5f55---|\n                                       |---\u6709---update inventories\u8bb0\u5f55\n\n</code></pre>"},{"location":"JE/documents/UI%20Components/simpleTable/","title":"simpleTable","text":"<p>\u4f7f\u7528\u8fd9\u4e2a\u7ec4\u4ef6\u6765\u5feb\u901f\u521b\u5efa\u4e00\u4e2aTable, \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8868\u5934\u662f\u51fd\u6570\u540d\u3002</p>"},{"location":"JE/documents/%E9%80%BB%E8%BE%91/%E4%BC%9A%E5%91%98%26%E8%90%A5%E9%94%80/8.20%20memo/","title":"\u4e00\u4e2a\u5b9e\u4f53\u4ec5\u6709\u4e00\u4e2astore","text":"<ul> <li>I.e. \u52a0\u6cb9\u7ad9 or \u5546\u5e97 or \u5496\u5561\u5e97maybe or \u6d17\u8f66</li> <li>\u59dc\u6b23\u5bb6\u7684\u72ec\u6709\u7248\u672c\uff1a\u52a0\u6cb9\u7ad9plus\uff1a\u52a0\u6cb9\u7ad9+\u5546\u5e97\uff08\u4e0d\u540c\u5b9e\u4f53\uff0c\u5206\u522b\u8bb0\u8d26\uff0c\u4f46\u4e00\u8d77\u7edf\u8ba1\u4ea4\u73ed\uff0c\u4e00\u8d77\u5171\u4eab\u4f1a\u5458\uff0c\u4f1a\u5458\u5728\u5b9e\u4f53\u4e0b\u5171\u4eab\uff09</li> </ul>"},{"location":"JE/documents/%E9%80%BB%E8%BE%91/%E4%BC%9A%E5%91%98%26%E8%90%A5%E9%94%80/%E4%BC%81%E4%B8%9A%E5%AE%A2%E6%88%B7/","title":"\u4f01\u4e1a\u5ba2\u6237","text":""},{"location":"JE/documents/%E9%80%BB%E8%BE%91/%E4%BC%9A%E5%91%98%26%E8%90%A5%E9%94%80/%E4%BC%81%E4%B8%9A%E5%AE%A2%E6%88%B7/#_2","title":"\u5145\u503c","text":"<p>\u5145\u503c\u81ea\u5b9a\u4e49\u6570\u91cf\u7684\u5927\u989d\u94b1</p>"},{"location":"JE/documents/%E9%80%BB%E8%BE%91/%E4%BC%9A%E5%91%98%26%E8%90%A5%E9%94%80/%E4%BC%81%E4%B8%9A%E5%AE%A2%E6%88%B7/#_3","title":"\u5b9a\u4e49\u5355\u4e2a\u4f01\u4e1a\u7684\u6279\u53d1\u4ef7\uff1f","text":"<p>\u5e97\u957f\u53ca\u4ee5\u4e0a\u7684\u6743\u9650\u8bbe\u7f6ecpn\uff1a\u5373diff\uff08\u771f\u5b9e\u6279\u53d1\u4ef7\uff0c\u96f6\u552e\u4ef7/\u6279\u53d1\u4ef7\uff09\uff0c\u7ed1\u5b9a\u5355\u4e2a\u4f01\u4e1a\u7684\u4f1a\u5458\u8d26\u6237\uff08\u865a\u62df\u8d26\u6237\uff09</p>"},{"location":"JE/documents/%E9%80%BB%E8%BE%91/%E4%BC%9A%E5%91%98%26%E8%90%A5%E9%94%80/%E6%88%90%E9%95%BF%E5%80%BC/","title":"\u6210\u957f\u503c TODO","text":""},{"location":"JE/documents/%E9%80%BB%E8%BE%91/%E4%BC%9A%E5%91%98%26%E8%90%A5%E9%94%80/%E6%88%90%E9%95%BF%E5%80%BC/#_1","title":"\u73b0\u6709\u79ef\u5206\u8fc1\u79fb","text":"<p>current_points = points * x</p>"},{"location":"JE/documents/%E9%80%BB%E8%BE%91/%E4%BC%9A%E5%91%98%26%E8%90%A5%E9%94%80/%E6%88%90%E9%95%BF%E5%80%BC/#todo_1","title":"\u79ef\u5206\u7b49\u7ea7 TODO","text":"<p>\u5f53\u5e74\u79ef\u5206\u8ba1\u5165 current_points</p> <p>\u7b2c\u4e8c\u5e74\u53ca\u4ee5\u540e prev_points = current_points current_points = 0 if(current_points &gt; prev_points) \u5c31\u6309\u7167current_points\u6765\u8ba1\u7b97\u5f53\u524d\u7684\u7b49\u7ea7 else \u5c31\u662f\u6309\u7167prev_points\u8ba1\u7b97\u5f53\u524d\u7684\u7b49\u7ea7</p> <p>xxxx/1/1 ~ xxxx/1/1</p>"},{"location":"JE/documents/%E9%80%BB%E8%BE%91/%E4%BC%9A%E5%91%98%26%E8%90%A5%E9%94%80/%E7%A7%AF%E5%88%86/","title":"\u4f1a\u5458\u79ef\u5206","text":"<p>1 point = 1 cash_value * catalog_id\u6240\u5c5e\u7684\u7cfb\u6570 * \u4f1a\u5458level\u5bf9\u5e94\u7684\u7cfb\u6570</p>"},{"location":"JE/documents/%E9%80%BB%E8%BE%91/%E4%BC%9A%E5%91%98%26%E8%90%A5%E9%94%80/%E7%A7%AF%E5%88%86/#_2","title":"\u79ef\u5206\u62b5\u6263\u6362\u7b97","text":"<p>-1 point = 0.01 cash value -\u5fae\u4fe1\u5546\u57ce\u81ea\u5b9a\u4e49\u4e0a\u67b6\u5546\u54c1\u6240\u9700point</p>"},{"location":"JE/documents/%E9%80%BB%E8%BE%91/%E4%BC%9A%E5%91%98%26%E8%90%A5%E9%94%80/%E7%A7%AF%E5%88%86/#_3","title":"\u79ef\u5206\u4f7f\u7528\u573a\u666f","text":"\u4f7f\u7528\u573a\u666f \u5e94\u5bf9\u4ea7\u54c1 \u5e94\u7528\u573a\u666f \u9650\u5236 \u62b5\u6263 todo catalog_id/product_id \u5546\u5e97 \u6574\u767e/\u5341, \u6700\u4f4e\u6d88\u8d39\u91d1\u989d \u62b5\u6263+CASH catalog_id/product_id \u52a0\u6cb9\u7ad9\uff0c\u5546\u5e97 \u6362\u5238 catalog_id/product_id \u52a0\u6cb9\u7ad9\uff0c\u5546\u5e97 \u5151\u6362\u5546\u54c1 \u3002\u3002 \u5fae\u4fe1\u5546\u57ce"},{"location":"JE/documents/%E9%80%BB%E8%BE%91/%E4%BC%9A%E5%91%98%26%E8%90%A5%E9%94%80/%E7%A7%AF%E5%88%86/#_4","title":"\u672a\u5206\u7c7b\u7684\u4e1c\u897f","text":""},{"location":"JE/documents/%E9%80%BB%E8%BE%91/%E4%BC%9A%E5%91%98%26%E8%90%A5%E9%94%80/%E7%A7%AF%E5%88%86/#coupon","title":"coupon\u7684\u5151\u6362","text":"<p>\u65b9\u5f0f\uff1a\u94b1/\u79ef\u5206/\u989d\u5916\u81ea\u5b9a\u4e49\u6d3b\u52a8\u5bf9\u7b26\u5408\u6761\u4ef6\u7684\u4e2a\u4eba\u53d1\u653e\uff08\u6839\u636e\u7cfb\u7edf\u6a21\u7248\uff0c\u7cfb\u7edf\u81ea\u52a8\u53d1\u653e\uff09/\u4f01\u4e1a\u5ba2\u6237\u81ea\u5b9a\u4e49 coupon\u7c7b\u578b\uff1a\u91d1\u989d\u7c7b</p>"},{"location":"JE/documents/%E9%80%BB%E8%BE%91/%E4%BC%9A%E5%91%98%26%E8%90%A5%E9%94%80/%E7%A7%AF%E5%88%86/#_5","title":"\u8d60\u54c1","text":"<p>\u4e0e\u4ea7\u54c1\u7ec4\u5408\u7684\u65b9\u5f0f\uff0c\u7531\u5ba2\u6237\u81ea\u5b9a\u4e49\u7ec4\u5408\u53d1\u653e\u5bf9\u5e94\u8d60\u54c1 - i.e.2000\u5145\u503c\u5361+\u6570\u91cf1+\u8d60\u54c1\u6bdb\u5dfe - i.e.\u6cb9\u54c1+\u6ee1200+\u8d60\u54c1 - \u4e3b\u8981\u4ea7\u54c1+\u6b21\u8981\u4ea7\u54c1(\u6216\u8005\u8d60\u54c1) catalog_id product_id discount_rate discount_value</p>"},{"location":"JE/documents/%E9%80%BB%E8%BE%91/%E4%BC%9A%E5%91%98%26%E8%90%A5%E9%94%80/%E7%A7%AF%E5%88%86/#_6","title":"\u79ef\u5206\u5546\u57ce\uff08\u5fae\u4fe1\u5c0f\u7a0b\u5e8f\uff0c\u4ec5\u7528\u79ef\u5206\u5151\u6362\u5546\u54c1\uff09","text":"<p>\u4e0a\u67b6\u5546\u54c1\u540c\u65f6\u767b\u8bb0\u5bf9\u5e94\u79ef\u5206\u7684\uff0c\u81ea\u52a8\u4e0a\u5230\u79ef\u5206\u5546\u573a</p>"},{"location":"JE/documents/%E9%80%BB%E8%BE%91/%E4%BC%9A%E5%91%98%26%E8%90%A5%E9%94%80/%E7%A7%AF%E5%88%86/#_7","title":"\u79ef\u5206\u62b5\u6263","text":""},{"location":"JE/documents/%E9%80%BB%E8%BE%91/%E4%BC%9A%E5%91%98%26%E8%90%A5%E9%94%80/%E7%A7%AF%E5%88%86/#_8","title":"\u6210\u957f\u503c","text":"<p>\u7528\u4e8e\u5224\u65ad\u7b49\u7ea7\uff0c\u83b7\u53d6\u6743\u76ca</p>"},{"location":"Language/Dart/collection/","title":"Collection","text":"<p>List, Set, Map, Queue...</p>"},{"location":"Language/Dart/collection/#spread-operator","title":"Spread operator","text":"<ul> <li>Add the contents of a Collection to a surrounding collection.</li> <li>Can be paired with <code>?</code> null-awareness <code>...?collection</code><ul> <li>Only adds the items if collection is not null.</li> </ul> </li> </ul> <pre><code>var a = [4,5,6];\nvar b = {1,2,3, ...a}; // {1,2,3,4,5,6}\n</code></pre>"},{"location":"Language/Dart/collection/#list","title":"List","text":""},{"location":"Language/Dart/collection/#-list-is-abstract-creating-a-list-actually-calls-a-factory-method-to-create-a-list-sub-type","title":"- List is abstract, creating a List actually calls a factory method to create a List sub-type.","text":""},{"location":"Language/Dart/dart/","title":"Dart type","text":"<ol> <li>[[data type]]</li> <li>[[typedef]]</li> <li>[[enum]]</li> </ol>"},{"location":"Language/Dart/dart/#dart-keywords","title":"Dart keywords","text":"<ol> <li>[[const and final]]</li> <li>[[nullable]]</li> <li>[[late]]</li> <li>[[assert]]</li> <li>[[imports]]</li> </ol>"},{"location":"Language/Dart/dart/#operators","title":"Operators","text":"<ol> <li>[[operators#Dart Operators|operators]]</li> <li>[[operators#Relational|relational]]</li> <li>[[operators#Type test|type test]]</li> <li>[[operators#Logical|logical]]</li> <li>[[operators#Bitwise and Shift|bitwise and shift]]</li> </ol>"},{"location":"Language/Dart/dart/#flow","title":"Flow","text":"<ol> <li>[[loop#loop|loop]]</li> <li>[[loop#For in|for in]]</li> </ol>"},{"location":"Language/Dart/dart/#assertions-and-exceptions","title":"Assertions and Exceptions","text":"<ol> <li>[[assert]]</li> <li>[[try...catch...]]</li> <li>[[throw]]</li> </ol>"},{"location":"Language/Dart/dart/#function","title":"Function","text":"<ol> <li>[[function]]</li> <li>[[function#Positional|positional parameters]]</li> <li>[[function#Named|named parameters]]</li> <li>[[callback]]</li> </ol>"},{"location":"Language/Dart/dart/#oop","title":"OOP","text":"<ol> <li>[[class]]</li> <li>[[object]]</li> <li>[[class#Constructors|constructor]]</li> <li>[[class#Factory Constructor|factory constructor]]</li> <li>[[getter and setter]]</li> </ol>"},{"location":"Language/Dart/dart/#advance-oop","title":"Advance OOP","text":"<ol> <li>[[Inheritance#Extends|extends]]</li> <li>[[Inheritance#Abstract classes|abstract]]</li> <li>[[Inheritance#Mixin|mixin]]</li> <li>[[extension methods]]</li> <li>[[operator overloading]]</li> <li>[[clone]]</li> </ol>"},{"location":"Language/Dart/dart/#generic","title":"Generic","text":"<ol> <li>[[generic#Generic methods|generic methods]]</li> <li>[[generic#Generic classes|generic classes]]</li> </ol>"},{"location":"Language/Dart/dart/#future","title":"Future","text":""},{"location":"Language/Dart/dart/#_1","title":"\u6570\u636e\u7ed3\u6784","text":"<ol> <li>[[collection#Spread operator|spread operator]]</li> <li>[[collection#List|list]]</li> <li>[[map]]</li> <li>[[generators]]</li> </ol>"},{"location":"Language/Dart/keywords/Inheritance/","title":"Inheritance and Subclassing","text":""},{"location":"Language/Dart/keywords/Inheritance/#extends","title":"Extends","text":"<pre><code>class Animal{\n    final String name;\n    Animal(this.name);\n    void toString(){\n        print(name);\n    }\n}\n\nclass Cat extends Animal{\n    final String name;\n    final String color;\n    Cat(string name, String color) : this.name = name, super(name){\n        // use super.method\n    }\n\n    // don't need override\n    void toString(){\n        print('$color cat: +' super.name);\n    }\n}\n\nvoid main(){\n    final animal = Cat('cc', 'black');\n    animal.toString(); // black cat: cc\n}\n</code></pre>"},{"location":"Language/Dart/keywords/Inheritance/#abstract-classes","title":"Abstract classes","text":"<pre><code>abstract class Animal{\n    void update();\n}\n\nclass cat implements Animal{\n    @override\n    void update(){\n        ...\n    }\n}\n\n</code></pre>"},{"location":"Language/Dart/keywords/Inheritance/#mixin","title":"Mixin","text":"<p>\"cousin\" of abstract classes. - Class with no constructor that can be attached (or mixed) with another class. - Use the <code>with</code> keyword to 'add' the mixin class to another class. - Mixins can be constrained to only certain sub-classes using the <code>on</code> keyword.</p>"},{"location":"Language/Dart/keywords/Inheritance/#with","title":"with","text":"<pre><code>class myCounter{\n    int _count = 0;\n    int next() =&gt; ++_count;\n}\n\nclass myOperation {\n    void operate() =&gt; print(\"executing some\");\n}\n\nclass Mixin extends myOperation with myCounter {\n    void operate() {\n        super.operate();\n        next();\n        print(\"executed: $_count items\");\n    }\n}\n\nvoid main(){\n    Mixin().operate();\n}\n</code></pre>"},{"location":"Language/Dart/keywords/Inheritance/#on","title":"on","text":"<p>The <code>on</code> key word is like <code>extends</code>, it make a mixin only able to <code>with</code>  to the following class.</p> <pre><code>class myCounter{\n    int _count = 0;\n    int next() =&gt; ++_count;\n}\n\nmixin myOperation on Mixin {\n    void operate() =&gt; print(\"executing some\");\n}\n\nabstract class Mixin with myCounter{}\n\nclass test extends Mixin with myOperation {\n    void operate() {\n        super.operate();\n        next();\n        print(\"executed: $_count items\");\n    }\n}\n\nvoid main(){\n    test().operate();\n}\n</code></pre>"},{"location":"Language/Dart/keywords/assert/","title":"Assertions","text":"<p>During development use an assert to disrupt normal execution. - They are removed from release build automatically. - If the statement passed to the assert fails, then program execution stops.</p> <pre><code>assert(text != null);\nassert(number &lt; 100);\nassert(urlString.startWiht('http'));\n\n// with message\nassert(text != null, \"text not null\")\n</code></pre>"},{"location":"Language/Dart/keywords/callback/","title":"Callbacks","text":"<p>![[Pasted image 20220324230559.png]]</p> <pre><code>@override\nWidget build(BuildContext context){\n    return SomeWidget(\n        MyListItem(myCallback);\n    );\n}\n\nvoid myCallback(Item item){\n    print('user tapped on $item');\n}\n</code></pre>"},{"location":"Language/Dart/keywords/class/","title":"Class","text":"<pre><code>class MyClass {\n\n}\n</code></pre>"},{"location":"Language/Dart/keywords/class/#initializer","title":"Initializer","text":"<pre><code>class MyClass {\n    String str = 'hello';\n    MyClass();\n\n    // or\n    MyClass() : str = 'world';\n}\n</code></pre>"},{"location":"Language/Dart/keywords/class/#constructors","title":"Constructors","text":"<pre><code>class MyClass {\n    String? str; \n    // or\n    late String str;\n\n    // constructor  \n    MyClass(String str) {\n        this.str = str;\n    }\n    // or\n    MyClass(this.str);\n}\n</code></pre> <p>or </p> <pre><code>class MyClass {\n    String str;\n\n    MyClass(String val) : a = val;\n}\n</code></pre>"},{"location":"Language/Dart/keywords/class/#named-constructor","title":"Named Constructor","text":"<pre><code>class MyClass {\n    final str;\n\n    MyClass(this.str);\n\n    MyClass.named() : str = '';\n}\n\nvoid main() {\n    MyClass myclass = MyClass.named();\n}\n</code></pre>"},{"location":"Language/Dart/keywords/class/#factory-constructor","title":"Factory Constructor","text":"<p>use keyword <code>factory</code> to denote a factory constructor. (doesn't always create a new instance) - An instance of a subclass - An singelton - No access to this</p> <pre><code>class MyClass {\n    late String str;\n    MyClass(this.str);\n\n    factory MyClass.createClass({required String str, bool isDone=false}){\n        if(isDone){\n            return MyClass('done');\n        }\n        return MyClass('not donw');\n    }\n}\n\nvoid main{\n    MyClass.createClass(str: 'hello');\n}\n</code></pre>"},{"location":"Language/Dart/keywords/class/#singleton","title":"Singleton","text":"<pre><code>class Singleton {\n    // static\n    static final Singleton _singleton = Singleton._internal();\n\n    // private named contructor\n    Singleton._internal();\n\n    factory Singleton() {\n        return _singleton;\n    }\n}\n\nvoid main(){\n    Singleton()\n}\n</code></pre>"},{"location":"Language/Dart/keywords/clone/","title":"Clone","text":""},{"location":"Language/Dart/keywords/clone/#deep-copy","title":"deep copy","text":"<p>Use a deep copy to clone an object. - can make nice use of the nullable and <code>??</code> operator to allow certain constructor parameters to be modified. - Ensure the copyWith method has the exact same parameter list as the object constructor.</p> <pre><code>class myClass{\n    final string _str;\n\n    myClass(this._str);\n\n    // deep copy\n    myClass copyWith({String? str}) =&gt;\n        myClass(str ?? 'hello');\n}\n</code></pre>"},{"location":"Language/Dart/keywords/clone/#shadow-copy","title":"shadow copy","text":"<p>If the class we want to clone contains an object or a collection. Use shadow copy get the object reference to the field / objects contained within those objects.</p> <pre><code>class myClass2{\n    myClass _mc;\n    List&lt;String&gt; _listStr;\n\n    //shadow copy\n    myClass({required this._mc, required this._listStr})\n}\n</code></pre>"},{"location":"Language/Dart/keywords/clone/#cloning-primitive-collections","title":"cloning primitive collections","text":"<pre><code>listInts : listInts ?? []..addAll(this.listInts);\n\nvar str = ['a','b'];\nvar test = []..addAll(str);\n\n//or \n\nvar test = [...str];\n</code></pre>"},{"location":"Language/Dart/keywords/conditional%20operator/","title":"Conditional operator","text":""},{"location":"Language/Dart/keywords/conditional%20operator/#conditional","title":"Conditional","text":"<pre><code>// condition ? A : B\n// if(condition){ A } else { B } \nprint(status == null ? 'RIP' : status );\n</code></pre>"},{"location":"Language/Dart/keywords/const%20and%20final/","title":"const and final","text":"<p>Variable declared <code>final</code> or <code>const</code> keyword can only be set once and never changed.</p> <p>Subtle difference between <code>final</code> and <code>const</code></p>"},{"location":"Language/Dart/keywords/const%20and%20final/#const","title":"const \u5e38\u91cf \u66f4\u52a0\u4e25\u683c","text":"<p><code>const</code> variables must be determined at compile (and cannot be changed)</p>"},{"location":"Language/Dart/keywords/const%20and%20final/#final","title":"final","text":"<p><code>final</code> variables must be determined at runtime (and cannot be changed)</p> <p>note: Class instance variables can be final, but not const - Use static const for class CONSTANTS</p>"},{"location":"Language/Dart/keywords/data%20type/","title":"Data Type","text":""},{"location":"Language/Dart/keywords/data%20type/#dynamic","title":"dynamic","text":""},{"location":"Language/Dart/keywords/data%20type/#string","title":"String","text":"<ul> <li>Initialized with single, double or triple quotes</li> <li>use <code>[ ]</code> operator to access a particular character of a string</li> <li>use <code>+</code> operator to connect string, but StringBuffer is preferred (same as java Strings are immutable).</li> </ul> <pre><code>String a = 'string 1';\nString b = \"string 2\";\nString c = '''SELECT name\n              FROM people\n           ''';\n\nString d = 'and $a'; // and string 1\nString e = a[0];     // s\n</code></pre>"},{"location":"Language/Dart/keywords/data%20type/#boolean","title":"Boolean","text":"<ul> <li>true and false are Boolean literals</li> </ul> <pre><code>bool test = 5 == 0; //false\nbool opposite = !test; // true\nbool falseVal = !true; // false\n</code></pre>"},{"location":"Language/Dart/keywords/enum/","title":"ENUM","text":"<ul> <li>Use enumerated types to increase readability of code.</li> <li>Enums have an associated index value.</li> <li>Always fully qualify an enum to use it.</li> </ul> <pre><code>enum Fruits {\n    apple,\n    pear,\n    grapes\n}\n\nvar a = Fruites.apple.index; //0\n\nFruites best = Fruits.pear; \nbool = best == Fruits.pear; // true\n\nprint(Fruits.values); // [Fruits.apple, .., Fruits.grapes]\n\nprint(Fruits.values[0]); // Fruits.apple\n\nprint(Fruits.values[0].toString().split('.').last); //apple\n</code></pre>"},{"location":"Language/Dart/keywords/extension%20methods/","title":"Extension methods","text":"<p>https://dart.dev/guides/language/extension-methods</p> <pre><code>class myClass{\n    String str = 'hello';\n}\n\nextension printStr on myClass{\n    void showStr(){\n        print(str);\n    }\n}\n\n// use a extension method\nimport 'Path of myClass' \nvoid main(){\n    myClass obj = myClass();\n    obj.showStr(); // hello\n}\n\n</code></pre>"},{"location":"Language/Dart/keywords/extension%20methods/#generic-extension","title":"Generic extension","text":"<pre><code>extension MyFancyList&lt;T&gt; on List&lt;T&gt; { \n    int get doubleLength =&gt; length * 2; \n    List&lt;T&gt; operator -() =&gt; reversed.toList(); \n    List&lt;List&lt;T&gt;&gt; split(int at) =&gt; [sublist(0, at), sublist(at)]; \n}\n</code></pre>"},{"location":"Language/Dart/keywords/function/","title":"Function","text":"<ul> <li>Functions are objects.<ul> <li>The type if <code>Function</code></li> <li>Can be assigned to variables</li> <li>Can be passed to methods (for a callback) </li> </ul> </li> </ul>"},{"location":"Language/Dart/keywords/function/#parameters","title":"Parameters","text":""},{"location":"Language/Dart/keywords/function/#positional","title":"Positional","text":"<pre><code>getHttpUrl(String server, String path, [int port=80]) {\n  // ...\n}\n\ngetHttpUrl('example.com', '/index.html', 8080); \ngetHttpUrl('example.com', '/index.html');      \n</code></pre> <p>note: The parameter wrapped by <code>[ ]</code> is a positional optional parameter.</p>"},{"location":"Language/Dart/keywords/function/#named","title":"Named","text":"<pre><code>getHttpUrl(String server, String path, {int port = 80, int numRetries = 3}) {\n  // ...\n}\n\ngetHttpUrl('example.com', '/index.html');\ngetHttpUrl('example.com', '/index.html', port: 8080);\ngetHttpUrl('example.com', '/index.html', port: 8080, numRetries: 5);\ngetHttpUrl('example.com', '/index.html', numRetries: 5, port: 8080);\ngetHttpUrl('example.com', '/index.html', numRetries: 5);\n</code></pre> <p>note: Named parameters make for easier-to-understand call sites, especially when there are boolean flags or out-of-context numbers.</p>"},{"location":"Language/Dart/keywords/generators/","title":"Generators","text":""},{"location":"Language/Dart/keywords/generic/","title":"Generic","text":""},{"location":"Language/Dart/keywords/generic/#generic-methods","title":"Generic methods","text":"<pre><code>T printFirst&lt;T&gt;(List&lt;T&gt; lst){\n    T first = lst[0];\n    print(first);\n    return first;\n}\n</code></pre>"},{"location":"Language/Dart/keywords/generic/#generic-classes","title":"Generic classes","text":"<pre><code>class myClass&lt;T,E extends num&gt; {\n    T t;\n    E e;\n    List&lt;T&gt; listT = &lt;T&gt;[];\n\n    MyClass(this.t, this.e);\n}\n\nvoid main(){\n    var myClass = MyClass&lt;int, double&gt;(8, 18);\n}\n</code></pre>"},{"location":"Language/Dart/keywords/getter%20and%20setter/","title":"Getter and Setter","text":"<ul> <li>Use <code>get</code> and <code>set</code> keyword.</li> <li>Behaves like a public variable at the calling site.</li> <li>Use getter and setter make the variable read-only or when there is some logic to setting the variable.</li> </ul> <pre><code>class myClass{\n    int _num;\n\n    myClass(this._num);\n\n    int get num =&gt; _num;\n    void set num(int num){\n        _num = num;\n    }\n}\n</code></pre>"},{"location":"Language/Dart/keywords/imports/","title":"Imports","text":""},{"location":"Language/Dart/keywords/imports/#build-in-libraries","title":"build-in libraries","text":"<p>Use <code>dart:</code> in import line, (math, html, io, etc)</p> <pre><code>import 'dart:math'\n</code></pre>"},{"location":"Language/Dart/keywords/imports/#other-libraries","title":"other libraries","text":"<pre><code>import 'package:my_lib.dart';\n</code></pre>"},{"location":"Language/Dart/keywords/imports/#alias-an-import","title":"alias an import","text":"<pre><code>import 'package:my_lib.dart' as custom\n\ncustom.MyClass inst = ...\n</code></pre>"},{"location":"Language/Dart/keywords/late/","title":"late","text":"<p>Using <code>late</code> when we don't want to initialize a variable immediately. - E.g class instance fields. - Verified at runtime. - <code>late</code> defers initialization but still prohibits us from treating it like a nullable variable.</p> <pre><code>class Coffee {\n    late final String _tem; // private variable\n\n    void heat(){\n        _tem = 'hot';\n    }\n\n    void chill(){\n        _tem = 'iced';\n    }\n\n    String serve() =&gt; _tem + ' coffee';\n}\n</code></pre> <p>The <code>final</code> allows <code>_tmp</code> to be immutable but assigned using one of <code>heat</code> or <code>chill</code> before it is used.</p>"},{"location":"Language/Dart/keywords/list/","title":"List","text":"<ul> <li>Dart only has generic containers (e.g <code>List&lt;T&gt;</code>).</li> <li>No array type, array are intended as instances of <code>List&lt;T&gt;</code>.</li> </ul> <pre><code>List&lt;double&gt; listOfDbls = new List&lt;double&gt;();\nfinal myuList = [1,2,3];\n</code></pre> <p>Useful methods / attributes: - .length - .add(T value) - .isEmpty - .contains(T value) - .forEach((e) =&gt; print(e)) - .iterator <code>while(iter.moveNext()) print(iter.current)</code></p>"},{"location":"Language/Dart/keywords/loop/","title":"Loop","text":""},{"location":"Language/Dart/keywords/loop/#loop","title":"Loop","text":"<pre><code>for(var i = 0; i &lt; 3; i++){\n    print('$i');\n}\n\nvar i = 0;\nwhile(i &lt; 10){\n    print(\"$i\");\n    i++;\n}\n</code></pre>"},{"location":"Language/Dart/keywords/loop/#for-in","title":"For in","text":"<p>Traverse all the elements of a container</p> <pre><code>var list = ['A', 'B', 'C'];\nfor (final element in list) {\n    print(element);\n}\n</code></pre>"},{"location":"Language/Dart/keywords/map/","title":"Map","text":"<p><code>map&lt;T, T&gt;</code></p> <pre><code>var identifier = { key1:value1, key2:value2 [,\u2026..,key_n:value_n] }\n</code></pre>"},{"location":"Language/Dart/keywords/nullable/","title":"Nullable","text":""},{"location":"Language/Dart/keywords/nullable/#declare","title":"Declare","text":"<pre><code>class myClass{\n    String? str;\n\n    myClass(this.str);\n}\n</code></pre>"},{"location":"Language/Dart/keywords/nullable/#operator","title":"Operator","text":"<p><code>?</code> used to declaration a type that may be null.</p> <pre><code>String? str;\nprint(str); // prints null\n</code></pre> <p><code>?[]</code> used with index operation.</p> <pre><code>print(str[0]); // prints null\n</code></pre> <p><code>!</code> convert a nullable into a non-nullable.</p> <pre><code>String nStr = str! // possible exception\n</code></pre> <p><code>??</code> used to produce a non-nullable value from a nullable one</p> <pre><code>int? nullable;\nint nonNullable = nullable ?? 0; //give 0\n</code></pre>"},{"location":"Language/Dart/keywords/object/","title":"Object","text":"<pre><code>class myClass{\n    final String str;\n    myClass(this.str);\n    void toString(){\n        print(str);\n    }\n}\n\nvoid main(){\n    final obj = myClass('hello');\n    print(obj.toString()); // hello\n}\n</code></pre>"},{"location":"Language/Dart/keywords/operator%20overloading/","title":"Operator Overloading","text":"<ul> <li>Arithmetic: +, -, *, /</li> <li>Relational: &gt;, &lt;, &lt;=, &gt;=</li> <li>Equality: !=, ==</li> <li>... many more</li> </ul> <pre><code>class myClass(){\n    final String str;\n    myClass(this.str);\n\n    @override\n    myClass operator +(myClass other){\n        return myClass(other.str + str);\n    }\n\n    @override \n    bool operator ==(covariant myClass other){\n        return other.str == str;\n    }\n\n    @override\n    int get hashcode =&gt; name.hashcode;\n}\n</code></pre>"},{"location":"Language/Dart/keywords/operators/","title":"Dart Operators","text":"<p>![[Pasted image 20220324222040.png]]</p>"},{"location":"Language/Dart/keywords/operators/#relational","title":"Relational","text":"<p>![[Pasted image 20220324222051.png]]</p>"},{"location":"Language/Dart/keywords/operators/#type-test","title":"Type test","text":"<p>![[Pasted image 20220324222132.png]]</p> <pre><code>if(grapes is Fruits){\n    (grapes as Fruit).color = \"Green\";\n}\n</code></pre>"},{"location":"Language/Dart/keywords/operators/#logical","title":"Logical","text":"<p>![[Pasted image 20220324222354.png]]</p>"},{"location":"Language/Dart/keywords/operators/#bitwise-and-shift","title":"Bitwise and Shift","text":"<p>![[Pasted image 20220324222424.png]]</p>"},{"location":"Language/Dart/keywords/throw/","title":"throw Exception","text":"<pre><code>// Exception subtype\nthrow Exception('Some arbitrary error');\n\n// arbitrary object\nthrow 'Out of llamas';\n</code></pre>"},{"location":"Language/Dart/keywords/try...catch.../","title":"try...catch...","text":"<pre><code>try {\n\n} on OutOfLlamasException {\n    // a specific exception\n} on Exception catch (e) {\n    // anything else that is an exception\n    print('Unknown exception: $e');\n} catch (e) {\n    // no specifed type, handles all\n    print(e);\n}\n</code></pre>"},{"location":"Language/Dart/keywords/typedef/","title":"typedef","text":"<ul> <li><code>typedef</code> allows one type to be specified by another name. In the other word, custom type.<ul> <li>since functions are types they can be <code>typedef</code>'d</li> </ul> </li> <li><code>typedef</code> long declarations for readability.</li> <li>leave Function types fully written out to aid clarity.</li> </ul> <pre><code>typedef LoggerFunc = void Function(String msg);\ntypedef ListMapper&lt;X&gt; = Map&lt;X, List&lt;X&gt;&gt;;\n\nvoid printIntegers(LoggerFunc logger){\n    logger(\"test\");\n}\n\nvoid main() {\n    printIntegers(print);\n    ListMapper&lt;String&gt; m = {};\n}\n</code></pre>"},{"location":"Language/Dart/keywords/visibility/","title":"Visibility","text":"<ul> <li>In dart everything is public by default.</li> <li>Prepend _ to a name (instance variable or method named) to make it private.</li> </ul> <pre><code>class MyClass {\n    // private instance field\n    String _name;\n\n    MyClass(this._name);\n\n    // private method\n    void _printNumber(int a){\n        var s = _name + \"$a\";\n        print(s);\n    }\n}\n\n// a class that isn't visible outside\nclass _hiddenClass{\n}\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/1.%20JavaScript/","title":"JavaScript","text":"<p>JavaScript is a scripting language we can use to make web pages [[interactive]]. It is one of the core technologies of the web, along with [[Basic HTML|HTML]] and [[Basic CSS|CSS]], and is supported by all  modern browsers.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/10.%20loop/","title":"Loop","text":"<p>We can run the same code multiple times by using a loop.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/10.%20loop/#while","title":"While","text":"<p>The first type of loop we will learn is called a <code>while</code> loop because it runs while a specified condition is true and stops once that condition is no longer true.</p> <pre><code>const arry = [];\nlet i = 0;\n\nwhile (i &lt; 5) {\n    arr.push(i);\n    i++;\n}\n</code></pre> <p>In the code example above, the <code>while</code> loop will execute 5 times and append the numbers 0 through 4 to <code>ourArray</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/10.%20loop/#for","title":"For","text":"<p>The most common type of [[1. JavaScript|JavaScript]] loop is called a <code>for</code> loop because it runs for a specific number of times.</p> <p>For loops are declared with three optional expressions separated by semicolons.</p> <p><code>for (a; b; c)</code>, where <code>a</code> is the initialization statement. <code>b</code> is the condition statement, and <code>c</code> is the final expression.</p> <p>The initialization statement is executed one time only before the loop starts. It is typically used to define and setup your loop variable.</p> <p>The condition statement is evaluated at the beginning of every loop iteration and will continue as long as it evaluates to <code>true</code>. When the condition is <code>false</code> at the start of the iteration, the loop will stop executing. This means if the condition starts as false, your loop will never execute.</p> <p>The final expression is executed at the end of each loop iteration, prior to the next condition check and is usually used to increment or decrement your loop counter.</p> <pre><code>const arr = [];\n\nfor(let i = 0; i &lt; 5; i++){\n    arr.push(i);\n}\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/10.%20loop/#iterate-odd-number","title":"Iterate Odd Number","text":"<p>For loops don't have to iterate one at a time. By changing our <code>final-expression</code>, we can count by even numbers.</p> <pre><code>const arr = [];\n\nfor(let i = 0; i &lt; 5; i += 2) {\n    arr.push(i);\n}\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/10.%20loop/#iterate-backwards","title":"Iterate Backwards","text":"<pre><code>const arr=[];\n\nfor(let i = 10; i &lt; 0; i--){\n    arr.push(i);\n} \n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/10.%20loop/#iterate-through-an-array","title":"Iterate Through an Array","text":"<p>A common task in [[1. JavaScript|JavaScript]] is to iterate through the contents of an array. One way to do that is with a <code>for</code> loop. This code will output each element of the array <code>arr</code> to the console:</p> <pre><code>const arr = [10, 9, 8, 7, 6];\n\nfor (let i = 0; i &lt; arr.lengthl; i++){\n    arr.pop(i);\n}\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/10.%20loop/#nesting-for-loop","title":"Nesting For Loop","text":"<p>If we have a multi-dimensional array, you can use the same logic as the prior waypoint to loop through both the array and any sub-[[6. Array|arrays]]. Here is an example:</p> <pre><code>const arr = [\n    [1, 2],\n    [3, 4],\n    [5, 6]\n];\n\nfor (let i = 0; i &lt; arr.length; i++){\n    for(let j = 0; j &lt; arr[i].length; j++){\n        console.log(arr[i][j]);\n    }\n}\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/10.%20loop/#dowhile","title":"Do...While","text":"<p><code>do...while</code>  will first <code>do</code> one pass of the code inside the loop no matter what, and then continue to run the loop <code>while</code> the specified condition evaluates to <code>true</code>.</p> <pre><code>const arr=[];\nlet i = 0;\n\ndo{\n    arr.push(i);\n    i++;\n} while (i &gt; 5);\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/10.%20loop/#recursion","title":"Recursion","text":"<p>Recursion is the concept that a function can be expressed in terms of itself. To help understand this, start by think about the following task: multiply the first <code>n</code> elements of an array to create the product of those element. Using a <code>for</code> loop, we could do this:</p> <pre><code>function multiply(arr, n) {\n    let product = 1;\n    for(let i = 0; i &lt; n; i++){\n        product *= arr[i];\n    }\n    return product;\n}\n</code></pre> <p>However, notice that <code>multiply(arr, n) == multiply(arr, n - 1) * arr[n - 1]</code>. That means you can rewrite <code>multiply</code> in terms of itself and never need to use a loop.</p> <pre><code>function multiply(arr, n){\n    if (n &lt;= 0){\n        return 1;\n    } else {\n        return multiply(arr, n - 1) * arr[n - 1];\n    }\n}\n</code></pre> <p>The recursive version of <code>multiply</code> breaks down like this. In the base case, where <code>n &lt;= 0</code>, it returns 1. For larger values of <code>n</code>, it calls itself, but with <code>n - 1</code>. That function call is evaluated in the same way, calling <code>multiply</code> again until <code>n &lt;= 0</code>. At this point, all the [[7. Function|functions]] can return and the original <code>multiply</code> returns the answer.</p> <p>For example, a recursive function, that returns the sum of the first <code>n</code> elements of an array <code>arr</code>.</p> <pre><code>function sum(arr, n) {\n    if(n != 0){\n    return sum(arr, n-1) + arr[n-1];\n    } else {\n    return 0;\n    }\n}\n</code></pre> <p>Use Recursion to Create a Countdown</p> <pre><code>function countdown(n){\n    return (n &lt; 1) ? []\n    : [n, ...countdown(n - 1)];\n}\n</code></pre> <p>We used [[5. Spread Operator#Use the Spread Operator to Evaluate Arrays In-Place|Spread Operator]] (...).</p> <p>or</p> <pre><code>function countdown(n){ \n    return n &lt; 1 ? [] : [n].concat(countdown(n - 1)); \n}\n</code></pre> <p>Use Recursion to Create a Range of Numbers</p> <pre><code>function rangeOfNumbers(startNum, endNum) {\n    return (startNum &gt; endNum) ? []\n    : [startNum, ...rangeOfNumbers(startNum + 1, endNum)];\n};\n</code></pre> <p>We used [[5. Spread Operator#Use the Spread Operator to Evaluate Arrays In-Place|Spread Operator]] (...).</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/11.%20Math/","title":"Math","text":""},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/11.%20Math/#random","title":"Random","text":"<p>Random numbers are useful for creating random behavior.</p> <p>[[1. JavaScript|JavaScript]] has a <code>math.random()</code> function that generates a random decimal number between <code>0</code> (inclusive) and <code>1</code> (exclusive). Thus <code>Math.random()</code> can return a <code>0</code> but never return a <code>1</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/11.%20Math/#random-whole-numbers","title":"Random Whole Numbers","text":"<p>It's great that we can generate random decimal numbers, but it's even more useful if we use it to generate random whole numbers.</p> <ol> <li>Use <code>Math.random()</code> to generate a random decimal.</li> <li>Multiply that random decimal by <code>20</code>.</li> <li>Use another function, <code>Math.floor()</code> to round the number down to its nearest whole number.</li> </ol> <p>Remember that <code>Math.random()</code> can never quite return a <code>1</code> and, because we're rounding down, it's impossible to actually get <code>20</code>. This technique will give us a whole number between <code>0</code> and <code>19</code>.</p> <p>Putting everything together, this is what our code looks like:</p> <pre><code>Math.floor(Math.random() * 20);\n</code></pre> <p>We are calling <code>Math.random()</code>, multiplying the result by 20, then passing the value to <code>Math.floor()</code> function to round the value down to the nearest whole number.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/11.%20Math/#random-whole-numbers-within-a-range","title":"Random Whole Numbers within a Range","text":"<p>To do this, we'll define a minimum number <code>min</code> and a maximum number <code>max</code>.</p> <p>Here's the formula we'll use. Take a moment to read it and try to understand what this code is doing:</p> <pre><code>Math.floor(Math.random() * (max - min + 1)) + min\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/11.%20Math/#parseint","title":"ParseInt","text":"<p>The <code>parseInt()</code> function parses a [[5. String|string]] and returns an integer. Here's an example:</p> <pre><code>const a = parseInt(\"007\");\n</code></pre> <p>The above function converts the [[5. String|string]] <code>007</code> to the integer <code>7</code>. If the first character in the [[5. String|string]] can't be converted into a number, then it returns <code>NaN</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/11.%20Math/#parseint-function-with-a-radix","title":"ParseInt Function with a Radix","text":"<p>The <code>parseInt()</code> function parses a [[5. String|string]] and returns an integer. It takes a second argument for the radix, which specifies the base of the number in the [[5. String|string]]. The radix can be an integer between 2 and 36.</p> <pre><code>const a = parseInt(\"11\", 2);\n</code></pre> <p>The radix variable says that <code>11</code> is in the binary system, or base 2. This example converts the [[5. String|string]] <code>11</code> to an integer <code>3</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/2.%20Comment/","title":"Comment","text":"<p>Comment are lines of code that [[1. JavaScript|JavaScript]] will [[intentionally]] ignore. Comment are a great way to leave notes to ourself and to other people who will later need to figure out what that code does.</p> <p>There are two way to write comments in [[1. JavaScript|JavaScript]], This is an in-line comment:</p> <pre><code>// This is an in-line commnet.\n</code></pre> <p>We can also make a multi-line comment beginning with <code>/*</code> and ending with <code>*/</code>. This is a multi-line comment:</p> <pre><code>/* This is a multi-line\n    comment. */\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/3.%20Variables/","title":"Variables","text":"<p>In computer science, data is anything that is meaningful to the computer. </p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/3.%20Variables/#data-type","title":"Data type","text":"<p>[[1. JavaScript|JavaScript]] provides eight different data types which are  - <code>undefined</code>  - <code>null</code> - <code>boolean</code> - <code>string</code> - <code>symbol</code> - <code>bigint</code> - <code>number</code> - <code>object</code></p> <p>For example, computer [[distinguish]] between numbers,  such as the number <code>12</code>, and <code>strings</code>, such as <code>\"12\"</code>, <code>\"dog\"</code>, or <code>\"123 cats\"</code>, which are collections of characters. Computers can perform mathematical operations on a number, but not on a string.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/3.%20Variables/#typeof","title":"typeof","text":"<p>In [[1. JavaScript|JavaScript]], you can determine the type of a variable or a value with the <code>typeof</code>operator, as follows:</p> <pre><code>typeof 3\ntypeof '3'\n</code></pre> <p><code>typeof 3</code> returns the string <code>number</code>, and <code>typeof '3'</code> returns the string <code>string</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/3.%20Variables/#declar-3-variablesvariables","title":"Declar [[3. Variables|Variables]]","text":"<p>[[3. Variables|Variables]] allow computers to store and [[manipulate]] data in dynamic fashion. They do this by using a '\"label\" to point to the data rather than using the data itself. Any of the eight data types may be stored in a [[3. Variables|Variable]].</p> <p>[[3. Variables|Variable]] are similar to the x and y variables you use in mathematics, which means they're a simple name to represent the data we want to refer to. Computer [[3. Variables|variables]] differ from mathematical variables in that they can store different values at different times.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/3.%20Variables/#using-var","title":"Using var","text":"<p>We tell [[1. JavaScript|javaScript]] to create or declare a variable by putting the keyword <code>var</code> in front of it, like so:</p> <pre><code>var ourName;\n</code></pre> <p>Here we creates a [[3. Variables|variable]] called <code>ourName</code>. In [[1. JavaScript|JavaScript]] we end statements with a [[semicolon]]. [[3. Variables|Variable]] names can be made up of numbers, letters, and <code>$</code> or <code>_</code>, but may not contain spaces or start with a number.</p> <p>One of the biggest problems with declaring variables with the <code>var</code> keyword is that you can easily overwrite variable declarations:</p> <pre><code>var camper = \"James\";\nvar camper = \"David\";\nconsole.log(camper);\n</code></pre> <p>In the code above, the <code>camper</code> variable is originally declared as <code>James</code>, and is then overridden to be <code>David</code>. The console then displays the string <code>David</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/3.%20Variables/#using-let","title":"Using let","text":"<p>A keyword called <code>let</code> was introduced in ES6, a major update to [[1. JavaScript|JavaScript]], to solve this potential issues with <code>var</code> keyword. If we use <code>let</code> in the code above, it results in an error:</p> <pre><code>let camper = \"James\";\nlet camper = \"David\";\n</code></pre> <p>The error can be seen in our browser console.</p> <p>So unlike <code>var</code>, when you use <code>let</code>, a variable with the same name can only be declared once.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/3.%20Variables/#using-const","title":"Using const","text":"<p>In ES6, we can also declare variables using the <code>const</code> keyword. <code>const</code> has all the awesome features that <code>let</code> has, with the added bonus that variables declared using <code>const</code> are read-only. They are constant value, which means that once a variable is assigned with <code>const</code>, it cannot be reassigned:</p> <pre><code>const FAV_PET = \"Cats\";\nFAV_PET = \"Dogs\";\n</code></pre> <p>The console will display an error due to reassigning the value of <code>FAV_PET</code>.</p> <p>We should always name variables you don't want to reassign using the <code>const</code> keyword. This helps when you accidentally attempt to reassign a variable that is meant to stay constant.</p> <p>A common [[practice]] when naming constants is to use all uppercase letters, with words separated by an underscore.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/3.%20Variables/#storing-values","title":"Storing Values","text":"<p>In [[1. JavaScript|Javascript]], we can store a value in a [[3. Variables|variable]] with the <code>assignment</code> operator (<code>=</code>).</p> <pre><code>myVariable = 5;\n</code></pre> <p>This assigns the <code>number</code> value <code>5</code> to <code>myVariable</code>.</p> <p>If there are any calculations to the right of the <code>=</code> operator, those are performed before the value is assigned to the [[3. Variables|variable]] on the left of the operator.</p> <pre><code>var myVar;\nmyVar = 5;\n</code></pre> <p>First, this code create a [[3. Variables|variable]] named <code>myVar</code>. Then, the code assigns <code>5</code> to <code>myVar</code>. Now if <code>myVar</code> appears again in the code, the program will treat if as if it is <code>5</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/3.%20Variables/#assigning-the-value-of-one-variable-to-another","title":"Assigning the Value of One Variable to Another","text":"<p>After a value is assigned to a [[3. Variables|variable]] using the assignment operator, we can assign the value of that [[3. Variables|variable]] to another [[3. Variables|variable]] using the assignment operator.</p> <pre><code>var myVar;\nmyVar = 5;\nvar myNum;\nmyNum = myVar;\n</code></pre> <p>The above declares a <code>myVar</code> [[3. Variables|variable]] with no value, then assigns it the value <code>5</code>. Next, a [[3. Variables|variable]] named <code>myNum</code> is declared with no value. Then, the contents of <code>myVar</code> (which is <code>5</code>) is assigned to the variable <code>myNum</code>. Now, <code>myNum</code> also has the value of <code>5</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/3.%20Variables/#initializing-variables","title":"Initializing Variables","text":"<p>It is common to initialize a [[3. Variables|variable]] to an initial value in the same line as it is declared.</p> <pre><code>var myVar = 0;\n</code></pre> <p>Creates a new variable called <code>myVar</code> and assigns it an initial value of <code>0</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/3.%20Variables/#declare-string-variables","title":"Declare String Variables","text":"<p>We can declare a string [[3. Variables|variable]] like this:</p> <pre><code>var myName = \"my name\";\n</code></pre> <p><code>my name</code> is called a string literal. A string literal, or string, is a series of zero or more characters enclosed in single or double quotes.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/3.%20Variables/#uninitialized-variables","title":"Uninitialized Variables","text":"<p>When [[1. JavaScript|JavaScript]] [[3. Variables|variables]] are declared, they an initial value of <code>undefined</code>. If we do a mathematical operation on an <code>undefined</code> variable we result will be <code>NaN</code> which means <code>Not a Number</code>. If we concatenate a string with an <code>undefined</code> variable, we will get a literal string of <code>undefined</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/3.%20Variables/#case-sensitivity-in-variables","title":"Case sensitivity in Variables","text":"<p>In [[1. JavaScript|JavaScript]] all variables and function names are case sensitive. This means that capitalization matters.</p> <p><code>MYVAR</code> is not the same as <code>MyVar</code> nor <code>myvar</code>. It is possible to have multiple distinct variables with the same name but different casing. It is strongly recommended that for the sake of clarity, you do not use this language feature.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/4.%20Number%20Operation/","title":"Number Operation","text":"<p><code>Number</code> is a [[3. Variables#Data type|Data types]] in [[1. JavaScript|JavaScript]] which represents numeric data. </p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/4.%20Number%20Operation/#add","title":"Add","text":"<p>[[1. JavaScript|JavaScript]] uses the <code>+</code> symbol as an addition operator when placed between two numbers.</p> <pre><code>const myVar = 5 + 10;\n</code></pre> <p><code>myVar</code> now has the value <code>15</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/4.%20Number%20Operation/#subtract","title":"Subtract","text":"<p>[[1. JavaScript|JavaScript]] uses the <code>-</code> symbol for subtraction.</p> <pre><code>const myVar = 10 - 5;\n</code></pre> <p><code>myVar</code> would have the value <code>5</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/4.%20Number%20Operation/#multiply","title":"Multiply","text":"<p>[[1. JavaScript|JavaScript]] uses the <code>*</code> symbol for multiplication of two numbers.</p> <pre><code>const myVar = 13 * 13;\n</code></pre> <p><code>myVar</code> would have the value <code>169</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/4.%20Number%20Operation/#divide","title":"Divide","text":"<p>[[1. JavaScript|JavaScript]] uses the <code>/</code> symbol for division.</p> <pre><code>const myVar = 16 / 2;\n</code></pre> <p><code>myVar</code> now has the value <code>8</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/4.%20Number%20Operation/#division","title":"Division","text":"<p>The remainder operator <code>%</code> gives the remainder of the division of two numbers.</p> <p>Example</p> <p>5 % 2 = 1 because Math.floor(5 / 2) = 2 (Quotient) 2 * 2 = 4 5 - 4 = 1 (Remainder)</p> <p>Usage In mathematics, a number can be checked to be even or odd by checking the remainder of the division of the number by <code>2</code>.</p> <p>17 % 2 = 1 (17 is Odd) 48 % 2 = 0 (48 is Even)</p> <p>Note: The remainder operator is sometimes incorrectly referred to as the modulus operator. It is very similar to modulus, but does not work properly with negative numbers.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/4.%20Number%20Operation/#increment-a-number","title":"Increment a Number","text":"<p>We can easily increment or add one to a variable with the <code>++</code> operator.</p> <pre><code>i++;\n</code></pre> <p>is the equivalent of</p> <pre><code>i = i + 1;\n</code></pre> <p>Note: The entire line becomes <code>i++;</code>, [[eliminating]] the need for the equal sign.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/4.%20Number%20Operation/#decrement-a-number","title":"Decrement a Number","text":"<p>You can easily decrement or decrease a variable by one with the <code>--</code> operator.</p> <pre><code>i--;\n</code></pre> <p>is the equivalent of</p> <pre><code>i = i - 1;\n</code></pre> <p>Note: The entire line becomes <code>i--;</code>, [[eliminating]] the need for the equal sign.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/4.%20Number%20Operation/#compound-assignment","title":"Compound Assignment","text":"<p>One such operator is the <code>+=</code> operator.</p> <pre><code>let myVar = 1;\nmyVar += 5;\n</code></pre> <p><code>-=</code> subtracts a number from a variable.</p> <pre><code>myVar -= 5;\n</code></pre> <p>The <code>*=</code> operator multiplies a variable by a number.</p> <pre><code>myVar *= 5;\n</code></pre> <p>The <code>/=</code> operator divides a variable by another number.</p> <pre><code>myVar /= 5;\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/5.%20String/","title":"String","text":""},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/5.%20String/#escaping-literal-quotes-in-strings","title":"Escaping Literal Quotes in Strings","text":"<p>In [[1. JavaScript|JavaScript]], we can escape a quote from considering it as an end of string quote by placing a backslash (<code>\\</code>) in front of the quote.</p> <pre><code>const sampleStr = \"Alan said, \\\"Peter is learning JavaScript\\\".\";\n</code></pre> <p>This signals to [[1. JavaScript|JavaScript]] that the following quote is not the end of the string, but should instead appear inside the string. So if you were to print this to the console, we would get:</p> <pre><code>Alan said, \"Peter is learning [[1. [[1. JavaScript|JavaScript]]|JavaScript]]\".\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/5.%20String/#quoting-string-with-single-quotes","title":"Quoting String with Single Quotes","text":"<p>String values in [[1. JavaScript|JavaScript]] may be written with single or double quotes, as long as you start and end with the same type of quote. Unlike some other programming languages, single  and double quotes work the same in [[1. JavaScript|JavaScript]].</p> <pre><code>const doubleQuoteStr = \"This is a string\"; \nconst singleQuoteStr = 'This is also a string';\n</code></pre> <p>The reason why you might want to use one type of quote over the other is if you want to use both in a string. This might happen if you want to save a conversation in a string and have the conversation in quotes. Another use for it would be saving an <code>&lt;a&gt;</code> tag with various attributes in quotes, all within a string.</p> <pre><code>const conversation = 'Finn exclaims to Jake, \"Algebraic!\"';\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/5.%20String/#escape-sequences-in-strings","title":"Escape Sequences in Strings","text":"<p>Quotes are not the only characters that can be escaped inside a string. There are two reasons to use escaping characters:</p> <ul> <li>To allow us to use characters we may not otherwise be able to type out, such as a carriage return.</li> <li>To allow us to represent multiple quotes in a string without [[1. JavaScript|JavaScript]] [[misinterpret|misinterpreting]] what we mean.</li> </ul> <p>Code  Output</p> <p><code>\\'</code> single quote</p> <p><code>\\\"</code> double quote</p> <p><code>\\\\</code> backslash</p> <p><code>\\n</code> newline</p> <p><code>\\r</code> carriage return</p> <p><code>\\t</code> tab</p> <p><code>\\b</code> word boundary</p> <p><code>\\f</code> form feed</p> <p>Note that the backslash itself must be escaped in order to display as a backslash.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/5.%20String/#concatenating-strings","title":"[[Concatenating]] Strings","text":""},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/5.%20String/#by-plus-operator","title":"by Plus Operator","text":"<p>In [[1. JavaScript|JavaScript]], when the <code>+</code> operator is used with a <code>String</code> value, it is called the concatenation operator. We can build a new string out of other strings by [[concatenating]] them together.</p> <pre><code>const ourStr = \"I come first. \" + \"I come second.\";\n</code></pre> <p>We can also use the <code>+=</code> operator to concatenate a string onto the end of an existing string variable. This can be very helpful to break a long string over several lines.</p> <pre><code>let ourStr = \"I come first. \";\nourStr += \"I come second.\";\n</code></pre> <p>Sometimes you will need to build a string, Mad Libs style. By using the concatenation operator (<code>+</code>), you can insert one or more variables into a string our building.</p> <pre><code>const ourName = \"freeCodeCamp\";\nconst ourStr = \"Hello, our name is \" + ourName + \", how are you?\";\n</code></pre> <p><code>ourStr</code> would have a value of the string <code>Hello, our name is freeCodeCamp, how are you?</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/5.%20String/#length-of-a-string","title":"Length of a String","text":"<p>We can find the length of a <code>String</code> value by writing <code>.length</code> after the string variable or string literal.</p> <pre><code>console.log(\"hello\".length);\n</code></pre> <p>The value <code>5</code> would be displayed in the [[1. console|console]].</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/5.%20String/#find-the-nth-character-in-a-string","title":"Find the Nth character in a String","text":"<p>Bracket notation is a way to get a character at a specific index within a string.</p> <p>[[1. JavaScript|JavaScript]], don't start counting at 1 like humans do. They start at 0. This is referred to as Zero-based indexing.</p> <p>For example, the character at index 0 in the word <code>Charles</code> is <code>C</code>. So if <code>const firstName = \"Charles\"</code>, you can get the value of the first letter of the string by using <code>firstName[0]</code>.</p> <pre><code>const firstName = \"Terry\";\nconst firetLeter = firstName[0];\n</code></pre> <p><code>firestLeter</code> would have a value of the string <code>c</code>.</p> <p>To find the last character:</p> <pre><code>cont lastLeter = firstName[firstName.length-1];\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/5.%20String/#string-immutability","title":"String Immutability","text":"<p>In [[1. JavaScript|JavaScript]], <code>String</code> values are [[immutable]], which means that they cannot be [[altered]] once created. </p> <pre><code>let myStr = \"Bob\";\nmyStr[0] = \"J\";\n</code></pre> <p>cannot change the value of <code>myStr</code> to <code>Job</code>, because the contents of <code>myStr</code> cannot be [[altered]]. Note that this does not mean that <code>myStr</code> cannot be changed, just that the individual characters of a string literal cannot be changed. The only way to change <code>myStr</code>would be to assign it with a new string, like this:</p> <pre><code>let myStr = \"Bob\";\nmyStr = \"Job\";\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/5.%20String/#split","title":".split()","text":"<pre><code>onst str = 'The quick brown fox jumps over the lazy dog.';\n\nconst words = str.split(' ');\nconsole.log(words[3]);\n// expected output: \"fox\"\n\nconst chars = str.split('');\nconsole.log(chars[8]);\n// expected output: \"k\"\n\nconst strCopy = str.split();\nconsole.log(strCopy);\n// expected output: Array [\"The quick brown fox jumps over the lazy dog.\"]\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/5.%20String/#slice","title":".slice()","text":"<p>Rather than modifying an array, <code>slice()</code> copies or extracts a given number of elements to a new array, leaving the array it is called upon untouched. <code>clice()</code> takes only 2 parameter -  the first is the index at which to begin extraction, and the second is the index at which to stop extraction (extraction will occur up to, but not including the element at this index). Consider this:</p> <pre><code>let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];\n\nlet todaysWeather = weatherConditions.slice(1, 3);\n</code></pre> <p><code>todaysWeather</code> would have the value <code>['snow', 'sleet']</code>, while <code>weatherConditions</code> would still have <code>['rain', 'snow', 'sleet', 'hail', 'clear']</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/5.%20String/#endswith","title":".endsWith()","text":"<p>was introduced in ES2015, Check if a string ends with the given target string. <code>endsWith('n')</code></p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/5.%20String/#repeat","title":".repeat()","text":"<p>Repeat a given string for <code>num</code> times <code>.repeat(100)</code></p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/5.%20String/#replace","title":".replace()","text":"<pre><code>const p = 'The quick brown fox jumps over the lazy dog. If the dog reacted, was it really lazy?';\n\nconsole.log(p.replace('dog', 'monkey'));\n// expected output: \"The quick brown fox jumps over the lazy monkey. If the dog reacted, was it really lazy?\"\n\n\nconst regex = /Dog/i;\nconsole.log(p.replace(regex, 'ferret'));\n// expected output: \"The quick brown fox jumps over the lazy ferret. If the dog reacted, was it really lazy?\"\n\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/5.%20String/#stringprototypetrim","title":"String.prototype.trim()","text":""},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/","title":"Array","text":"<p>With [[1. JavaScript|JavaScript]] <code>array</code> variables, we can store several pieces of data in one place.</p> <p>We start an array declaration with an opening square bracket, end it with a closing square bracket, and put a comma between each entry, like this </p> <pre><code>const sandwitch = [\"peanut butter\", \"jelly\", \"bread\"];\nconst myArr = [\"Hello\", 1];\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#nest-one-array-within-another","title":"Nest one Array within Another","text":"<p>We can also nest [[6. Array|arrays]] within other arrays, like this:</p> <pre><code>const teams = [[\"bulls\", 23], [\"White Sox\", 45]];\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#access-array-data-with-index","title":"Access Array Data with index","text":"<p>We can access the data inside [[6. Array|arrays]] using indexes.</p> <p>Array index are written in the sam bracket notation that strings use, except that instead of specifying a character, they specifying an entry in the array. Like strings, arrays use zero-based indexing, so the first element in an array has an index of <code>0</code>, like this:</p> <pre><code>const arr = [10, 20, 30];\nconst data = array[0];\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#modify-array-data-with-index","title":"Modify Array Data with Index","text":"<p>Unlink strings, the entires of array are mutable and can be changed freely, even if the array was declared with <code>const</code>. Like this:</p> <pre><code>const ourArray = [50, 40, 30];\noirArray[0] = 15;\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#access-multi-dimensional-arrays-with-indexes","title":"Access Multi-Dimensional Arrays With Indexes","text":"<p>One way to think of a multi-dimensional array, is as an array of arrays. When you use brackets to access your array, the first set of brackets refers to the entries in the outer-most (the first level) array, and each additional pair of brackets refers to the next level of entries inside. Like this:</p> <pre><code>const arr = [\n    [1,2,3],\n    [4,5,6],\n    [7,8,9],\n    [[10, 11, 12], 13, 14]\n];\n\narr[3];\narr[3][0];\narr[3][0][1];\n</code></pre> <p><code>arr[3]</code> is <code>[[10, 11, 12], 13, 14]</code>, <code>arr[3][0]</code> is <code>[10, 11, 12]</code>, and <code>arr[3][0][1]</code> is <code>11</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#append-data-to-array","title":"Append data to Array","text":""},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#manipulate-array-with-push","title":"[[Manipulate]] Array With push()","text":"<p>An easy way to append data to the end of an array is via the <code>push()</code> function.</p> <p><code>.push()</code> takes one or more parameters and \"pushes\" them onto the end of the array. Example:</p> <pre><code>const arr1 = [1, 2, 3];\narr1.push(4);\n\nconst arr2 = [\"a\", \"b\", \"c\"];\narr2.push([\"d\", \"e\"]);\n</code></pre> <p><code>arr1</code> now have value <code>[1, 2, 3, 4]</code>. <code>arr2</code> now have value <code>[\"a\", \"b\", \"c\", [\"d\", \"e\"]]</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#manipulate-arrays-with-unshift","title":"[[Manipulate]] Arrays With unshift()","text":"<p><code>.unshift()</code> adds the element at the beginning of the array. <code>.unshift()</code> works exactly like <code>.push()</code>, but instead of adding the element at the end of the array.</p> <pre><code>const arr = [1, 4, 5];\narr.shift();\narr.unshift(2);\n</code></pre> <p><code>arr</code> now have value <code>[2, 4, 5]</code>;</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#remove-data-from-array","title":"Remove data from Array","text":""},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#manipulate-array-with-pop","title":"[[Manipulate]] Array With pop()","text":"<p><code>.pop()</code> is used to pop a value off the end of an array. We can store this popped off value by assigning it to variable. In other words, <code>.pop()</code> removes the last element from an array and returns that element.</p> <p>Any type of entry can be popped off of an array - numbers, strings, even nested arrays.</p> <pre><code>const arr = [1, 4, 6];\nconst myVar = arr.pop();\n</code></pre> <p><code>arr</code> now have value <code>[1, 4]</code>. <code>myVar</code> now have value <code>6</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#manipulate-array-with-shift","title":"[[Manipulate]] Array With shift()","text":"<p><code>.shift()</code> works just like <code>.pop()</code>, except it removes the first element instead of the last.</p> <pre><code>const arr = [1, 4, 6];\nconst myVar = arr.shift();\n</code></pre> <p><code>arr</code> now have value <code>[4, 6]</code>. <code>myVar</code> now have value <code>1</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#merge-arrays","title":"Merge arrays","text":"<p>The <code>concat()</code> method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.</p> <pre><code>const array1 = ['a', 'b', 'c'];\nconst array2 = ['d', 'e', 'f'];\nconst array3 = array1.concat(array2);\n\nconsole.log(array3);\n// expected output: Array [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#splice","title":"Splice","text":""},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#remove-items","title":"Remove Items","text":"<p><code>splice()</code> allows us to do just that: remove any number of consecutive elements from anywhere in an array. <code>splice()</code> accept 3 parameters:</p> <ul> <li>The first two parameter of <code>splice()</code> are integers which represent index, or positions, of the array.</li> </ul> <pre><code>let arr = ['a', 'b', 'c', 'd', 'e'];\n\nlet newArr = arr.splice(2,2);\n</code></pre> <p>Here we remove 2 elements, beginning with the third element (index 2). <code>array</code> would have the value <code>['a', 'b', 'e']</code>, and <code>newArr</code> has the value <code>['c', 'd']</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#add-items","title":"Add Items","text":"<p>We can use the third parameter, comprised of one or more element(s), to add to the array. This can be incredibly useful for quickly switching out an element, or a set of elements, for another.</p> <pre><code>const number = [10, 11, 12, 12, 15];\nconst startIndex = 3;\nconst amountToDelete = 1;\n\nnumbers.splice(startIndex, amounToDelete, 13, 14);\nconsole.log(number);\n</code></pre> <p>The second occurrence of <code>12</code> is removed, and we add <code>13</code> and <code>14</code> at the same index. The <code>numbers</code> array would now be <code>[10, 11, 12, 13, 14, 15]</code>.</p> <p>Here, we begin with an array of numbers. Then, we pass the following to <code>splice()</code>: The index at which to begin deleting elements (3), the number of elements to be deleted (1), and the remaining arguments (13, 14) will be inserted starting at that same index. Note that there can be any number of elements (separated by commas) following <code>amountToDelete</code>, each of which gets inserted.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#copy-array-items","title":"Copy Array Items","text":""},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#with-the-slice","title":"With the Slice","text":"<p>Rather than modifying an array, <code>slice()</code> copies or extracts a given number of elements to a new array, leaving the array it is called upon untouched. <code>clice()</code> takes only 2 parameter -  the first is the index at which to begin extraction, and the second is the index at which to stop extraction (extraction will occur up to, but not including the element at this index). Consider this:</p> <pre><code>let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];\n\nlet todaysWeather = weatherConditions.slice(1, 3);\n</code></pre> <p><code>todaysWeather</code> would have the value <code>['snow', 'sleet']</code>, while <code>weatherConditions</code> would still have <code>['rain', 'snow', 'sleet', 'hail', 'clear']</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#with-the-5-spread-operatorspread-operator","title":"With the [[5. Spread Operator|Spread Operator]]","text":"<p>While <code>slice()</code> allows us to be selective about what elements of an array to copy, among several other useful tasks, ES6's new [[5. Spread Operator|spread operator]] allows us to easily copy all of an array's elements, in order, with a simple and highly readable syntax. The spread syntax simply looks like this: <code>...</code></p> <p>In [[practice]], we can use the [[5. Spread Operator|spread operator]] to copy an array like so:</p> <pre><code>let thisArray = [true, true, undefined, false, null];\nlet thatArray = [...thisArray];\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#combine-arrays","title":"Combine Arrays","text":""},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#with-the-5-spread-operatorspread-operator_1","title":"With the [[5. Spread Operator|Spread Operator]]","text":"<p>Another huge advantage of the [[5. Spread Operator|spread operator]] is the ability to combine arrays, or to insert all the elements of one array into another, at any index. With more traditional syntaxes, we can concatenate arrays, but this only allows us to combine arrays at the end of one, and at the start of another. Spread syntax makes the following operation extremely simple:</p> <pre><code>let thisArray = ['a', 'b', 'c', 'd'];\nlet thatArray = ['1', '2', '3', ...thisArray, '4'];\n</code></pre> <p><code>thatArray</code> would have the value <code>['1','2','3','4',a','b','c','d']</code></p> <p>Using spread syntax, we have just achieved an operation that would have been more complex and more verbose had we used traditional methods.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#presence-of-an-element","title":"Presence of an Element","text":""},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#with-the-indexof","title":"With the indexOf()","text":"<p>Since arrays can be changed, or mutated, at any time, there's no guarantee about where a particular piece of data will be on a given array, or if that element even still exists. Luckily, [[1. JavaScript|JavaScript]] provides us with another built-in method, <code>indexOf()</code>, that allows us to quickly and easily check for the presence of an element on an array. <code>indexOf()</code> takes an element as a parameter, and when called, it returns the position, or index, of that element, or <code>-1</code> if the element does not exist on the array.</p> <pre><code>let fruits = ['apples', 'pears', 'oranges', 'peaches', 'pears'];\n\nfruits.indexOf('dates');\nfruits.indexOf('oranges');\nfruits.indexOf('pears');\n</code></pre> <p><code>indexOf('dates')</code> returns <code>-1</code>, <code>indexOf('oranges')</code> returns <code>2</code>, and <code>indexOf('pears')</code> returns <code>1</code> (the first index at which each element exists).</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#iterate","title":"Iterate","text":"<p>JavaScript offers several built in methods that each iterate over arrays in slightly different ways to achieve different results (such as <code>every()</code>, <code>forEach()</code>, <code>map()</code>, etc.)</p> <p>Array functions, which are methods on the array object prototype.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#foreach","title":".forEach","text":"<p><code>Array.prototype.forEach()</code></p> <pre><code>const array1 = ['a', 'b', 'c'];\n\narray1.forEach(element =&gt; console.log(element));\n\n// expected output: \"a\"\n// expected output: \"b\"\n// expected output: \"c\"\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#map","title":".map()","text":"<p><code>Array.prototype.map()</code>, or more simply <code>map</code>. The <code>map</code> method iterates over each item in an array and returns a new array containing the results of calling the callback function on each element. It does this without mutating the original array.</p> <pre><code>const users = [\n  { name: 'John', age: 34 },\n  { name: 'Amy', age: 20 },\n  { name: 'camperCat', age: 10 }\n];\n\nconst names = users.map(user =&gt; user.name);\nconsole.log(names);\n</code></pre> <p>The console would display the value <code>[ 'John', 'Amy', 'camperCat' ]</code>.</p> <p>## Implement</p> <pre><code>Array.prototype.myMap = function(callback) {\n    const newArray = [];\n    this.forEach(x =&gt; newArray.push(callback(x)));\n    return newArray;\n};\n\nconst new_s = s.myMap(function(item) {\n    return item * 2;\n});\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#filter","title":".filter()","text":"<p><code>Array.prototype.filter()</code>, or simply <code>filter()</code>. only the elements for which that function returns <code>true</code>. In other words, it filters the array, based on the function passed to it. Like <code>map</code>, it does this without needing to modify the original array. </p> <p>The callback function accepts three arguments. The first argument is the current element being processed. The second is the index of that element and the third is the array upon which the <code>filter</code> method was called.</p> <pre><code>const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];\n\nconst result = words.filter(word =&gt; word.length &gt; 6);\n\nconsole.log(result);\n// expected output: Array [\"exuberant\", \"destruction\", \"present\"]\n</code></pre> <pre><code>const filteredList = watchList.filter(x =&gt; x.imdbRating &gt; 8).map(x =&gt; {\n    return {title: x.Title, rating: x.imdbRating};\n});\n\n// with destructuring assignement\nconst filteredList = watchList.filter(x =&gt; x.imdbRating &gt; 8).map(({Title: title, imdbRating: rating}) =&gt; ({title, rating}));\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#implement","title":"Implement","text":"<pre><code>Array.prototype.myFilter = function(callback) {\n    const newArray = [];\n    this.forEach(x =&gt; callback(x) ? newArray.push(x) : false);\n    return newArray;\n};\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#reduce","title":".reduce()","text":"<pre><code>const array1 = [1, 2, 3, 4];\nconst reducer = (previousValue, currentValue) =&gt; previousValue + currentValue;\n\n// 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer));\n// expected output: 10\n\n// 5 + 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer, 5));\n// expected output: 15\n</code></pre> <p># .reverse()</p> <pre><code>const array1 = ['one', 'two', 'three'];\nconsole.log('array1:', array1);\n// expected output: \"array1:\" Array [\"one\", \"two\", \"three\"]\n\nconst reversed = array1.reverse();\nconsole.log('reversed:', reversed);\n// expected output: \"reversed:\" Array [\"three\", \"two\", \"one\"]\n\n// Careful: reverse is destructive -- it changes the original array.\nconsole.log('array1:', array1);\n// expected output: \"array1:\" Array [\"three\", \"two\", \"one\"]\n\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#join","title":".join()","text":"<pre><code>const elements = ['Fire', 'Air', 'Water'];\n\nconsole.log(elements.join());\n// expected output: \"Fire,Air,Water\"\n\nconsole.log(elements.join(''));\n// expected output: \"FireAirWater\"\n\nconsole.log(elements.join('-'));\n// expected output: \"Fire-Air-Water\"\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#indexof","title":".indexOf()","text":"<pre><code>const beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];\n\nconsole.log(beasts.indexOf('bison'));\n// expected output: 1\n\n// start from index 2\nconsole.log(beasts.indexOf('bison', 2));\n// expected output: 4\n\nconsole.log(beasts.indexOf('giraffe'));\n// expected output: -1\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/6.%20Array/#find","title":".find()","text":"<pre><code>const array1 = [5, 12, 8, 130, 44];\n\nconst found = array1.find(element =&gt; element &gt; 10);\n\nconsole.log(found);\n// expected output: 12\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/7.%20Function/","title":"Function","text":"<p>We can write reusable [[1. JavaScript|JavaScript]] with functions. In [[1. JavaScript|JavaScript]], we can divide up our code into reusable parts called functions.Here's an example of a function:</p> <pre><code>function functionName() {\n    console.log(\"hello world\")\n}\n</code></pre> <p>We can call invoke this function by using its name followed by parentheses, like this: <code>functionName();</code>. Each time the function is called it will print out the message <code>hello world</code> on the dev console. All of the code between the curly braces will be executed every time the function is called.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/7.%20Function/#passing-values-to-functions-with-arguments","title":"Passing Values to Functions with Arguments","text":"<p>Parameters are variables that act as placeholders for the values that are to be input to a function when it is called. When a function is defined, it is typically defined along with one or more parameters. The actual values that are input (or \"passed\") into a function when it is called are known as arguments.</p> <p>Here is a function with two parameters, <code>param1</code> and <code>param2</code>:</p> <pre><code>function myFunction(parame1, param2) {\n    consle.log(param1, param2);\n}\n</code></pre> <p>Then we can call <code>myFunction</code> like this: <code>myFunction(\"Hello\", \"World\");</code>. We have passed two [[5. String|string]] arguments, <code>Hello</code> and <code>World</code>. Inside the function, <code>param1</code> will equal the [[5. String|string]] <code>Hello</code> and <code>param2</code> will equal the [[5. String|string]] <code>World</code>. Note that you could call <code>myFunction</code> again with different arguments and the parameters would take on the value of the new arguments.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/7.%20Function/#return-values-from-a-function-with-return","title":"Return Values from a Function with Return","text":"<p>We can use a <code>return</code> statement to send a value back out of a function. Like this:</p> <pre><code>function plusThree(num) {\n    return num + 3;\n}\nconst answer = plusThree(5);\n</code></pre> <p><code>answer</code> will have the value <code>8</code>. <code>plusThree</code> takes an argument for <code>num</code> and returns a value equal to <code>num + 3</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/7.%20Function/#returning-boolean-values-from-functions","title":"Returning Boolean Values from Functions","text":"<p>All comparison operators return a boolean <code>true</code> or <code>false</code> value.</p> <pre><code>function isEqual(a, b) {\n  return a === b;\n}\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/7.%20Function/#scope","title":"Scope","text":"<p>In [[1. JavaScript|JavaScript]], scope refers to the visibility of variables. </p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/7.%20Function/#global-scope-and-functions","title":"Global Scope and Functions","text":"<p>Variables which are defined outside of a function block have Global scope. This means, they can be seen everywhere in your [[1. JavaScript|JavaScript]] code.</p> <p>Variables which are declared without the <code>let</code> or <code>const</code> keywords are automatically created in the <code>global</code> scope. This can create unintended consequences elsewhere in your code or when running a function again. You should always declare your variables with <code>let</code> or <code>const</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/7.%20Function/#global-scope-and-functions_1","title":"Global Scope and Functions","text":"<p>Variables which are declared within a function, as well as the function parameters, have local scope. That means they are only visible within that function.</p> <p>Here is a function <code>myTest</code> with a local variable called <code>loc</code>.</p> <pre><code>function myTest() {\n  const loc = \"foo\";\n  console.log(loc);\n}\n\nmyTest();\nconsole.log(loc);\n</code></pre> <p>The <code>myTest()</code> function call will display the [[5. String|string]] <code>foo</code> in the console. The <code>console.log(loc)</code> line will throw an error, as <code>loc</code> is not defined outside of the function.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/7.%20Function/#global-vs-local-scope-in-functions","title":"Global vs. Local Scope in Functions","text":"<p>It is possible to have both local and global variables with the same name. When you do this, the local variable takes precedence over the global variable.</p> <p>In this example:</p> <pre><code>const someVar = \"Hat\";\n\nfunction myFun() {\n  const someVar = \"Head\";\n  return someVar;\n}\n</code></pre> <p>The function <code>myFun</code> will return the [[5. String|string]] <code>Head</code> because the local version of the variable is present.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/7.%20Function/#undefined-value-returned-from-a-function","title":"Undefined Value returned from a Function","text":"<p>A function can include the <code>return</code> statement but it does not have to. In the case that the function doesn't have a <code>return</code> statement, when you call it, the function processes the inner code but the returned value is <code>undefined</code>. Like this:</p> <pre><code>let sum = 0;\n\nfunction addSum(num) {\n    sum+=num;\n}\n\naddSum(3);\n</code></pre> <p><code>addSum</code> is a function without a <code>return</code> statement. The function will change the global <code>sum</code> variable but the returned value of the function is <code>undefined</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/7.%20Function/#return-early-pattern-for-functions","title":"Return Early Pattern for Functions","text":"<p>When a <code>return</code> statement is reached, the execution of the current function stops and control returns to the calling location.</p> <pre><code>function myFun() {\n  console.log(\"Hello\");\n  return \"World\";\n  console.log(\"byebye\")\n}\nmyFun();\n</code></pre> <p>The above will display the string <code>Hello</code> in the console, and return the string <code>World</code>. The string <code>byebye</code> will never display in the console, because the function exits at the <code>return</code>statement.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/","title":"Boolean","text":"<p>Booleans may only be one of two values: <code>true</code> or <code>false</code>. They are basically little on-off switches, where <code>true</code> is on and <code>false</code> is off. These two states are [[mutually]] exclusive. It look like:</p> <pre><code>function isValid(){\n    return false;\n}\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/#1-javascriptjavascript-operator","title":"[[1. JavaScript|JavaScript]] Operator","text":"<p>There are many comparison operators in [[1. JavaScript|JavaScript]]. All of these operators return a boolean <code>true</code> or <code>false</code> value.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/#use-conditional-logic-with-if-statements","title":"Use Conditional Logic with If Statements","text":"<p><code>if</code> statements are used to make decisions in code. The keyword <code>if</code> tells [[1. JavaScript|JavaScript]] to execute the code in the curly braces under certain conditions, defined in the parentheses. These conditions are known as <code>Boolean</code> conditions and they may only be <code>true</code> or <code>false</code>.</p> <p>When the condition evaluates to <code>true</code>, the program executes the statement inside the curly braces. When the Boolean condition evaluates to <code>false</code>, the statement inside the curly braces will not execute.</p> <p>Example:</p> <pre><code>function test (myCondition) {\n  if (myCondition) {\n    return \"It was true\";\n  }\n  return \"It was false\";\n}\n\ntest(true);\ntest(false);\n</code></pre> <p><code>test(true)</code> returns the [[5. String|string]] <code>It was true</code>, and <code>test(false)</code> returns the [[5. String|string]] <code>It was false</code>.</p> <p>When <code>test</code> is called with a value of <code>true</code>, the <code>if</code> statement evaluates <code>myCondition</code> to see if it is <code>true</code> or not. Since it is <code>true</code>, the function returns <code>It was true</code>. When we call <code>test</code> with a value of <code>false</code>, <code>myCondition</code> is not <code>true</code> and the statement in the curly braces is not executed and the function returns <code>It was false</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/#else-statements","title":"Else Statements","text":"<p>When a condition for an <code>if</code> statement is true, the block of code following it is executed. What about when that condition is false? Normally nothing would happen. With an <code>else</code>statement, an alternate block of code can be executed.</p> <pre><code>if (num &gt; 10) {\n  return \"Bigger than 10\";\n} else {\n  return \"10 or Less\";\n}\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/#else-if-statements","title":"Else If Statements","text":"<p>If you have multiple conditions that need to be addressed, you can chain <code>if</code> statements together with <code>else if</code> statements.</p> <pre><code>if (num &gt; 15) {\n  return \"Bigger than 15\";\n} else if (num &lt; 5) {\n  return \"Smaller than 5\";\n} else {\n  return \"Between 5 and 15\";\n}\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/#comparison-with-the-equality-operator","title":"Comparison with the Equality Operator","text":"<p>The most basic operator is the equality operator <code>==</code>. The equality operator compares two values and returns <code>true</code> if they're equivalent or <code>false</code> if they are not. Note that equality is different from assignment (<code>=</code>), which assigns the value on the right of the operator to a variable on the left.</p> <pre><code>function equalityTest(myVal) {\n  if (myVal == 10) {\n    return \"Equal\";\n  }\n  return \"Not Equal\";\n}\n</code></pre> <p>If <code>myVal</code> is equal to <code>10</code>, the equality operator returns <code>true</code>, so the code in the curly braces will execute, and the function will return <code>Equal</code>. Otherwise, the function will return <code>Not Equal</code>. In order for [[1. JavaScript|JavaScript]] to compare two different data types (for example, <code>numbers</code> and <code>strings</code>), it must convert one type to another. This is known as Type Coercion. Once it does, however, it can compare terms as follows:</p> <pre><code>1   ==  1\n1   ==  2\n1   == '1'\n\"3\" ==  3\n</code></pre> <p>In order, these expressions would evaluate to <code>true</code>, <code>false</code>, <code>true</code>, and <code>true</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/#comparison-with-the-strict-equality-operator","title":"Comparison with the Strict Equality Operator","text":"<p>Strict equality (<code>===</code>) is the [[counterpart]] to the equality operator (<code>==</code>). However, unlike the equality operator, which attempts to convert both values being compared to a common type, the strict equality operator does not perform a type conversion.</p> <p>If the values being compared have different types, they are considered unequal, and the strict equality operator will return false.</p> <pre><code>3 ===  3\n3 === '3'\n</code></pre> <p>These conditions would return <code>true</code> and <code>false</code> respectively. In the second example, <code>3</code> is a <code>Number</code> type and <code>'3'</code> is a <code>String</code> type.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/#comparison-with-the-inequality-operator","title":"Comparison with the Inequality Operator","text":"<p>The inequality operator (<code>!=</code>) is the opposite of the equality operator. It means not equal and returns <code>false</code> where equality would return <code>true</code> and vice versa. Like the equality operator, the inequality operator will convert data types of values while comparing.</p> <pre><code>1 !=  2\n1 != \"1\"\n1 != '1'\n1 != true\n0 != false\n</code></pre> <p>In order, these expressions would evaluate to <code>true</code>, <code>false</code>, <code>false</code>, <code>false</code>, and <code>false</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/#comparison-with-the-strict-inequality-operator","title":"Comparison with the Strict Inequality Operator","text":"<p>The strict inequality operator (<code>!==</code>) is the logical opposite of the strict equality operator. It means \"Strictly Not Equal\" and returns <code>false</code> where strict equality would return <code>true</code> and vice versa. The strict inequality operator will not convert data types.</p> <pre><code>3 !==  3\n3 !== '3'\n4 !==  3\n</code></pre> <p>In order, these expressions would evaluate to <code>false</code>, <code>true</code>, and <code>true</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/#comparison-with-the-greater-than-operator","title":"Comparison with the Greater Than Operator","text":"<p>The greater than operator (<code>&gt;</code>) compares the values of two numbers. If the number to the left is greater than the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>.</p> <p>Like the equality operator, the greater than operator will convert data types of values while comparing.</p> <pre><code>5   &gt;  3\n7   &gt; '3'\n2   &gt;  3\n'1' &gt;  9\n</code></pre> <p>In order, these expressions would evaluate to <code>true</code>, <code>true</code>, <code>false</code>, and <code>false</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/#comparison-with-the-greater-than-or-equal-to-operator","title":"Comparison with the Greater Than Or Equal To Operator","text":"<p>The greater than or equal to operator (<code>&gt;=</code>) compares the values of two numbers. If the number to the left is greater than or equal to the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>.</p> <p>Like the equality operator, the greater than or equal to operator will convert data types while comparing.</p> <pre><code>6   &gt;=  6\n7   &gt;= '3'\n2   &gt;=  3\n'7' &gt;=  9\n</code></pre> <p>In order, these expressions would evaluate to <code>true</code>, <code>true</code>, <code>false</code>, and <code>false</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/#comparison-with-the-less-than-operator","title":"Comparison with the Less Than Operator","text":"<p>The less than operator (<code>&lt;</code>) compares the values of two numbers. If the number to the left is less than the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>. Like the equality operator, the less than operator converts data types while comparing.</p> <pre><code>2   &lt; 5\n'3' &lt; 7\n5   &lt; 5\n3   &lt; 2\n'8' &lt; 4\n</code></pre> <p>In order, these expressions would evaluate to <code>true</code>, <code>true</code>, <code>false</code>, <code>false</code>, and <code>false</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/#comparison-with-the-less-than-operator_1","title":"Comparison with the Less Than Operator","text":"<p>The less than operator (<code>&lt;</code>) compares the values of two numbers. If the number to the left is less than the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>. Like the equality operator, the less than operator converts data types while comparing.</p> <pre><code>2   &lt; 5\n'3' &lt; 7\n5   &lt; 5\n3   &lt; 2\n'8' &lt; 4\n</code></pre> <p>In order, these expressions would evaluate to <code>true</code>, <code>true</code>, <code>false</code>, <code>false</code>, and <code>false</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/#comparison-with-the-less-than-or-equal-to-operator","title":"Comparison with the Less Than Or Equal To Operator","text":"<p>The less than or equal to operator (<code>&lt;=</code>) compares the values of two numbers. If the number to the left is less than or equal to the number to the right, it returns <code>true</code>. If the number on the left is greater than the number on the right, it returns <code>false</code>. Like the equality operator, the less than or equal to operator converts data types.</p> <pre><code>4   &lt;= 5\n'7' &lt;= 7\n5   &lt;= 5\n3   &lt;= 2\n'8' &lt;= 4\n</code></pre> <p>In order, these expressions would evaluate to <code>true</code>, <code>true</code>, <code>true</code>, <code>false</code>, and <code>false</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/#comparisons-with-the-logical-and-operator","title":"Comparisons with the Logical And Operator","text":"<p>Sometimes you will need to test more than one thing at a time. The logical and operator (<code>&amp;&amp;</code>) returns <code>true</code> if and only if the operands to the left and right of it are true.</p> <pre><code>if (num &gt; 5 &amp;&amp; num &lt; 10) {\n  return \"Yes\";\n}\nreturn \"No\";\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/#comparisons-with-the-logical-or-operator","title":"Comparisons with the Logical Or Operator","text":"<p>The logical or operator (<code>||</code>) returns <code>true</code> if either of the operands is <code>true</code>. Otherwise, it returns <code>false</code>.</p> <p>The logical or operator is composed of two pipe symbols: (<code>||</code>). This can typically be found between your Backspace and Enter keys.</p> <pre><code>if (num &gt; 10 || num &lt; 5) {\n  return \"No\";\n}\nreturn \"Yes\";\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/#switch-statements","title":"Switch Statements","text":"<p>If we have many options to choose from, use a switch statement. A <code>switch</code> statement tests a value and can have many case statements which define various possible values. Statements are executed from the first matched <code>case</code> value until a <code>break</code> is encountered.</p> <pre><code>switch(lowercaseLetter) {\n  case \"a\":\n    console.log(\"A\");\n    break;\n  case \"b\":\n    console.log(\"B\");\n    break;\n}\n</code></pre> <p><code>case</code> values are tested with strict equality (<code>===</code>). The <code>break</code> tells JavaScript to stop executing statements. If the <code>break</code> is omitted, the next statement will be executed.</p> <p>In a <code>switch</code> statement you may not be able to specify all possible values as <code>case</code> statements. Instead, we can add the <code>default</code> statement which will be executed if no matching <code>case</code> statements are found. Think of it like the final <code>else</code> statement in an <code>if/else</code> chain.</p> <p>A <code>defalut</code> statement should be the last case.</p> <pre><code>switch (num) {\n  case value1:\n    statement1;\n    break;\n  case value2:\n    statement2;\n    break;\n...\n  default:\n    defaultStatement;\n    break;\n}\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/#multiple-identical-options-in-switch-statements","title":"Multiple Identical Options in Switch Statements","text":"<p>If the <code>break</code> statement is omitted from a <code>switch</code> statement's <code>case</code>, the following <code>case</code>statement(s) are executed until a <code>break</code> is encountered. If you have multiple inputs with the same output, you can represent them in a <code>switch</code> statement like this:</p> <pre><code>let result = \"\";\nswitch(val) {\n  case 1:\n  case 2:\n  case 3:\n    result = \"1, 2, or 3\";\n    break;\n  case 4:\n    result = \"4 alone\";\n}\n</code></pre> <p>Cases for 1, 2, and 3 will all produce the same result.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/#conditional-ternary-operator","title":"Conditional (Ternary) Operator","text":"<p>The conditional operator, also called the ternary operator, can be used as a one line if-else expression.</p> <p>The syntax is <code>a ? b : c</code> , where a is the condition, <code>b</code> is the code to run when the condition returns <code>true</code>, and <code>c</code> is the code to run when the condition reruns <code>false</code>.</p> <p>The following function uses an <code>if/else</code> statement to check a condition:</p> <pre><code>function findGreater(a, b) {\n  if(a &gt; b) {\n    return \"a is greater\";\n  }\n  else {\n    return \"b is greater or equal\";\n  }\n}\n</code></pre> <p>This can be re-written using the conditional operator:</p> <pre><code>function findGreater(a, b) {\n    return a &gt; b ? \"a is greater\" : \"b is greater or equal\";\n}\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/8.%20Boolean/#multiple-conditional-ternary-operator","title":"Multiple Conditional (Ternary) Operator","text":"<p>In the previous challenge, you used a single conditional operator. You can also chain them together to check for multiple conditions.</p> <p>The following function uses <code>if</code>, <code>else if</code>, and <code>else</code> statements to check multiple conditions:</p> <pre><code>function findGreaterOrEqual(a, b) {\n  if (a === b) {\n    return \"a and b are equal\";\n  }\n  else if (a &gt; b) {\n    return \"a is greater\";\n  }\n  else {\n    return \"b is greater\";\n  }\n}\n</code></pre> <p>The above function can be re-written using multiple conditional operators:</p> <pre><code>function findGreaterOrEqual(a, b){\n    return a === b ? \"a and b are eqaul\" \n    : a &gt; b ? \"a is greater\"\n    : \"b is greater\"\n}\n</code></pre> <p>It is considered best practice to format multiple conditional operators such that each condition is on a separate line, as shown above. Using multiple conditional operators without proper indentation may make your code hard to read. For example:</p> <pre><code>function findGreaterOrEqual(a, b) {\n  return (a === b) ? \"a and b are equal\" : (a &gt; b) ? \"a is greater\" : \"b is greater\";\n}\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/9.%20Object/","title":"Object","text":"<p>Object are similar to [[6. Array|arrays]], except that instead of using indexes to access and modify theri data, we access the data in objects through what are called <code>properties</code>.</p> <p>Objects are useful for storing data in a structured way, and can represent real world objects, like a cat.</p> <pre><code>const cat = {\n    \"name\": \"Whiskers\",\n    \"legs\": 4,\n    \"tails\": 1,\n    \"enimies\": [\"Water\", \"Dogs\"]\n};\n</code></pre> <p>In this example, all the properties are stored as strings, such as <code>name</code>, <code>legs</code>, and <code>tails</code>. </p> <p>However, we can also use numbers as properties. We can even omit the quotes for single-word [[5. String|string]] properties, as follows:</p> <pre><code>const obj = {\n    make: \"Ford\",\n    5: \"five\",\n    \"model\": \"focus\"\n};\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/9.%20Object/#accessing-object-properties","title":"Accessing Object Properties","text":""},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/9.%20Object/#dot-notation","title":"Dot Notation","text":"<p>There are two way to access the properties of an object: dot notation (<code>.</code>) and bracket notation (<code>[]</code>), similar to an array.</p> <p>Dot notation is what we used when we know the name of the property we're try to access ahead of time.</p> <pre><code>const obj = {\n    prop1: \"val1\",\n    prop2: \"val2\"\n};\n\nconst prop1Val = obj.prop1;\nconst prop2Val = obj.prop2;\n</code></pre> <p><code>pop1val</code> would have a value of the [[5. String|string]] <code>val1</code>, and <code>prop2val</code> would have a value of the [[5. String|string]] <code>val2</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/9.%20Object/#bracket-notation","title":"Bracket Notation","text":"<p>The second way to access the properties of an object is bracket notation (<code>[]</code>). If the property of the object we are trying to access has a space in its name, we will need to use bracket notation.</p> <pre><code>const obj = {\n    \"space name\": \"kirk\",\n    \"More Space\": \"Spock\",\n    \"NoSapce\": \"USS\"\n};\n\nobj[\"space name\"];\nobj[\"More space\"];\nobk[\"NoSpace\"];\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/9.%20Object/#variables","title":"Variables","text":"<p>Another use of bracket notation on objects is to access a property which is stored as the value of a variable. This can be very useful for iterating through on object's properties or when accessing a look up table.</p> <pre><code>const dogs = {\n    Fido: \"Mutt\",\n    Hunter: \"Doberman\",\n    Snoopie: \"Beagle\"\n};\n\nconst myDog = \"Hunter\";\nconst myBreed = dogs[myDog];\nconsole.log(myBreed);\n</code></pre> <p>The [[5. String|string]] <code>Doberman</code> would be displayed in the console.</p> <p>Another way you can use this concept is when the property's name is collected dynamically during the program execution, as follows:</p> <pre><code>const obj = {\n    propName: \"john\";\n};\n\nfunction propPerfix(str) {\n    const s = \"prop\";\n    return s + str;\n}\n\nconst someProp = propPerfix(\"Name\");\nconsole.log(someObj[someProp]);\n</code></pre> <p><code>someProp</code> would have a value of the [[5. String|string]] <code>propName</code>, and the [[5. String|string]] <code>john</code> would be displayed in the [[1. console|console]].</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/9.%20Object/#updating-object-properties","title":"Updating Object Properties","text":"<p>We can update its properties at any time just like you would update any other variable. We can use either dot or bracket notation to update.</p> <pre><code>const ourDog = {\n    \"name\": \"Camper\",\n    \"leg\": 4,\n    \"tails\": 1,\n    \"friends\": [\"everything!\"];\n};\n</code></pre> <p>We can update the object's name property: <code>ourDog.name = \"Happy Camper\";</code>or <code>ourDog[\"name\"] = \"Happy Camper\";</code> Now when we evaluate <code>ourDog.name</code>, instead of getting <code>Camper</code>, we'll get his new name, <code>Happy Camper</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/9.%20Object/#add-new-properties","title":"Add New Properties","text":"<p>We can add new Properties to existing [[1. JavaScript|JavaScript]] objects the same way we would modify them. Here's how we would add a <code>bark</code> property to <code>ourDog</code>:</p> <pre><code>ourDog.bark = \"bow-wow\";\n</code></pre> <p>or</p> <pre><code>ourDog[bark] = \"bow-wow\";\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/9.%20Object/#delete-properties","title":"Delete Properties","text":"<p>We can also delete properties from objects like this:</p> <pre><code>delete ourDog.bark;\n</code></pre> <p>Example: </p> <pre><code>const ourDog = {\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"],\n  \"bark\": \"bow-wow\"\n};\n\ndelete ourDog.bark;\n</code></pre> <p>After the last line shown above, <code>ourDog</code> looks like:</p> <pre><code>{\n  \"name\": \"Camper\",\n  \"legs\": 4,\n  \"tails\": 1,\n  \"friends\": [\"everything!\"]\n}\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/9.%20Object/#using-objects-for-lookups","title":"Using Objects for lookups","text":"<p>Objects can be thought of as a key/value storage, like a dictionary. If we have tabular data, we can use an object to lookup values rather than a <code>switch</code> statement or an <code>if/else</code> chain. This is most useful when we know that our input data is limited to a certain range.</p> <pre><code>const alpha = {\n  1:\"Z\",\n  2:\"Y\",\n  3:\"X\",\n  4:\"W\",\n  ...\n  24:\"C\",\n  25:\"B\",\n  26:\"A\"\n};\n\nalpha[2];\nalpha[24];\n\nconst value = 2;\nalpha[value];\n</code></pre> <p><code>alpha[2]</code> is the [[5. String|string]] <code>Y</code>, <code>alpha[24]</code> is the [[5. String|string]] <code>C</code>, and <code>alpha[value]</code> is the [[5. String|string]] <code>Y</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/9.%20Object/#testing-objects-for-properties","title":"Testing Objects for Properties","text":"<p>Sometimes it is useful to check if the property of a given object exists or not. We can use the <code>.hasOwnProperty(propname)</code> method of objects to determine if that object has the given property name. <code>.hasOwnProperty()</code> return <code>ture</code> or <code>false</code> is the property is found or not.</p> <pre><code>const obj = {\n    top: \"hat\",\n    bottom: \"pants\"\n};\n\nobj.hasOwnProperty(\"top\");\nobj.hasOwnProperty(\"midle\");\n</code></pre> <p>The first <code>hasOwnProperty</code> return <code>true</code>, while the second returns <code>false</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/9.%20Object/#manipulating-complex-objects","title":"Manipulating Complex Objects","text":"<p>Sometimes we may want to store data in a flexible Data Structure. A [[1. JavaScript|JavaScript]] object is one way to handle flexible data. They allow for arbitrary combinations of strings, numbers, booleans, array, [[7. Function|functions]], and objects.</p> <p>Here's an example of a complex data structure:</p> <pre><code>const ourMusic = [\n  {\n    \"artist\": \"Daft Punk\",\n    \"title\": \"Homework\",\n    \"release_year\": 1997,\n    \"formats\": [ \n      \"CD\", \n      \"Cassette\", \n      \"LP\"\n    ],\n    \"gold\": true\n  }\n];\n</code></pre> <p>This is an array which contains one object inside. The object has various pieces of metadata about an album. It also has a nested <code>formats</code> array. If we want to add more album records, we can do this by adding records to the top level array. Objects hold data in a property, which has a key-value format. In the example above, <code>\"artist\": \"Daft Punk\"</code> is a property that has a key of <code>artist</code> and a value of <code>Daft Punk</code>. [[1. JavaScript|JavaScript]] Object Notation or <code>JSON</code> is a related data interchange format used to store data.</p> <pre><code>{\n  \"artist\": \"Daft Punk\",\n  \"title\": \"Homework\",\n  \"release_year\": 1997,\n  \"formats\": [ \n    \"CD\",\n    \"Cassette\",\n    \"LP\"\n  ],\n  \"gold\": true\n}\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/9.%20Object/#accessing-nested-objects","title":"Accessing Nested Objects","text":"<p>The sub-properties of objects can be accessed by chaining together the dot or bracket notation.</p> <pre><code>const ourStorage = {\n  \"desk\": {\n    \"drawer\": \"stapler\"\n  },\n  \"cabinet\": {\n    \"top drawer\": { \n      \"folder1\": \"a file\",\n      \"folder2\": \"secrets\"\n    },\n    \"bottom drawer\": \"soda\"\n  }\n};\n\nourStroage.cabinet[\"top drawer\"].folder2;\nourStroage.desk.drawer;\n</code></pre> <p><code>ourStorage.cabinet[\"top drawer\"].folder2</code> would be the [[5. String|string]] <code>secrets</code>, and <code>ourStorage.desk.drawer</code> would be the [[5. String|string]] <code>stapler</code>.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/9.%20Object/#accessing-nested-6-arrayarrays","title":"Accessing Nested [[6. Array|Arrays]]","text":"<p>s. Similar to accessing nested objects, array bracket notation can be chained to access nested [[6. Array|arrays]].</p> <pre><code>const ourPets = [\n  {\n    animalType: \"cat\",\n    names: [\n      \"Meowzer\",\n      \"Fluffy\",\n      \"Kit-Cat\"\n    ]\n  },\n  {\n    animalType: \"dog\",\n    names: [\n      \"Spot\",\n      \"Bowser\",\n      \"Frankie\"\n    ]\n  }\n];\n\nourPets[0].name[1];\nourPets[1].name[2];\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/9.%20Object/#iterate-through-the-keys-of-an-object-with-a-forin-statement","title":"Iterate Through the Keys of an Object with a for...in Statement","text":"<p>Sometimes you may need to iterate through all the keys within an object. This requires a specific syntax in [[1. JavaScript|JavaScript]] called a for...in statement. For our <code>users</code> object, this could look like:</p> <pre><code>for (let user in users) {\n  console.log(user);\n}\n</code></pre> <p>This would log <code>Alan</code>, <code>Jeff</code>, <code>Sarah</code>, and <code>Ryan</code> - each value on its own line.</p> <p>In this statement, we defined a variable <code>user</code>, and as you can see, this variable was reset during each iteration to each of the object's keys as the statement looped through the object, resulting in each user's name being printed to the [[1. console|console]].</p> <p>NOTE: Objects do not maintain an ordering to stored keys like [[6. Array|arrays]] do; thus a key's position on an object, or the relative order in which it appears, is irrelevant when referencing or accessing that key.</p> <pre><code>const users = {\n    Alan: {\n    online: false\n    },\n    Jeff: {\n    online: true\n    },\n    Sarah: {\n    online: false\n    }\n}\n\nfunction countOnline(usersObj) {\n    let count = 0;\n    for(let user in usersObj){\n    usersObj[user].online ? count++ : 0;\n    }\n    return count;\n}\n\nconsole.log(countOnline(users));\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/9.%20Object/#generate-an-array-of-all-object-keys-with-objectkeys","title":"Generate an Array of All Object Keys with Object.keys()","text":"<p>We can also generate an array which contains all the keys stored in an object using the <code>Object.keys()</code> method and passing in an object as the argument. This will return an array with strings representing each property in the object. Again, there will be no specific order to the entries in the array.</p> <pre><code>let users = {\n    Alan: {\n    age: 27,\n    online: false\n    },\n\n    Jeff: {\n    age: 32,\n    online: true\n    },\n\n    Sarah: {\n    age: 48,\n    online: false\n    },\n\n    Ryan: {\n    age: 19,\n    online: true\n    }\n\n};\n\nObject.keys(users); //[ 'Alan', 'Jeff', 'Sarah', 'Ryan' ]\n</code></pre>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/9.%20Object/#create-a-method-on-an-object","title":"Create a Method on an Object","text":"<p>Objects can have a special type of property, called a method.</p> <p>Methods are properties that are [[7. Function|functions]]. This adds different behavior to an object. Here is the <code>duck</code> example with a method:</p> <pre><code>let duck = {\n  name: \"Aflac\",\n  numLegs: 2,\n  sayName: function() {return \"The name of this duck is \" + duck.name + \".\";}\n};\nduck.sayName();\n</code></pre> <p>The example adds the <code>sayName</code> method, which is a function that returns a sentence giving the name of the <code>duck</code>. Notice that the method accessed the <code>name</code> property in the return statement using <code>duck.name</code>. The next challenge will cover another way to do this.</p>"},{"location":"Language/JavaScript/1.%20Basic%20JavaScript/9.%20Object/#make-code-more-reusable-with-the-this-keyword","title":"Make Code More Reusable with the this Keyword","text":"<p>The last challenge introduced a method to the <code>duck</code> object. It used <code>duck.name</code> dot notation to access the value for the <code>name</code> property within the return statement:</p> <pre><code>sayName: function() {return \"The name of this duck is \" + duck.name + \".\";}\n</code></pre> <p>While this is a valid way to access the object's property, there is a pitfall here. If the variable name changes, any code referencing the original name would need to be updated as well. In a short object definition, it isn't a problem, but if an object has many references to its properties there is a greater chance for error.</p> <p>A way to avoid these issues is with the <code>this</code> keyword:</p> <pre><code>let duck = {\n  name: \"Aflac\",\n  numLegs: 2,\n  sayName: function() {return \"The name of this duck is \" + this.name + \".\";}\n};\n</code></pre> <p><code>this</code> is a deep topic, and the above example is only one way to use it. In the current context, <code>this</code> refers to the object that the method is associated with: <code>duck</code>. If the object's name is changed to <code>mallard</code>, it is not necessary to find all the references to <code>duck</code> in the code. It makes the code reusable and easier to read.</p>"},{"location":"Language/JavaScript/2.%20ES6/1.%20var%20and%20let/","title":"Compare Scopes of var and let keywords","text":"<p>When we declare a variable with the <code>var</code> keyword, it is declared globally, or locally if declared inside a function.</p> <p>The <code>let</code> keyword behaves similarly, but with some extra features. When we declare a variable with the <code>let</code> keyword inside a block, statement, or expression, its scope is limited to that block, statement, or expression.</p> <p>For example:</p> <pre><code>var arr = [];\nfor(var i = 0; i &lt; 3; i++){\n    arr.push(i);\n}\nconsole.log(arr);\nconsole.log(i);\n</code></pre> <p>Here the console will display the values <code>[0, 1, 2]</code> and <code>3</code>.</p> <p>With the <code>var</code> keyword, <code>i</code> is declared globally. So when <code>i++</code> is executed, it updates the global variable. This code is similar to the following:</p> <pre><code>var numArray = [];\nvar i;\nfor (i = 0; i &lt; 3; i++) {\n  numArray.push(i);\n}\nconsole.log(numArray);\nconsole.log(i);\n</code></pre> <p>Here the console will display the values <code>[0, 1, 2]</code> and <code>3</code>.</p> <p>This behavior will cause problems if we were to create a function and store it for later use inside a <code>for</code> loop that uses the <code>i</code> variable. This is because the stored function will always refer to the value of the updated global <code>i</code> value.</p> <pre><code>var printNumTwo;\nfor (var i = 0; i &lt; 3; i++) {\n  if (i === 2) {\n    printNumTwo = function() {\n      return i;\n    };\n  }\n}\nconsole.log(printNumTwo());\n</code></pre> <p>Here the console will display the value <code>3</code>.</p> <p>As you can see, <code>printNumTwo()</code> prints 3 and not 2. This is because the value assigned to <code>i</code> was updated and the <code>printNumTwo()</code> returns the global <code>i</code> and not the value <code>i</code> had when the function was created in the for loop. The <code>let</code> keyword does not follow this behavior:</p> <pre><code>let printNumTwol\nfor(let i = 0; i &lt; 3; i++){\n    if(i === 2){\n        printNumTwo = function() {\n            return 1;\n        }\n    }\n}\nconsole.log(printNumeTwo());\nconsole.log(i);\n</code></pre> <p>Here the console will display the value <code>2</code>, and an error that <code>i is not defined</code>.</p> <p><code>i</code> is not defined because it was not declared in the global scope. It is only declared within the <code>for</code> loop statement. <code>printNumTwo()</code> returned the correct value because three different <code>i</code> variables with unique values (0, 1, and 2) were created by the <code>let</code> keyword within the loop statement.</p>"},{"location":"Language/JavaScript/2.%20ES6/10.%20Constructor%20Function/","title":"Constructor Function","text":"<p>ES6 provides a new syntax to create objects, using the class keyword.</p> <p>It should be noted that the <code>class</code> syntax is just syntax, and not a full-fledged class-based implementation of an object-oriented paradigm, unlike in languages such as Java, Python, Ruby, etc.</p> <p>In ES5, we usually define a <code>constructor</code> function and use the <code>new</code> keyword to instantiate an object.</p> <pre><code>var SpaceShuttle = function(targetPlanet){\n  this.targetPlanet = targetPlanet;\n}\nvar zeus = new SpaceShuttle('Jupiter');\n</code></pre> <p>The <code>class</code> syntax simply replaces the <code>constructor</code> function creation:</p> <pre><code>class SpaceShuttle {\n  constructor(targetPlanet) {\n    this.targetPlanet = targetPlanet;\n  }\n}\nconst zeus = new SpaceShuttle('Jupiter');\n</code></pre> <p>It should be noted that the <code>class</code> keyword declares a new function, to which a constructor is added. This constructor is invoked when <code>new</code> is called to create a new object.</p> <p>Note: UpperCamelCase should be used by convention for ES6 class names, as in <code>SpaceShuttle</code> used above.</p> <p>The <code>constructor</code> method is a special method for creating and initializing an object created with a class. </p>"},{"location":"Language/JavaScript/2.%20ES6/10.%20Constructor%20Function/#getters-and-setters","title":"Getters and Setters","text":"<p>We can obtain values from an object and set the value of property within an object. </p> <p>Getter [[7. Function|functions]] are meant to simply return (get) the value of an object's private variable to the user without the user directly accessing the private variable.</p> <p>Setter [[7. Function|functions]] are meant to modify (set) the value of an object's private variable based on the value passed into the setter function. This change could involve calculations, or even overwriting the previous value completely.</p> <pre><code>class Book {\n    constructor(author) {\n        this.author = author;\n    }\n    // getter\n    get writer(){\n        return this.author;\n    }\n    // seeter\n    set writer(p_author){\n        this.author = p_author;\n    }\n}\n\nconst novel = new Book('anonymous');\nconsole.log(novel.writer);\nnovel.writer = 'newAuthor';\nconsole.log(novel.writer);\n</code></pre> <p>The [[1. console|console]] would display the strings <code>anonymous</code> and <code>newAuthor</code>.</p> <p>Notice the syntax used to invoke the getter and setter. They do not even look like [[7. Function|functions]]. Getters and setters are important because they hide internal implementation details.</p>"},{"location":"Language/JavaScript/2.%20ES6/11.%20Module%20Script/","title":"Create a Module Script","text":"<p>[[1. JavaScript|JavaScript]] started with a small role to play on otherwise mostly [[Basic HTML|HTML]] web. Today, it's huge, and some websites are build almost entirely with [[1. JavaScript|JavaScript]]. In order to make [[1. JavaScript|JavaScript]] more modular, clean, and maintainable; ES6 introduced a way to easily share code among JavaScript files. This involves exporting parts of a file for use in one or more other files, and importing the parts we need, where need to create a script in our [[Basic HTML|HTML]] document wit a <code>type</code>  of  <code>module</code>.  Here is an example:</p> <pre><code>&lt;script type=\"module\" src=\"filename.js\"&gt;&lt;/script&gt;\n</code></pre> <p>A script that uses this <code>module</code> type can now use the <code>import</code> and <code>export</code> features.</p>"},{"location":"Language/JavaScript/2.%20ES6/11.%20Module%20Script/#use-export-to-share-a-code-block","title":"Use export to Share a Code Block","text":"<p>Imagine a file called <code>math_functions.js</code> that contains several [[7. Function|functions]] related to mathematical operations. One of them is stored in a variable, <code>add</code>, that takes in two numbers and returns their sum. We want to use this function in several different [[1. JavaScript|JavaScript]] files. In order to share it with these other files, we first need to <code>export</code> it.</p> <pre><code>export const add = (x, y) =&gt; {\n    return x + y;\n}\n</code></pre> <p>The above is a common way to export a single function, but we can achieve the same thing like this:</p> <pre><code>const add = (x, y) =&gt; {\n    return x + y;\n}\nexport { add };\n</code></pre> <p>When we export a variable or function, we can import it in another file and use it without havering to rewrite the code. We can export multiple things by repeating the first example for each thing we want to export, or by placing them all in the export statement of the second example, lie this:</p> <pre><code>export { add, subtract };\n</code></pre>"},{"location":"Language/JavaScript/2.%20ES6/11.%20Module%20Script/#reuse-javascript-code-using-import","title":"Reuse JavaScript Code Using import","text":"<p><code>import</code> allows us to choose which parts of a file or module to load. In the pervious lesson, the examples exported <code>add</code> from the <code>math_functions.js</code> file. Here's how we can import it to use in another file:</p> <pre><code>import { add } from './math_functions.js';\n</code></pre> <p>Here, <code>import</code> will find <code>add</code> in <code>math_functions.js</code>, import just that function for us to use, and ignore the rest. The <code>./</code> tells the import to look for the <code>math_functions.js</code> file in the same folder as the current file. The relative file path (<code>./</code>) and file extension (<code>./</code>) are required when using import in this way.</p> <p>We can import more than one item from the file by adding them in the <code>import</code> statement like this:</p> <pre><code>import { add, subtract } from './math_functions.js'\n</code></pre>"},{"location":"Language/JavaScript/2.%20ES6/11.%20Module%20Script/#using-to-import-everything","title":"Using * to Import Everything","text":"<p>Suppose you have a file and you wish to import all of its contents into the current file. This can be done with the <code>import * as</code> syntax. Here's an example where the contents of a file named <code>math_functions.js</code> are imported into a file in the same directory:</p> <pre><code>import * as myMathModule from \"./math_functions.js\";\n</code></pre> <p>The above <code>import</code> statement will create an object called <code>myMathModule</code>. This is just a variable name, you can name it anything. The object will contain all of the exports from <code>math_functions.js</code> in it, so you can access the functions like you would any other object property. Here's how you can use the <code>add</code> and <code>subtract</code> functions that were imported:</p> <pre><code>myMathModule.add(2,3);\nmyMathModule.subtract(5,3);\n</code></pre>"},{"location":"Language/JavaScript/2.%20ES6/11.%20Module%20Script/#create-an-export-fallback-with-export-default","title":"Create an Export Fallback with export default","text":"<p>There is another <code>export</code> syntax we need to know, known as export default. Usually we will use this syntax if only one value is being exported from a file. It is also used to create a fallback value for a file or module.</p> <p>Below are examples using <code>export default</code>:</p> <pre><code>export default function add(x, y) {\n    return x + y;\n}\n\nexport default function(x,y) {\n    return x + y;\n}\n</code></pre>"},{"location":"Language/JavaScript/2.%20ES6/11.%20Module%20Script/#import-a-default-export","title":"Import a Default Export","text":"<p>To Import a default export, we need use a different <code>import</code> syntax, In the following example, <code>add</code> is the default export of the <code>math_functions.js</code> file. Here is how to import it:</p> <pre><code>import add from \"./math_functions.js\"\n</code></pre> <p>The syntax differs in one key place. The imported value, <code>add</code>, is not surrounded by curly braces (<code>{}</code>). <code>add</code> here is simply a variable name for whatever the default export of the <code>math_functions.js</code> file is. You can use any name here when importing a default.</p>"},{"location":"Language/JavaScript/2.%20ES6/12.%20Promise/","title":"Promise","text":"<p>A promise in [[1. JavaScript|JavaScript]] is exactly what it sounds like - we use it to make a promise to do something, usually [[asynchronously]]. When the task completes, we either fulfill our promise or fail to do so. <code>Promise</code> is a constructor function, so we need to use the <code>new</code> keyword to create one. It takes a function, as its argument, with two parameters - <code>resolve</code> and <code>reject</code>. These are methods used to determine the outcome of the promise. The syntax looks like this:</p> <pre><code>const myPromise = new promise((resolve, reject)) =&gt; {\n\n}\n</code></pre>"},{"location":"Language/JavaScript/2.%20ES6/12.%20Promise/#complete-a-promise-with-resolve-and-reject","title":"Complete a Promise with resolve and reject","text":"<p>A promise has three states: <code>pending</code>, <code>fulfilled</code>, and <code>rejected</code>. The promise we created above is forever stuck in the <code>pending</code> state because we did not add a way to complete the promise. The <code>resolve</code> and <code>reject</code> parameters given to the promise argument are used to do this. <code>resolve</code> is used when you want your promise to succeed, and <code>reject</code> is used when you want it to fail. These are methods that take an argument, as seen below.</p> <pre><code>const myPromise = new Promise((resolve, reject) =&gt; {\n  if(condition here) {\n    resolve(\"Promise was fulfilled\");\n  } else {\n    reject(\"Promise was rejected\");\n  }\n});\n</code></pre> <p>The example above uses strings for the argument of these [[7. Function|functions]], but it can really be anything. Often, it might be an object, that you would use data from, to put on your website or elsewhere.</p>"},{"location":"Language/JavaScript/2.%20ES6/12.%20Promise/#handle-a-fulfilled-promise-with-then","title":"Handle a Fulfilled Promise with then","text":"<p>Promises are most useful when we have a process that takes an unknown amount of time in our code (ie. something asynchronous), often a server request. When we make a server request it takes some amount of time, and after it completes we usually want to do something with the response from the server. This can be achieved by using the <code>then</code> method. The <code>then</code> method is executed immediately after we promise is fulfilled with <code>resolve</code>. Here's an example:</p> <pre><code>myPromise.then(result =&gt; {\n\n});\n</code></pre> <p><code>result</code> comes from the argument given to the <code>resolve</code> method.</p> <pre><code>const makeServerRequest = new Promise((resolve, reject) =&gt; {\n    // responseFromServer is set to true to represent a successful response from a server\n    let responseFromServer = true;\n    if(responseFromServer) {\n    resolve(\"We got the data\");\n    } else {\n    reject(\"Data not received\");\n    }\n});\n\nmakeServerRequest.then(result =&gt; {  \n    console.log(result);\n});\n</code></pre>"},{"location":"Language/JavaScript/2.%20ES6/12.%20Promise/#handle-a-rejected-promise-with-catch","title":"Handle a Rejected Promise with catch","text":"<p><code>catch</code> is the method used when our promise has been rejected. It is executed immediately after a promise's <code>reject</code> method is called. Here's the syntax.</p> <pre><code>myPromise.catch(error =&gt; {\n\n});\n</code></pre> <p><code>error</code> is the argument passed in to the <code>reject</code> method.</p> <pre><code>const makeServerRequest = new Promise((resolve, reject) =&gt; {\n    // responseFromServer is set to true to represent a successful response from a server\n    let responseFromServer = true;\n    if(responseFromServer) {\n    resolve(\"We got the data\");\n    } else {\n    reject(\"Data not received\");\n    }\n});\n\nmakeServerRequest.then(result =&gt; {  \n    console.log(result);\n});\n\nmakeServerRequest.catch(error =&gt; {  \n    console.log(error);\n});\n</code></pre>"},{"location":"Language/JavaScript/2.%20ES6/2.%20Mutate%20an%20Array%20Declared%20with%20const/","title":"[[Mutate]] an Array Declared with const","text":"<p>The <code>const</code> declaration has many use cases in modern [[1. JavaScript|JavaScript]]. </p> <p>Some developers prefer to assign all their variables using <code>const</code> by default, unless they know they will need to reassign the value. Only in that case, they use <code>let</code>.</p> <p>However, it is important to understand that objects (including [[6. Array|arrays]] and [[7. Function|functions]]) assigned to variable using <code>const</code> are still [[Mutate#Mutable|mutable]]. Using the <code>const</code> declaration only prevents reassignment of the variable idntifier.</p> <pre><code>const s = [5, 6, 7];\ns = [1, 2, 3];\ns[2] = 45;\nconsole.log(s);\n</code></pre> <p><code>s = [1, 2, 3]</code> will result in an error. The <code>console.log</code> will display the value <code>[5, 6, 45]</code>.</p> <p>As you can see, you can [[mutate]] the object <code>[5, 6, 7]</code> itself and the variable <code>s</code> will still point to the [[altered]] array <code>[5, 6, 45]</code>. Like all [[6. Array|arrays]], the array elements in <code>s</code> are mutable, but because <code>const</code> was used, you cannot use the variable identifier <code>s</code> to point to a different array using the assignment operator.</p>"},{"location":"Language/JavaScript/2.%20ES6/3.%20Prevent%20Objet%20Mutation/","title":"[[Prevent]] Objet Mutation","text":"<p><code>const</code> declaration alone doesn't really protect our data from mutation. To ensure our data  doesn't change, [[1. JavaScript|JavaScript]] provides a function <code>Object.freeze</code> to [[prevent]] data mutation.</p> <p>Any attempt at changing the object will be rejected, with an error thrown if the script is running in strict mode.</p> <pre><code>let obj = {\n    name: \"hello\"\n    review: \"world\"\n};\n\nObject.freeze(obj);\nobj.review = \"bad\";\nobj.newProp = \"Test\";\nconsole.log(obj); \n</code></pre> <p>The <code>obj.review</code> and <code>obj.newProp</code> assignments will result in errors, because our editor runs in strict mode by default, and the console will display the value <code>{ name: \"hello\", review: \"world\" }</code>.</p>"},{"location":"Language/JavaScript/2.%20ES6/4.%20Arrow%20Functions/","title":"Use Arrow [[7. Function|Functions]] to Write [[Concise]] Anonymous [[7. Function|Functions]]","text":"<p>In [[1. JavaScript|JavaScript]], we often don't need to name our [[7. Function|functions]], especially when passing a function as an argument to another function. Instead, we create inline [[7. Function|functions]]. We don't need to name these [[7. Function|functions]] because we do not reuse them anywhere else.</p> <p>To achieve this, we often use the following syntax:</p> <pre><code>const myFunc = function () {\n    const myVar = \"value\";\n    return myVar;\n}\n</code></pre> <p>ES6 provides us with the syntactic sugar to not have to write anonymous [[7. Function|functions]] this way. Instead, you can use arrow function syntax:</p> <pre><code>const myFunc = () =&gt; {\n    const myVar = \"value\";\n    return myVar;\n}\n</code></pre> <p>When there is no function body, and only a return value, arrow function syntax allows you to omit the keyword <code>return</code> as well as the brackets surrounding the code. This helps simplify smaller [[7. Function|functions]] into one-line statements:</p> <pre><code>const myFunc = () =&gt; \"value\";\n</code></pre> <p>This code will still return the [[5. String|string]] <code>value</code> by default.</p>"},{"location":"Language/JavaScript/2.%20ES6/4.%20Arrow%20Functions/#write-arrow-7-functionfunctions-with-parameters","title":"Write Arrow [[7. Function|Functions]] with Parameters","text":"<p>Just like a regular function, you can pass arguments into an arrow function.</p> <pre><code>const doubler = (item) =&gt; item * 2;\ndoubler(4);\n</code></pre> <p><code>doubler(4)</code> would return the value <code>8</code>.</p> <p>If an arrow function has a single parameter, the [[parentheses]] enclosing the parameter may be omitted.</p> <pre><code>const doubler = item =&gt; item * 2;\n</code></pre> <p>It is possible to pass more than one argument into an arrow function.</p> <pre><code>const multiplier = (item, multi) =&gt; item * multil\nmultiplier(4, 2);\n</code></pre> <p><code>multiplier(4, 2)</code> would return the value <code>8</code>.</p>"},{"location":"Language/JavaScript/2.%20ES6/4.%20Arrow%20Functions/#set-default-parameter-for-7-functionfunctions","title":"Set Default Parameter for [[7. Function|Functions]]","text":"<p>In order to help us create more flexible [[7. Function|functions]], ES6 introduces default parameters for [[7. Function|functions]].</p> <p>Check out this code:</p> <pre><code>const greeting = (name = \"Anoymous\") =&gt; \"Hello \" + name;\n\nconsole.log(greeting(\"john\"));\nconsole.log(greeting());\n</code></pre> <p>The [[1. console|console]] will display the strings <code>Hello John</code> and <code>Hello Anonymous</code>.</p> <p>The default parameter kicks in when the argument is not specified (it is undefined). As you can see in the example above, the parameter <code>name</code> will receive its default value <code>Anonymous</code> when you do not provide a value for the parameter. You can add default values for as many parameters as you want.</p>"},{"location":"Language/JavaScript/2.%20ES6/4.%20Arrow%20Functions/#use-the-rest-parameter-with-function-parameters","title":"Use the Rest Parameter with Function Parameters","text":"<p>In order to help us create more flexible [[7. Function|functions]], ES6 introduces the rest parameter for function parameters. With the rest parameter, we can create [[7. Function|functions]] that take a variable number of arguments. These arguments are stored in an array that can be accessed later from inside the function.</p> <pre><code>fcuntion func(...args) {\n    return \"You have passed \" + args.length + \" arguments.\";\n}\n\nconsole.log(howMany(0, 1, 2));\nconsole.log(\"str\", null, [1, 2, 3], { })\n</code></pre> <p>The [[1. console|console]] would display the strings <code>You have passed 3 arguments.</code> and <code>You have passed 4 arguments.</code>.</p> <p>The rest parameter eliminates the need to check the <code>args</code> array and allows us to apply <code>map()</code>, <code>filter()</code> and <code>reduce()</code> on the parameters array.</p>"},{"location":"Language/JavaScript/2.%20ES6/4.%20Arrow%20Functions/#use-this-keyword-in-arrow-functions","title":"Use this keyword in Arrow Functions","text":"<p>What if we use the arrow function.</p> <pre><code>const parent = {\n  mom_name: \"Samantha Quinn\",\n  mother: () =&gt; {\n    return `${this.mom_name} is my mother.`;\n  },\n};\nconsole.log(parent.mother());\n</code></pre> <p>We get <code>undefined.....</code>.</p> <p>It actually makes sense. In the regular function, a function always defines its <code>this</code> value. Arrow functions treat <code>this</code> keyword differently. They don\u2019t define their own context since it doesn\u2019t have its own <code>this</code> context. They inherit that from the parent scope whenever you call <code>this</code>.</p> <p><code>this</code> in regular function always refers to the context of the function being called. However, in the arrow function, <code>this</code> has nothing to do with the caller of the function. It refers to the scope where the function (the enclosing context) is present. That\u2019s why we get undefined.</p> <p>To understand <code>this</code>, let\u2019s go through another example.</p> <pre><code>function User() {\n  (this.name = \"John Doe\"),\n    (this.score = 20),\n    (this.sayUser = function () {\n      // when `this` is accessible\n      console.log(this.name);\n\n      function innerFunction() {\n        // when `this` refers to the global scope/object\n        console.log(this.name);\n      }\n\n      innerFunction();\n    });\n}\nlet name = new User();\nname.sayUser();\n</code></pre> <p>Output:</p> <pre><code>John Doe\n\nundefined\n</code></pre> <p>In the first case, we get the user name because <code>this.name</code> is inside <code>this.sayUser</code>, which is accessible. The reason is because <code>this.sayUser</code> is a method of the object <code>User</code>.</p> <p>On the other hand, the <code>this.name</code> inside <code>innerFunction</code> function is not accessible. It refers to the global object window where <code>sayUser</code> is not defined\u2014thus returning <code>undefined</code>.</p> <p>To solve that, you would typically assign <code>this</code> to a variable that doesn\u2019t shadow <code>innerFunction</code>.</p> <p>For example:</p> <pre><code>function User() {\n  (this.name = \"John Doe\"),\n    (this.score = 20),\n    (this.sayUserName = function () {\n      // when `this` is accessible\n      console.log(this.name);\n\n      // when `this` refers to the global scope/object\n      // a variable that doesn't shadow `innerFunction`\n      let self = this;\n      function innerFunction() {\n        console.log(self.name);\n      }\n\n      innerFunction();\n    });\n}\nlet name = new User();\nname.sayUserName();\n</code></pre> <p>However, when the <code>innerFunction</code> is inside an arrow function, <code>this</code> will refer to the parent scope by creating <code>this</code> of its own context.</p> <p>For example:</p> <pre><code>function User() {\n  (this.name = \"John Doe\"),\n    (this.score = 20),\n    (this.sayUser = function () {\n      // when `this` is accessible\n      console.log(this.name);\n\n      let innerFunction = () =&gt; {\n        // when `this` refers to the global scope/object\n        console.log(this.name);\n      };\n\n      innerFunction();\n    });\n}\nlet name = new User();\nname.sayUser();\n</code></pre>"},{"location":"Language/JavaScript/2.%20ES6/5.%20Spread%20Operator/","title":"Spraed Operator","text":"<p>ES6 introduces the spread operator, which allows us to expand arrays and other expressions in places where multiple parameters or elements are expected.</p>"},{"location":"Language/JavaScript/2.%20ES6/5.%20Spread%20Operator/#evaluate-arrays-in-place","title":"Evaluate Arrays In-Place","text":"<p>The ES5 code below uses <code>apply()</code> to compute the maximum value in an array:</p> <pre><code>var arr = [6, 89, 3, 45];\nvar maximus = Math.max.apply(null, arr);\n</code></pre> <p><code>maximus</code> would have a value of <code>89</code>;</p> <p>We had to use <code>Math.max.apply(null, arr)</code> because <code>Math.max(arr)</code> return <code>NaN</code>. <code>Math.max()</code> expects comma-separated arguments, but not an array. The spread operator makes this syntax much better to read and maintain.</p> <pre><code>const arr = [6, 89, 3, 45];\nconst maximus = Math.max(...arr);\n</code></pre> <p><code>maximus</code> would have a value of <code>89</code>;</p> <p><code>...arr</code> returns an unpacked array. In other words, it spreads the array. However, the spread operator only works in-place, like in an argument to a function or in an array literal. The following code will not work:</p> <pre><code>const spreaded = ...arr;\n</code></pre> <p>Copy all contents of <code>arr1</code> into another array <code>arr2</code> using the spread operator.</p> <pre><code>const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];\nlet arr2;\narr2 = [...arr1];\n</code></pre>"},{"location":"Language/JavaScript/2.%20ES6/6.%20Destructuring%20Assignment/","title":"Destructuring Assignment","text":"<p>Destructuring assignment is special syntax introduced in ES6, for neatly assigning values taken directly from an object.</p>"},{"location":"Language/JavaScript/2.%20ES6/6.%20Destructuring%20Assignment/#extract-values-from-objects","title":"Extract Values from Objects","text":"<p>Consider the following ES5 code:</p> <pre><code>const user = { name: 'john', age: 30 };\n\nconst name = user.name;\nconst age = user.age;\n</code></pre> <p><code>name</code> would have a value of the [[5. String|string]] <code>John Doe</code>, and <code>age</code> would have the number <code>34</code>.</p> <p>Here's an equivalent assignment statement using the ES6 destructuring syntax:</p> <pre><code>const {name, age} = user;\n</code></pre> <p>Again, <code>name</code> would have a value of the [[5. String|string]] <code>John Doe</code>, and <code>age</code> would have the number <code>34</code>.</p> <p>Here, the <code>name</code> and <code>age</code> variables will be created and assigned the values of their respective values from the <code>user</code> object. We can see how much cleaner this is.</p> <p>We can extract as many of few values from the object  as we want.</p>"},{"location":"Language/JavaScript/2.%20ES6/6.%20Destructuring%20Assignment/#assign-variables-from-objects","title":"Assign Variables from Objects","text":"<p>Destructuring allows us to assign a new variable name when extracting values. We can do this by putting the new name after a colon when assigning the value.</p> <p>Here's how you can give new variable names in the assignment:</p> <pre><code>const { name: userName, age: userAge } = user;\n</code></pre> <p>We may read it as \"get value of <code>user.name</code> and assign it to a new variable named <code>userName</code>\" and so on. The value of <code>userName</code> would be the [[5. String|string]] <code>John Doe</code>, and the value of <code>userAge</code> would be the number <code>34</code>.</p>"},{"location":"Language/JavaScript/2.%20ES6/6.%20Destructuring%20Assignment/#assign-variable-from-nested-objects","title":"Assign Variable from Nested Objects","text":"<pre><code>const user = {\n  johnDoe: { \n    age: 34,\n    email: 'johnDoe@freeCodeCamp.com'\n  }\n};\n\nconst { johnDoe: {age, email} } = user;\nconst { johnDoe: {age: userAge, email: userEmail} } = user;\n</code></pre> <pre><code>const LOCAL_FORECAST = {\n    yesterday: { low: 61, high: 75 },\n    today: { low: 64, high: 77 },\n    tomorrow: { low: 68, high: 80 }\n};\n\nconst { today: {low: lowToday}, today: {high: highToday} } = LOCAL_FORECAST;\n</code></pre>"},{"location":"Language/JavaScript/2.%20ES6/6.%20Destructuring%20Assignment/#assign-variables-from-6-arrayarrays","title":"Assign Variables from [[6. Array|Arrays]]","text":"<p>ES6 makes destructuring [[6. Array|arrays]] as easy as destructuring objects.</p> <p>One key difference between the spread operator and array destructuring is that the spread operator unpacks all contents of an array into a comma-separated list. Consequently, you cannot pick or choose which elements you want to assign to variables.</p> <p>Destructuring an array lets us do exactly that:</p> <pre><code>const [a, b] = [1, 2, 3, 4, 5, 6];\nconsole.log(a, b);\n</code></pre> <p>The console will display the values of <code>a</code> and <code>b</code> as <code>1, 2</code>.</p> <p>The variable <code>a</code> is assigned the first value of the array, and <code>b</code> is assigned the second value of the array. We can also access the value at any index in an array with destructuring by using commas to reach the desired index:</p> <pre><code>const [a, b,,, c] = [1, 2, 3, 4, 5, 6];\nconsole.log(a, b, c);\n</code></pre> <p>The console will display the values of <code>a</code>, <code>b</code>, and <code>c</code> as <code>1, 2, 5</code>.</p> <p>Swap value</p> <pre><code>let a = 8, b = 6;\n[a, b] = [b, a];\n</code></pre>"},{"location":"Language/JavaScript/2.%20ES6/6.5%20Rest%20Parameter/","title":"Reassign Array Elements with the Rest Parameter","text":"<p>In some situations involving array destructuring, we might want to collect the rest of the elements into a separate array.</p> <p>The result is similar to <code>Array.prototype.slice()</code>, as shown below:</p> <pre><code>const [a, b, ...arr] = [1, 2, 3, 4, 5, 7];\nconsole.log(a, b);\nconsole.log(arr);\n</code></pre> <p>The console would display the value <code>1, 2</code> and <code>[3, 4, 5, 6]</code>.</p> <p>Variables <code>a</code> and <code>b</code> take the first and second values from the array. After that, because of the rest parameter's presence, <code>arr</code> gets the rest of the values in the form of an array. The rest element only works correctly as the last variable in the list. As in, you cannot use the rest parameter to catch a subarray that leaves out the last element of the original array.</p>"},{"location":"Language/JavaScript/2.%20ES6/6.5%20Rest%20Parameter/#pass-an-object-as-a-functions-parameters","title":"Pass an object as a Function's Parameters","text":"<p>In some cases, you can destructure the object in a function argument itself.</p> <p>Consider the code below:</p> <pre><code>const profileUpdate = (profileData) =&gt; {\n  const { name, age, nationality, location } = profileData;\n\n}\n</code></pre> <p>This effectively destructures the object sent into the function. This can also be done in-place:</p> <pre><code>const profileUpdate = ({ name, age, nationality, location }) =&gt; {};\n</code></pre> <p>Or</p> <pre><code>const stats = {\n    max: 56.78,\n    standard_deviation: 4.34,\n    median: 34.54,\n    mode: 23.87,\n    min: -0.75,\n    average: 35.85\n};\n\nconst half = ({max, min}) =&gt; (stats.max + stats.min) / 2.0;\n</code></pre>"},{"location":"Language/JavaScript/2.%20ES6/7.%20Template%20Literals/","title":"Template Literals","text":"<p>A new feature of ES6 is the template literal. This is a special type of [[5. String|string]] that makes creating complex strings easier.</p> <p>Template literals allow you to create multi-line strings and to use [[5. String|string]] interpolation features to create strings.</p> <p>Consider the code below:</p> <pre><code>const person = {\n  name: \"Zodiac Hasbro\",\n  age: 56\n};\n\nconst greeting = `Hello, my name is ${person.name}!\nI am ${person.age} years old.`;\n\nconsole.log(greeting);\n</code></pre> <p>The console will display the strings <code>Hello, my name is Zodiac Hasbro!</code> and <code>I am 56 years old.</code>.</p> <p>A lot of things happened there. Firstly, the example uses backticks (<code>`</code>), not quotes (<code>'</code> or <code>\"</code>), to wrap the [[5. String|string]]. Secondly, notice that the [[5. String|string]] is multi-line, both in the code and the output. This saves inserting <code>\\n</code> within strings. The <code>${variable}</code> syntax used above is a placeholder. Basically, you won't have to use concatenation with the <code>+</code> operator anymore. To add variables to strings, you just drop the variable in a template [[5. String|string]] and wrap it with <code>${</code> and <code>}</code>. Similarly, you can include other expressions in your [[5. String|string]] literal, for example <code>${a + b}</code>. This new way of creating strings gives you more flexibility to create robust strings.</p>"},{"location":"Language/JavaScript/2.%20ES6/8.%20Object%20Property%20Shorthand/","title":"Write Concise Object Literal Declarations Using Object Property Shorthand","text":"<p>ES6 adds some nice support for easily defining object literals.</p> <p>Consider the following code:</p> <pre><code>const getMousePosition = (x, y) =&gt; ({\n    x: x,\n    y: y\n})\n</code></pre> <p><code>getMousePosition</code> is a simple function that returns an object containing two properties. ES6 provides the syntactic sugar to eliminate the redundancy of having to write <code>x: x</code>. You can simply write <code>x</code> once, and it will be converted to<code>x: x</code> (or something equivalent) under the hood. Here is the same function from above rewritten to use this new syntax:</p> <pre><code>const getMousePosition = (x, y) =&gt; ({x, y})\n</code></pre> <pre><code>const createPerson = (name, age, gender) =&gt; {\n    return {\n    name: name,\n    age: age,\n    gender: gender\n    };\n};\n\nconst createPerson = (name, age, gender) =&gt; ({\n    name, age, gender\n});\n</code></pre>"},{"location":"Language/JavaScript/2.%20ES6/9.%20Concise%20Declarative%20Functions/","title":"Write Concise Declarative Functions with ES6","text":"<p>When defining functions within objects in ES5, we have to use the keyword <code>function</code> as follows:</p> <pre><code>const person = {\n  name: \"Taylor\",\n  sayHello: function() {\n    return `Hello! My name is ${this.name}.`;\n  }\n};\n</code></pre> <p>With ES6, you can remove the <code>function</code> keyword and colon altogether when defining functions in objects. Here's an example of this syntax:</p> <pre><code>const person = {\n    name: \"Taylor\",\n    sayHello(){\n        return `Hello! My name is ${this.name}.`;\n    }\n}\n</code></pre>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/1.%20Test%20Method/","title":"1. Test Method","text":"<p>Regular expressions are used in programming languages to match parts of strings. You create patterns to help you do that matching.</p> <p>If we want to find the word <code>the</code> in the [[5. String|string]] <code>The dog chased the cat</code>, we could use the following regular expression: <code>/the/</code>. Notice that quote marks are not required within the regular expression.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/1.%20Test%20Method/#test-method","title":"Test method","text":"<p>[[1. JavaScript|JavaScript]] has multiple ways to use regexes. One way to test a regex is using the <code>.test()</code> method. The <code>.test()</code> method takes the regex, applies it to a [[5. String|string]] (which is placed inside the parentheses), and returns <code>true</code> or <code>false</code> if your pattern finds something or not.</p> <pre><code>let testStr = \"HelloWorld\";\nlet testRegex = /Hello/;\ntestRegex.test(testStr);\n</code></pre> <p>The <code>test</code> method here returns <code>true</code>.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/1.%20Test%20Method/#match-literal-5-stringstring","title":"Match Literal [[5. String|String]]","text":"<p>Here's another example searching for a literal match of the [[5. String|string]] <code>Kevin</code>:</p> <pre><code>let testStr = \"Hello, my name is Kevin.\";\nlet testRegex = /Kevin/;\ntestRegex.test(testStr);\n</code></pre> <p>This <code>test</code> call will return <code>true</code>.</p> <p>Any other forms of <code>Kevin</code> will not match. For example, the regex <code>/Kevin/</code> will not match <code>kevin</code> or <code>KEVIN</code>.</p> <pre><code>let wrongRegex = /kevin/;\nwrongRegex.test(testStr);\n</code></pre> <p>This <code>test</code> call will return <code>false</code>.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/2.%20Extract%20Matches/","title":"Extract Matches","text":"<p>We can also extract the actual matches we found with the <code>.match()</code> method.</p> <p>To use the <code>.match()</code> method, apply the method on a string and pass in the regex inside the parentheses.</p> <pre><code>\"Hello World!\".match(/Hello/);\nlet ourString = \"Regualr expressions\";\nlet ourRegex = /expressions/;\nourStr.match(ourRegex);\n</code></pre> <p>Here the first <code>match</code> would return <code>[\"Hello\"]</code> and the second would return <code>[\"expressions\"]</code>.</p> <p>Note that the <code>.match</code> syntax is the \"opposite\" of the <code>.test</code> method you have been using thus far:</p> <pre><code>'string'.match(/regex/);\n/regex/.test('string');\n</code></pre>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/","title":"Match a Literal [[5. String|String]] with Different Possibilities","text":"<p>We can search for multiple patterns using the <code>alternation</code> or <code>OR</code> operator: <code>|</code>.</p> <p>This operator matches patterns either before or after it. For example, if we wanted to match the strings <code>yse</code> or <code>no</code> or <code>maybe</code>, the regex we want is <code>/yes|no|maybey/</code>.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#ignore-case-while-matching","title":"Ignore Case While Matching","text":"<p>Case (or sometimes letter case) is the difference between uppercase letters and lowercase letters. Examples of uppercase are <code>A</code>, <code>B</code>, and <code>C</code>. Examples of lowercase are <code>a</code>, <code>b</code>, and <code>c</code>.</p> <p>You can match both cases using what is called a flag. There are other flags but here you'll focus on the flag that ignore case - the <code>i</code> flag. You can use it by appending it to the regex. An example of using this flag is <code>/ignorecase/i</code>. This regex can match the strings <code>ignorecase</code>, <code>igNoreCase</code>, and <code>IgnoreCase</code></p> <p>Find More than the First Match To search or extract a pattern more than once, you can use the <code>g</code> flag.</p> <pre><code>let repeatRegex = /Repeat/g;\ntestStr.match(repeatRegex);\n</code></pre>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#match-anything-with-wildcard-period","title":"Match Anything with [[Wildcard]] Period","text":"<p>We can save time using the [[wildcard]] character: <code>.</code></p> <p>The [[wildcard]] character <code>.</code> will match any one character. The [[wildcard]] is also called <code>dot</code> and <code>period</code>. We can use the [[wildcard]] character just like any other character in the regex. For example, if we wanted to match <code>hug</code>, <code>hub</code>, <code>hut</code>, and <code>hum</code>, we can use the regex <code>/hu.</code> to match all four words.</p> <pre><code>let humStr = \"i'll hum a song\";\nlet hugStr = \"Bear hug\";\nlet huRegex = /hu./;\nhuRegex.test(humStr);\nhuRegex.test(hugStr);\n</code></pre> <p>Both of these <code>test</code> calls would return <code>true</code>.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#match-single-character-with-multiple-possibilities","title":"[\"\"]Match Single Character with Multiple Possibilities","text":"<p>We can search for a literal pattern with some flexibility with <code>character classes</code>. Character classes allow us to define a group of characters we wish to match by placing them inside square (<code>[</code> and <code>]</code>) brackets.</p> <p>For example we want to match <code>bag</code>, <code>big</code>, and <code>bug</code> but not <code>bog</code>. We can create the regex <code>/b[aiu]g/</code> to do this. The <code>[aiu]</code> is a character class that will only match the characters <code>a</code>, <code>i</code>, or <code>u</code>;</p> <pre><code>let bigStr = \"big\";\nlet bagStr = \"bag\";\nlet bugStr = \"bug\";\nlet bogStr = \"bog\";\nlet bgRegex = /b[aiut]g/;\n\nbigStr.match(bgRegex);\nbagStr.match(bgRegex);\nbugStr.match(bgRegex);\nbogStr.match(bgRegex);\n</code></pre> <p>In order, the four match calls would return the values  <code>[\"big\"]</code>, <code>[\"bag\"]</code>, <code>[\"bug\"]</code>, and <code>null</code>.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#a-9-match-letters-of-the-alphabet-and-numbers","title":"[a-9] Match Letters of the Alphabet and Numbers","text":"<p>Inside a character set, we can define a range of characters to match using a hyphen character: <code>-</code>.</p> <p>For example, to match lowercase letters <code>a</code> through <code>e</code> we would use <code>[a-e]</code>.</p> <pre><code>let catStr = \"cat\";\nlet batStr = \"bat\";\nlet matStr = \"mat\";\nlet bgRegex = \"/[a-e]at/\"\ncatStr.match(bgRegex);\nbatStr.match(bgRegex);\nmatStr.match(bgRegex);\n</code></pre> <p>In order, the three <code>match</code> calls would return the values <code>[\"cat\"]</code>, <code>[\"bat\"]</code>, and <code>null</code>.</p> <p>For example, <code>/[0-5]/</code> matches any number between <code>0</code> and <code>5</code>, including the <code>0</code> and <code>5</code>.</p> <pre><code>let jennyStr = \"Jenny8675309\";\nlet myRegex = /[a-z0-9]/ig;\njennyStr.match(myRegex);\n</code></pre>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#match-single-characters-not-specified","title":"^ Match Single Characters Not Specified","text":"<p>We could also create a set of characters that we do not want to match. These types of character sets are called negated character sets.</p> <p>To create a negated character set, we place a caret character (<code>^</code>) after the opening bracket and before the characters we do not want to match.</p> <p>For example, <code>/[^aeiou]gi</code> matches all characters that are not a vowel. Note that characters like <code>.</code>, <code>!</code>, <code>[</code>, <code>@</code>, <code>/</code> and white space are matched - the negated vowel character set only excludes the vowel characters.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#match-character-that-occur-one-or-more-times","title":"+ Match Character that Occur One or More Times","text":"<p>We can use the <code>+</code> character to check if that is the case. Remember, the character or pattern has to be present consecutively. That is, the character has to repeat one after the other.</p> <p>For example, <code>/a+/g</code> would find one match in <code>abc</code> and return <code>[\"a\"]</code>. Because of the <code>+</code>, it would also find a single match in <code>aabc</code> and return <code>[\"aa\"]</code>.</p> <p>If it were instead checking the [[5. String|string]] <code>abab</code>, it would find two matches and return <code>[\"a\", \"a\"]</code> because the <code>a</code> characters are not in a row - there is a <code>b</code> between them. Finally, since there is no <code>a</code> in the [[5. String|string]] <code>bcd</code>, it wouldn't find a match.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#match-characters-that-occur-zero-or-more-times","title":"* Match Characters that Occur Zero or More Times","text":"<p>There's also an option that matches characters that occur zero or more times. The character to do this is the asterisk or star: <code>*</code>.</p> <pre><code>let soccerWord = \"gooooooooal!\";\nlet gPhrase = \"gut feeling\";\nlet oPhrase = \"over the moon\";\nlet goRegex = /go*/;\nsoccerWord.match(goRegex);\ngPhrase.match(goRegex);\noPhrase.match(goRegex);\n</code></pre> <p>In order, the three <code>match</code> calls would return the values <code>[\"goooooooo\"]</code>, <code>[\"g\"]</code>, and <code>null</code>.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#find-characters-with-lazy-matching","title":"Find Characters with Lazy Matching","text":"<p>In regular expressions, a greedy match finds the longest possible part of a [[5. String|string]] that fits the regex pattern and returns it as a match. The alternative is called a lazy match, which finds the smallest possible part of the [[5. String|string]] that satisfies the regex pattern.</p> <p>We can apply the regex <code>/t[a-z]*i</code> to [[5. String|string]] <code>\"titanic\"</code>. This regex is basically a pattern that starts with <code>t</code>, end with <code>i</code> , and has some letters in between.</p> <p>Regular expressions are by default greedy, so the match would return <code>[\"titani\"]</code>. It finds the largest sub-[[5. String|string]] possible to fit the pattern.</p> <p>However, we can use the <code>?</code> character to change it to lazy matching. <code>\"titanic\"</code> matched against the adjusted regex of <code>/t[a-z]*?i</code> returns <code>[\"ti\"]</code> </p> <p>Note: Parsing [[Basic HTML|HTML]] with regular expressions should be avoided, but pattern matching an [[Basic HTML|HTML]] [[5. String|string]] with regular expressions is completely fine.</p> <pre><code>let text = \"&lt;h1&gt;Winter is coming&lt;/h1&gt;\";\nlet myRegex = /&lt;.*?&gt;/; \nlet result = text.match(myRegex);\n</code></pre> <p>Return the [[Basic HTML|HTML]] tag <code>&lt;h1&gt;</code>:</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#match-beginning-5-stringstring-patterns","title":"^ Match Beginning [[5. String|String]] Patterns","text":"<p>used the caret character (<code>^</code>) inside a character set to create a negated character set in the form <code>[^thingsThatWillNotBeMatched]</code>. Outside of a character set, the caret is used to search for patterns at the beginning of strings.</p> <pre><code>let firstString = \"Ricky is first and can be found.\";\nlet firstRegex = /^Ricky/;\nfirstRegex.test(firstString);\nlet notFirst = \"You can't find Ricky now.\";\nfirstRegex.test(notFirst);\n</code></pre> <p>The first <code>test</code> call would return <code>true</code>, while the second would return <code>false</code>.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#match-ending-5-stringstring-patterns","title":"$ Match Ending [[5. String|String]] Patterns","text":"<p>We can search the end of strings using the dollar sign character <code>$</code> at the end of the regex.</p> <pre><code>let theEding = \"This is a never ending stroy\";\nlet storyRegex = /story$/;\nstoryRegx.test(theEnding);\nlet noEnding = \"Sometiems a stroy will have to end\";\nstoryRegex.test(noEnding);\n</code></pre> <p>The first <code>test</code> call would return <code>true</code>, while the second would return <code>false</code>.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#s-match-whitespace","title":"\\s Match Whitespace","text":"<p>We can search for whitespace using <code>\\s</code>, which is lowercase <code>s</code>. This pattern not only matches whitespace, but also carriage return, tab, form feed, and new line characters. We can think of it as similar to the character class <code>[ \\r\\t\\f\\n\\v]</code>.</p> <pre><code>let whiteSpcae = \"Whitespace. Whitespace everywhere!\"\nlet spaceRegex = /\\s/g;\nwhileSpace.match(spaceRegex);\n</code></pre> <p>This <code>match</code> call would return <code>[\" \", \" \"]</code>.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#specify-upper-and-lower-number-of-matches","title":"Specify Upper and Lower Number of Matches","text":"<p>Recall that you use the plus sign <code>+</code> to look for one or more characters and the asterisk <code>*</code>to look for zero or more characters. These are convenient but sometimes you want to match a certain range of patterns.</p> <p>You can specify the lower and upper number of patterns with quantity specifiers. Quantity specifiers are used with curly brackets (<code>{</code> and <code>}</code>). You put two numbers between the curly brackets - for the lower and upper number of patterns.</p> <p>For example, to match only the letter <code>a</code> appearing between <code>3</code> and <code>5</code> times in the [[5. String|string]] <code>ah</code>, your regex would be <code>/a{3,5}h/</code>.</p> <pre><code>let A4 = \"aaaah\";\nlet A2 = \"aah\";\nlet multipleA = /a{3,5}h/;\nmultipleA.test(A4);\nmultipleA.test(A2);\n</code></pre> <p>The first <code>test</code> call would return <code>true</code>, while the second would return <code>false</code>.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#specify-only-the-lower-number-of-matches","title":"Specify Only the Lower Number of Matches","text":"<p>We can specify the lower and upper number of patterns with quantity specifiers using curly brackets. Sometimes you only want to specify the lower number of patterns with no upper limit.</p> <p>To only specify the lower number of patterns, keep the first number followed by a comma.</p> <p>For example, to match only the [[5. String|string]] <code>hah</code> with the letter <code>a</code> appearing at least <code>3</code> times, your regex would be <code>/ha{3,}h/</code>.</p> <pre><code>let A4 = \"haaaah\";\nlet A2 = \"haah\";\nlet A100 = \"h\" + \"a\".repeat(100) + \"h\";\nlet multipleA = /ha{3,}h/;\nmultipleA.test(A4);\nmultipleA.test(A2);\nmultipleA.test(A100);\n</code></pre> <p>In order, the three <code>test</code> calls would return <code>true</code>, <code>false</code>, and <code>true</code>.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#specify-exact-number-of-matches","title":"Specify Exact Number of Matches","text":"<p>We can specify the lower and upper number of patterns with quantity specifiers using curly brackets. Sometimes you only want a specific number of matches.</p> <p>To specify a certain number of patterns, just have that one number between the curly brackets.</p> <p>For example, to match only the word <code>hah</code> with the letter <code>a</code> <code>3</code> times, your regex would be <code>/ha{3}h/</code>.</p> <pre><code>let A4 = \"haaaah\";\nlet A3 = \"haaah\";\nlet A100 = \"h\" + \"a\".repeat(100) + \"h\";\nlet multipleHA = /ha{3}h/;\nmultipleHA.test(A4);\nmultipleHA.test(A3);\nmultipleHA.test(A100);\n</code></pre> <p>In order, the three <code>test</code> calls would return <code>false</code>, <code>true</code>, and <code>false</code>.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#check-for-all-or-none","title":"Check for All or None","text":"<p>You can specify the possible existence of an element with a question mark, <code>?</code>. This checks for zero or one of the preceding element. You can think of this symbol as saying the previous element is optional.</p> <p>For example, there are slight differences in American and British English and you can use the question mark to match both spellings.</p> <pre><code>let american = \"color\";\nlet british = \"colour\";\nlet rainbowRegex= /colou?r/;\nrainbowRegex.test(american);\nrainbowRegex.test(british);\n</code></pre> <p>Both uses of the <code>test</code> method would return <code>true</code>.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#positive-and-negative-lookahead","title":"Positive and Negative Lookahead","text":"<p>Lookahead are patterns that tell JavaScript to look-ahead our string to check for patterns further along. This can be useful when we want to search for multiple patterns over the same string. </p> <p>There are two kinds of lookaheads: positive lookahead and negative lookahead.</p> <p>A positive lookahead will look to make sure the element in the search pattern is there, but won't actually match it. A positive lookahead is used as <code>(?=...)</code> where <code>...</code> us the required part that is not matched.</p> <p>On the other hand, a negative lookahead will look to make sure the element in the search pattern is not there, A negative lookahead is used as <code>(?!...)</code> where the <code>...</code> is the pattern that us do not want to be there. The rest of the pattern is returned if the negative lookahead part is not present. </p> <p>Lookaheads are a bit confusing but some examples will help.</p> <pre><code>let quit = \"qu\";\nlet noquit = \"qt\";\nlet quRegex= /q(?=u)/;\nlet qRegex = /q(?!u)/;\nquit.match(quRegex);\nnoquit.match(qRegex);\n</code></pre> <p>Both of these <code>match</code> calls would return <code>[\"q\"]</code>.</p> <p>A more practical use of lookaheads is to check two or more patterns in one string. Here is a (naively) simple password checker that looks for between 3 and 6 characters and at least one number:</p> <pre><code>let password = \"abc123\";\nlet checkPass = /(?=\\w{3,6})(?=\\D*\\d)/;\ncheckPass.test(password);\n</code></pre> <p>Use lookaheads in the <code>pwRegex</code> to match passwords that are greater than 5 characters long, and have two consecutive digits.</p> <pre><code>let pwRegex = /(?=\\w{6,})(?=\\w*\\d{2,})/i;\n</code></pre>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#check-for-mixed-grouping-of-characters","title":"Check For Mixed Grouping of Characters","text":"<p>Sometimes we want to check for groups of characters using a Regular Expression and to achieve that we use parentheses <code>()</code>.</p> <p>If we want to find either <code>Penguin</code> or <code>Pumpkin</code> in a string, we can use the following Regular Expression: <code>/P(engu|umpk)in/g</code></p> <p>Then check whether the desired string groups are in the test string by using the <code>test()</code>method.</p> <pre><code>let testStr = \"Pumpkin\";\nlet testRegex = /P(engu|umpk)in/;\ntestRegex.test(testStr);\n</code></pre> <p>The <code>test</code> method here would return <code>true</code>.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#capture-groups","title":"Capture Groups","text":""},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#reuse-patterns","title":"Reuse Patterns","text":"<p>If we want to match a word that occurs multiple time like this.</p> <pre><code>let repeatStr = \"row row row your boat\";\n</code></pre> <p>We can use <code>/row row row/</code>, but what if we don't know the specific word repeated? Capture groups can used to find repeated substrings.</p> <p>Capture groups are constructed by enclosing the regex pattern to be captured in parentheses. In this case, the goal is to capture a word consisting of alphanumeric characters so the capture group will be <code>\\w+</code> enclose by parentheses: <code>/(\\w+)/</code>.</p> <p>The substring matched by the group is saved to a temporary \"variable\", which can be accessed within the same regex using a backslash and the number of the capture group (e.g. <code>\\1</code>). Capture groups are automatically numbered by the position of their opening parentheses (left to right), starting at 1.</p> <pre><code>let repeatRegex = /(\\w+) \\1 \\1/;\nrepeatRegex.test(repeatStr); // Returns true\nrepeatStr.match(repeatRegex); // Returns [\"row row row\", \"row\"]\n</code></pre> <p>Using the <code>.match()</code> method on a string will return an array with the matched substring, along with its captured groups.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/3.%20Characters/#search-and-replace","title":"Search and Replace","text":"<p>Searching is useful. We can make searching even more powerful when it also replace the text we match.</p> <p>We can search and replace text in string using <code>.repalce()</code> on a string. The input for <code>.replace()</code> is first the regex pattern we want to search for. The second parameter is the string to replace the match or a function to do something.</p> <pre><code>let wrongText = \"The sky is sliver.\";\nlet silverRegex = /sliver/;\nwrongText.rplace(silverRegex, \"blue\");\n</code></pre> <p>The <code>replace</code> call would return the string <code>The sky is blue</code>.</p> <p>We can also access capture groups in the replacement string with dollar sign (<code>$</code>).</p> <pre><code>\"one two three\".replace(/(w+)\\s(w+)\\s(w+)/, '$3 $2 $1');\n</code></pre> <p>The <code>replace</code> call would return the string <code>three two one</code>.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/4.%20Shortcut/","title":"\\w Match All Letters and Numbers","text":"<p>Using character classes, you were able to search for all letters of the alphabet with <code>[a-z]</code>. This kind of character class is common enough that there is a shortcut for it, although it includes a few extra characters as well.</p> <p>The closet character class in [[1. JavaScript|JavaScript]] to match the alphabet is <code>\\w</code>. This shortcut is equal to <code>[A-Za-z0-9_]</code>. This character class matches upper and lowercase letters plus numbers. Note, this character class also includes the underscore character (<code>_</code>).</p> <pre><code>let longHand = /[A-Za-z0-9_]+/;\nlet shortHand = /\\w+/;\nlet numbers = \"42\";\nlet varNames = \"important_var\";\nlongHand.test(numbers);\nshortHand.test(numbers);\nlongHand.test(varNames);\nshortHand.test(varNames);\n</code></pre> <p>All four these <code>test</code> calls would return <code>true</code>. These shortcut character classes are also known as shorthand character classes.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/4.%20Shortcut/#match-everything-but-letters-and-numbers","title":"Match Everything But Letters and Numbers","text":"<p>We  can search for the opposite of the <code>\\w</code> with <code>\\W</code>. Note, the opposite pattern uses a capital letter. This shortcut is the same as <code>[^A-Za-z0-9_]</code>.</p> <pre><code>let shortHand = /\\W/;\nlet numbers = \"42%\";\nlet sentence = \"Coding!\";\nnumbers.match(shortHand);\nsentence.match(shortHand);\n</code></pre> <p>The first <code>match</code> call would return the value <code>[\"%\"]</code> and the second would return <code>[\"!\"]</code></p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/4.%20Shortcut/#match-all-numbers","title":"Match All Numbers","text":"<p>You've learned shortcuts for common [[5. String|string]] patterns like alphanumerics. Another common pattern is looking for just digits or numbers.</p> <p>The shortcut to look for digit characters is <code>\\d</code>, with a lowercase <code>d</code>. This is equal to the character class <code>[0-9]</code>, which looks for a single character of any number between zero and nine.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/4.%20Shortcut/#match-all-non-numbers","title":"Match All Non-Numbers","text":"<p>The last challenge showed how to search for digits using the shortcut <code>\\d</code> with a lowercase <code>d</code>. You can also search for non-digits using a similar shortcut that uses an uppercase <code>D</code> instead.</p> <p>The shortcut to look for non-digit characters is <code>\\D</code>. This is equal to the character class <code>[^0-9]</code>, which looks for a single character that is not a number between zero and nine.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/4.%20Shortcut/#match-non-whitespace-characters","title":"Match Non-Whitespace Characters","text":"<p>Search for non-whitespace using <code>\\S</code>, which is an uppercase <code>s</code>. This pattern will not match whitespace, carriage return, tab, form feed, and new line characters. You can think of it being similar to the character class <code>[^ \\r\\t\\f\\n\\v]</code>.</p> <pre><code>let whiteSpace = \"Whitespace. Whitespace everywhere!\"\nlet nonSpaceRegex = /\\S/g;\nwhiteSpace.match(nonSpaceRegex).length;\n</code></pre> <p>The value returned by the <code>.length</code> method would be <code>32</code>.</p>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/5.%20cases/","title":"Username","text":"<ol> <li> <p>Usernames can only use alpha-numeric characters.</p> </li> <li> <p>The only numbers in the username have to be at the end. There can be zero or more of them at the end. Username cannot start with the number.</p> </li> <li> <p>Username letters can be lowercase and uppercase.</p> </li> <li> <p>Usernames have to be at least two characters long. A two-character username can only use alphabet letters as characters.</p> </li> </ol> <p>JackOfAllTrades</p> <pre><code>/^[a-z][a-z]+\\d*$|^[a-z]\\d\\d+$/i\n</code></pre>"},{"location":"Language/JavaScript/3.%20Regular%20Expressions/5.%20cases/#remove-whitespace-from-start-and-end","title":"Remove Whitespace from Start and End","text":"<pre><code>let hello = \" Hello, World! \";\nlet wsRegex = /^\\s+|\\s+$/g; \nlet result = hello.replace(wsRegex, ''); \n</code></pre>"},{"location":"Language/JavaScript/4.%20Debug/1.%20console/","title":"Use the [[1. JavaScript|JavaScript]] Console to Check the Value of a Variable","text":"<p>Both Chrome and Firefox have excellent [[1. JavaScript|JavaScript]] consoles, also known as DevTools, for debugging your [[1. JavaScript|JavaScript]].</p> <p>You can find Developer tools in your Chrome's menu or Web Console in Firefox's menu. If you're using a different browser, or a mobile phone, we strongly recommend switching to desktop Firefox or Chrome.</p> <p>The <code>console.log()</code> method, which \"prints\" the output of what's within its [[parentheses]] to the console, will likely be the most helpful debugging tool. Placing it at strategic points in your code can show you the intermediate values of variables. It's good [[practice]] to have an idea of what the output should be before looking at what it is. Having check points to see the status of your calculations throughout your code will help narrow down where the problem is.</p> <p>Here's an example to print the [[5. String|string]] <code>Hello world!</code> to the console:</p> <pre><code>console.log('Hello world!');\n</code></pre> <p>There are many methods to use with <code>console</code> to output messages. <code>log</code>, <code>warn</code>, and <code>clear</code> to name a few.</p>"},{"location":"Language/JavaScript/4.%20Debug/2.%20typeof/","title":"Use typeof to Check the Type of a Variable","text":"<p>We can use <code>typeof</code> to check the data structure, or type, of a variable. This is useful in debugging when working with multiple data types. If we think we're adding two numbers, but one is actually a [[5. String|string]], the results can be unexpected. Type errors can lurk in calculations or function calls. Be careful especially when you're accessing and working with external data in the form of a [[1. JavaScript|JavaScript]] Object Notation (JSON) object.</p> <p>Here are some examples using <code>typeof</code>:</p> <pre><code>console.log(typeof \"\");\nconsole.log(typeof 0);\nconsole.log(typeof []);\nconsole.log(typeof {});\n</code></pre> <p>In order, the [[1. console|console]] will display the strings <code>string</code>, <code>number</code>, <code>object</code>, and <code>object</code>.</p> <p>[[1. JavaScript|JavaScript]] recognizes six primitive ([[immutable]]) data types: <code>Boolean</code>, <code>Null</code>, <code>Undefined</code>, <code>Number</code>, <code>String</code>, and <code>Symbol</code> (new with ES6) and one type for mutable items: <code>Object</code>. Note that in [[1. JavaScript|JavaScript]], [[6. Array|arrays]] are technically a type of object.</p>"},{"location":"Language/JavaScript/4.%20Debug/3.%20Mthods/","title":"Catch Misspelled Variable and Function Names","text":"<p>The <code>console.log()</code> and <code>typeof</code> methods are the two primary ways to check intermediate values and types of program output. Now it's time to get into the common forms that bugs take. One syntax-level issue that fast typers can commiserate with is the humble spelling error.</p> <p>Transposed, missing, or mis-capitalized characters in a variable or function name will have the browser looking for an object that doesn't exist - and complain in the form of a reference error. [[1. JavaScript|JavaScript]] variable and function names are case-sensitive.</p>"},{"location":"Language/JavaScript/4.%20Debug/3.%20Mthods/#catch-unclosed-parentheses-brackets-braces-and-quotes","title":"Catch Unclosed [[Parentheses]], Brackets, Braces and Quotes","text":"<p>Another syntax error to be aware of is that all opening [[parentheses]], brackets, curly braces, and quotes have a closing pair. Forgetting a piece tends to happen when you're editing existing code and inserting items with one of the pair types. Also, take care when nesting code blocks into others, such as adding a callback function as an argument to a method.</p> <p>One way to avoid this mistake is as soon as the opening character is typed, immediately include the closing match, then move the cursor back between them and continue coding. Fortunately, most modern code editors generate the second half of the pair automatically.</p>"},{"location":"Language/JavaScript/4.%20Debug/3.%20Mthods/#catch-mixed-usage-of-single-and-double-quotes","title":"Catch Mixed Usage of Single and Double Quotes","text":"<p>[[1. JavaScript|JavaScript]] allows the use of both single (<code>'</code>) and double (<code>\"</code>) quotes to declare a [[5. String|string]]. Deciding which one to use generally comes down to personal preference, with some exceptions.</p> <p>Having two choices is great when a [[5. String|string]] has contractions or another piece of text that's in quotes. Just be careful that you don't close the [[5. String|string]] too early, which causes a syntax error.</p> <p>Here are some examples of mixing quotes:</p> <pre><code>const grouchoContraction = \"I've had a perfectly wonderful evening, but this wasn't it.\";\nconst quoteInString = \"Groucho Marx once said 'Quote me as saying I was mis-quoted.'\";\nconst uhOhGroucho = 'I've had a perfectly wonderful evening, but this wasn't it.';\n</code></pre> <p>The first two are correct, but the third is incorrect.</p> <p>Of course, it is okay to use only one style of quotes. You can escape the quotes inside the [[5. String|string]] by using the backslash (<code>\\</code>) escape character:</p> <pre><code>const allSameQuotes = 'I\\'ve had a perfectly wonderful evening, but this wasn\\'t it.';\n</code></pre>"},{"location":"Language/JavaScript/4.%20Debug/3.%20Mthods/#catch-use-of-assignment-operator-instead-of-equality-operator","title":"Catch Use of Assignment Operator Instead of Equality Operator","text":"<p>Branching programs, i.e. ones that do different things if certain conditions are met, rely on <code>if</code>, <code>else if</code>, and <code>else</code> statements in [[1. JavaScript|JavaScript]]. The condition sometimes takes the form of testing whether a result is equal to a value.</p> <p>This logic is spoken (in English, at least) as \"if x equals y, then ...\" which can literally translate into code using the <code>=</code>, or assignment operator. This leads to unexpected control flow in your program.</p> <p>As covered in previous challenges, the assignment operator (<code>=</code>) in JavaScript assigns a value to a variable name. And the <code>==</code> and <code>===</code> operators check for equality (the triple <code>===</code> tests for strict equality, meaning both value and type are the same).</p> <p>The code below assigns <code>x</code> to be 2, which evaluates as <code>true</code>. Almost every value on its own in [[1. JavaScript|JavaScript]] evaluates to <code>true</code>, except what are known as the \"falsy\" values: <code>false</code>, <code>0</code>, <code>\"\"</code> (an empty string), <code>NaN</code>, <code>undefined</code>, and <code>null</code>.</p> <pre><code>let x = 1;\nlet y = 2;\nif (x = y) {\n\n} else {\n\n}\n</code></pre> <p>In this example, the code block within the <code>if</code> statement will run for any value of <code>y</code>, unless <code>y</code> is falsy. The <code>else</code> block, which we expect to run here, will not actually run.</p>"},{"location":"Language/JavaScript/4.%20Debug/3.%20Mthods/#catch-missing-open-and-closing-parenthesis-after-a-function-call","title":"Catch Missing Open and Closing Parenthesis After a Function Call","text":"<p>When a function or method doesn't take any arguments, you may forget to include the (empty) opening and closing [[parentheses]] when calling it. Often times the result of a function call is saved in a variable for other use in your code. This error can be detected by logging variable values (or their types) to the [[1. console|console]] and seeing that one is set to a function reference, instead of the expected value the function returns.</p> <p>The variables in the following example are different:</p> <pre><code>function myFunction() {\n  return \"You rock!\";\n}\nlet varOne = myFunction;\nlet varTwo = myFunction();\n</code></pre> <p>Here <code>varOne</code> is the function <code>myFunction</code>, and <code>varTwo</code> is the [[5. String|string]] <code>You rock!</code>.</p>"},{"location":"Language/JavaScript/4.%20Debug/3.%20Mthods/#catch-arguments-passed-in-the-wrong-order-when-calling-a-function","title":"Catch Arguments Passed in the Wrong Order When Calling a Function","text":"<p>Continuing the discussion on calling [[7. Function|functions]], the next bug to watch out for is when a function's arguments are supplied in the incorrect order. If the arguments are different types, such as a function expecting an array and an integer, this will likely throw a runtime error. If the arguments are the same type (all integers, for example), then the logic of the code won't make sense. Make sure to supply all required arguments, in the proper order to avoid these issues.</p>"},{"location":"Language/JavaScript/4.%20Debug/3.%20Mthods/#catch-off-by-one-errors-when-using-indexing","title":"Catch Off By One Errors When Using Indexing","text":"<p>Off by one errors (sometimes called OBOE) crop up when you're trying to target a specific index of a [[5. String|string]] or array (to slice or access a segment), or when looping over the indices of them. [[1. JavaScript|JavaScript]] indexing starts at zero, not one, which means the last index is always one less than the length of the item. If you try to access an index equal to the length, the program may throw an \"index out of range\" reference error or print <code>undefined</code>.</p> <p>When you use [[5. String|string]] or array methods that take index ranges as arguments, it helps to read the documentation and understand if they are inclusive (the item at the given index is part of what's returned) or not. Here are some examples of off by one errors:</p> <pre><code>let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\nlet len = alphabet.length;\nfor (let i = 0; i &lt;= len; i++) {\n  console.log(alphabet[i]);\n}\nfor (let j = 1; j &lt; len; j++) {\n  console.log(alphabet[j]);\n}\nfor (let k = 0; k &lt; len; k++) {\n  console.log(alphabet[k]);\n}\n</code></pre> <p>The first example here loops one too many times, and the second loops one too few times (missing the first index, 0). The third example is correct.</p>"},{"location":"Language/JavaScript/4.%20Debug/3.%20Mthods/#use-caution-when-reinitializing-variables-inside-a-loop","title":"Use Caution When Reinitializing Variables Inside a Loop","text":"<p>Sometimes it's necessary to save information, increment counters, or re-set variables within a loop. A potential issue is when variables either should be reinitialized, and aren't, or vice versa. This is particularly dangerous if you accidentally reset the variable being used for the terminal condition, causing an infinite loop.</p> <p>Printing variable values with each cycle of your loop by using <code>console.log()</code> can uncover buggy behavior related to resetting, or failing to reset a variable.</p>"},{"location":"Language/JavaScript/4.%20Debug/3.%20Mthods/#prevent-infinite-loops-with-a-valid-terminal-condition","title":"Prevent Infinite Loops with a Valid Terminal Condition","text":"<p>Loops are great tools when you need your program to run a code block a certain number of times or until a condition is met, but they need a terminal condition that ends the looping. Infinite loops are likely to freeze or crash the browser, and cause general program execution mayhem, which no one wants.</p> <p>There was an example of an infinite loop in the introduction to this section - it had no terminal condition to break out of the <code>while</code> loop inside <code>loopy()</code>. Do NOT call this function!</p> <pre><code>function loopy() {\n  while(true) {\n    console.log(\"Hello, world!\");\n  }\n}\n</code></pre> <p>It's the programmer's job to ensure that the terminal condition, which tells the program when to break out of the loop code, is eventually reached. One error is incrementing or decrementing a counter variable in the wrong direction from the terminal condition. Another one is accidentally resetting a counter or index variable within the loop code, instead of incrementing or decrementing it.</p>"},{"location":"Language/JavaScript/5.%20Basic%20Data%20Structure/1.%20Array%20Structures/","title":"Array Data Structure","text":"<p>The below is an example of the simplest implementation of an array data structure. This is known as a one-dimensional array, meaning it only has one level, or that it does not have any other [[6. Array|arrays]] nested within it. Notice it contains booleans, strings, and numbers, among other valid [[1. JavaScript|JavaScript]] data types:</p> <pre><code>let simpleArray = ['one', 2, 'three', true, false, undefined, null];\nconsole.log(simpleArray.length);\n</code></pre> <p>The <code>console.log</code> call displays <code>7</code>.</p> <p>All [[6. Array|arrays]] have a length property, which as shown above, can be very easily accessed with the syntax <code>Array.length</code>. A more complex implementation of an array can be seen below. This is known as a multi-dimensional array, or an array that contains other [[6. Array|arrays]]. Notice that this array also contains [[1. JavaScript|JavaScript]] objects, which we will examine very closely in our next section, but for now, all you need to know is that [[6. Array|arrays]] are also capable of storing complex objects.</p> <pre><code>let complexArray = [\n  [\n    {\n      one: 1,\n      two: 2\n    },\n    {\n      three: 3,\n      four: 4\n    }\n  ],\n  [\n    {\n      a: \"a\",\n      b: \"b\"\n    },\n    {\n      c: \"c\",\n      d: \"d\"\n    }\n  ]\n];\n</code></pre>"},{"location":"Language/JavaScript/5.%20Basic%20Data%20Structure/1.%20Array%20Structures/#access-an-arrays-contents-using-bracket-notation","title":"Access an Array's Contents Using Bracket Notation","text":"<p>The fundamental feature of any data structure is, of course, the ability to not only store data, but to be able to retrieve that data on command. So, now that we've learned how to create an array, let's begin to think about how we can access that array's information.</p> <p>When we define a simple array as seen below, there are 3 items in it:</p> <pre><code>let ourArray = [\"a\", \"b\", \"c\"];\n</code></pre> <p>In an array, each array item has an index. This index doubles as the position of that item in the array, and how you reference it. However, it is important to note, that JavaScript arrays are zero-indexed, meaning that the first element of an array is actually at the _zeroth_position, not the first. In order to retrieve an element from an array we can enclose an index in brackets and append it to the end of an array, or more commonly, to a variable which references an array object. This is known as bracket notation. For example, if we want to retrieve the <code>a</code> from <code>ourArray</code> and assign it to a variable, we can do so with the following code:</p> <pre><code>let ourVariable = ourArray[0];\n</code></pre> <p>Now <code>ourVariable</code> has the value of <code>a</code>.</p> <p>In addition to accessing the value associated with an index, you can also set an index to a value using the same notation:</p> <pre><code>ourArray[1] = \"not b anymore\";\n</code></pre> <p>Using bracket notation, we have now reset the item at index 1 from the string <code>b</code>, to <code>not b anymore</code>. Now <code>ourArray</code> is <code>[\"a\", \"not b anymore\", \"c\"]</code>.</p>"},{"location":"Language/JavaScript/5.%20Basic%20Data%20Structure/1.%20Array%20Structures/#add-items-to-an-array-with-push-and-unshift","title":"Add Items to an Array with push() and unshift()","text":"<p>An array's length, like the data types it can contain, is not fixed. Arrays can be defined with a length of any number of elements, and elements can be added or removed over time; in other words, arrays are mutable. In this challenge, we will look at two methods with which we can programmatically modify an array: <code>Array.push()</code> and <code>Array.unshift()</code>.</p> <p>Both methods take one or more elements as parameters and add those elements to the array the method is being called on; the <code>push()</code> method adds elements to the end of an array, and <code>unshift()</code> adds elements to the beginning. Consider the following:</p> <pre><code>let twentyThree = 'XXIII';\nlet romanNumerals = ['XXI', 'XXII'];\n\nromanNumerals.unshift('XIX', 'XX');\n</code></pre> <p><code>romanNumerals</code> would have the value <code>['XIX', 'XX', 'XXI', 'XXII']</code>.</p> <pre><code>romanNumerals.push(twentyThree);\n</code></pre> <p><code>romanNumerals</code> would have the value <code>['XIX', 'XX', 'XXI', 'XXII', 'XXIII']</code>. Notice that we can also pass variables, which allows us even greater flexibility in dynamically modifying our array's data.</p>"},{"location":"Language/JavaScript/5.%20Basic%20Data%20Structure/1.%20Array%20Structures/#remove-items-from-an-array-with-pop-and-shift","title":"Remove Items from an Array with pop() and shift()","text":"<p>Both <code>push()</code> and <code>unshift()</code> have corresponding methods that are nearly functional opposites: <code>pop()</code> and <code>shift()</code>. As you may have guessed by now, instead of adding, <code>pop()</code> removes an element from the end of an array, while <code>shift()</code> removes an element from the beginning. The key difference between <code>pop()</code> and <code>shift()</code> and their cousins <code>push()</code> and <code>unshift()</code>, is that neither method takes parameters, and each only allows an array to be modified by a single element at a time.</p> <p>Let's take a look:</p> <pre><code>let greetings = ['whats up?', 'hello', 'see ya!'];\n\ngreetings.pop();\n</code></pre> <p><code>greetings</code> would have the value <code>['whats up?', 'hello']</code>.</p> <pre><code>greetings.shift();\n</code></pre> <p><code>greetings</code> would have the value <code>['hello']</code>.</p> <p>We can also return the value of the removed element with either method like this:</p> <pre><code>let popped = greetings.pop();\n</code></pre> <p><code>greetings</code> would have the value <code>[]</code>, and <code>popped</code> would have the value <code>hello</code>.</p>"},{"location":"Language/JavaScript/5.%20Basic%20Data%20Structure/2.%20Object%20Structures/","title":"Add Key-Value Pairs to JavaScript Objects","text":"<p>At their most basic, objects are just collections of key-value pairs. In other words, they are pieces of data (values) mapped to unique identifiers called properties (keys). Take a look at an example:</p> <pre><code>const tekkenCharacter = {\n  player: 'Hwoarang',\n  fightingStyle: 'Tae Kwon Doe',\n  human: true\n};\n</code></pre> <p>The above code defines a Tekken video game character object called <code>tekkenCharacter</code>. It has three properties, each of which map to a specific value. If you want to add an additional property, such as \"origin\", it can be done by assigning <code>origin</code> to the object:</p> <pre><code>tekkenCharacter.origin = 'South Korea';\n</code></pre> <p>This uses dot notation. If you were to observe the <code>tekkenCharacter</code> object, it will now include the <code>origin</code> property. Hwoarang also had distinct orange hair. You can add this property with bracket notation by doing:</p> <pre><code>tekkenCharacter['hair color'] = 'dyed orange';\n</code></pre> <p>Bracket notation is required if your property has a space in it or if you want to use a variable to name the property. In the above case, the property is enclosed in quotes to denote it as a string and will be added exactly as shown. Without quotes, it will be evaluated as a variable and the name of the property will be whatever value the variable is. Here's an example with a variable:</p> <pre><code>const eyes = 'eye color';\n\ntekkenCharacter[eyes] = 'brown';\n</code></pre> <p>After adding all the examples, the object will look like this:</p> <pre><code>{\n  player: 'Hwoarang',\n  fightingStyle: 'Tae Kwon Doe',\n  human: true,\n  origin: 'South Korea',\n  'hair color': 'dyed orange',\n  'eye color': 'brown'\n};\n</code></pre>"},{"location":"Language/JavaScript/5.%20Basic%20Data%20Structure/2.%20Object%20Structures/#modify-an-object-nested-within-an-object","title":"Modify an Object Nested Within an Object","text":"<p>Now let's take a look at a slightly more complex object. Object properties can be nested to an arbitrary depth, and their values can be any type of data supported by JavaScript, including arrays and even other objects. Consider the following:</p> <pre><code>let nestedObject = {\n  id: 28802695164,\n  date: 'December 31, 2016',\n  data: {\n    totalUsers: 99,\n    online: 80,\n    onlineStatus: {\n      active: 67,\n      away: 13,\n      busy: 8\n    }\n  }\n};\n</code></pre> <p><code>nestedObject</code> has three properties: <code>id</code> (value is a number), <code>date</code> (value is a string), and <code>data</code> (value is an object with its nested structure). While structures can quickly become complex, we can still use the same notations to access the information we need. To assign the value <code>10</code> to the <code>busy</code> property of the nested <code>onlineStatus</code> object, we use dot notation to reference the property:</p> <pre><code>nestedObject.data.onlineStatus.busy = 10;\n</code></pre>"},{"location":"Language/JavaScript/5.%20Basic%20Data%20Structure/2.%20Object%20Structures/#access-property-names-with-bracket-notation","title":"Access Property Names with Bracket Notation","text":"<p>In the first object challenge we mentioned the use of bracket notation as a way to access property values using the evaluation of a variable. For instance, imagine that our <code>foods</code>object is being used in a program for a supermarket cash register. We have some function that sets the <code>selectedFood</code> and we want to check our <code>foods</code> object for the presence of that food. This might look like:</p> <pre><code>let selectedFood = getCurrentFood(scannedItem);\nlet inventory = foods[selectedFood];\n</code></pre> <p>This code will evaluate the value stored in the <code>selectedFood</code> variable and return the value of that key in the <code>foods</code> object, or <code>undefined</code> if it is not present. Bracket notation is very useful because sometimes object properties are not known before runtime or we need to access them in a more dynamic way.</p>"},{"location":"Language/JavaScript/5.%20Basic%20Data%20Structure/2.%20Object%20Structures/#use-the-delete-keyword-to-remove-object-properties","title":"Use the delete Keyword to Remove Object Properties","text":"<p>Now you know what objects are and their basic features and advantages. In short, they are key-value stores which provide a flexible, intuitive way to structure data, and, they provide very fast lookup time. Throughout the rest of these challenges, we will describe several common operations you can perform on objects so you can become comfortable applying these useful data structures in your programs.</p> <p>In earlier challenges, we have both added to and modified an object's key-value pairs. Here we will see how we can remove a key-value pair from an object.</p> <p>Let's revisit our <code>foods</code> object example one last time. If we wanted to remove the <code>apples</code>key, we can remove it by using the <code>delete</code> keyword like this:</p> <pre><code>delete foods.apples;\n</code></pre>"},{"location":"Language/JavaScript/5.%20Basic%20Data%20Structure/2.%20Object%20Structures/#check-if-an-object-has-a-property","title":"Check if an Object has a Property","text":"<p>Now we can add, modify, and remove keys from objects. But what if we just wanted to know if an object has a specific property? JavaScript provides us with two different ways to do this. One uses the <code>hasOwnProperty()</code> method and the other uses the <code>in</code> keyword. If we have an object <code>users</code> with a property of <code>Alan</code>, we could check for its presence in either of the following ways:</p> <pre><code>users.hasOwnProperty('Alan');\n'Alan' in users;\n</code></pre> <p>Both of these would return <code>true</code>.</p>"},{"location":"Language/JavaScript/5.%20Basic%20Data%20Structure/queue/","title":"Queue","text":"<p>In Computer Science a queue is an abstract Data Structure where items are kept in order. New items can be added at the back of the queue and old items are taken off from the front of the queue.</p> <pre><code>function queue(arr, item) {\n    arr.push(item);\n    item = arr.shift();\n    return item;\n}\n</code></pre>"},{"location":"Language/JavaScript/6.%20Basic%20Algorithm/1.%20Algorithm/","title":"Algoritm","text":"<p>An algorithm is a series of step-by-step instructions that describe how to do something.</p> <p>To write an effective algorithm, it helps to break a problem down into smaller parts and think carefully about how to solve each part with code.</p>"},{"location":"Language/JavaScript/6.%20Basic%20Algorithm/Boo%20who/","title":"Boo who","text":"<p>Boo who</p> <p>Check if a value is classified as a boolean primitive. Return <code>true</code> or <code>false</code>.</p> <p>Boolean primitives are <code>true</code> and <code>false</code>.</p> <pre><code>function booWho(bool) {\n    return typeof(bool) === 'boolean';\n}\n</code></pre>"},{"location":"Language/JavaScript/6.%20Basic%20Algorithm/Confirm%20the%20Ending/","title":"Confirm the Ending","text":"<pre><code>function confirmEnding(str, target) {\n    return str.slice(str.length - target.length) === target;\n}\n</code></pre> <pre><code>function confirmEnding(str, target) {\n    let re = new RegExp(target + \"$\", \"i\"); \n    return re.test(str); \n}\n</code></pre> <pre><code>function confirmEnding(str, target) { \n    return str.slice(-target.length) === target \n}\n</code></pre> <pre><code>function confirmEnding(str, target) {\n    return [...str].splice(str.length-target.length, target.length).join(\"\") === target;\n}\n</code></pre>"},{"location":"Language/JavaScript/6.%20Basic%20Algorithm/Factorialize%20a%20Number/","title":"Factorialize a Number","text":"<pre><code>function factorialize(num) {\n    let result = 1;\n    for(let i = 1; i &lt;= num; i++){\n        result *= i;\n    }\n    return result;\n}\n</code></pre> <p>or </p> <pre><code>function factorialize(num) {\n    if(num === 0)\n        return 1;\n    else\n        return factorialize(num-1) * num;\n}\n</code></pre> <p>or </p> <pre><code>function factorialize(num, factorial = 1) {\n    if(num === 0)\n        return factorial;\n    else\n        return factorialize(num - 1, factorial * num);\n</code></pre>"},{"location":"Language/JavaScript/6.%20Basic%20Algorithm/Find%20the%20Longest%20Word%20in%20a%20String/","title":"Find the Longest Word in a String","text":"<pre><code>function findLongestWordLength(str) {\n    return Math.max(...str.split(' ').map(x =&gt; x.length));\n}\n</code></pre> <pre><code>function findLongestWordLength(str) { \n    let words = str.split(' '); \n    let maxLength = 0; \n    for (let i = 0; i &lt; words.length; i++) { \n        if (words[i].length &gt; maxLength) { \n            maxLength = words[i].length; \n        } \n    } \nreturn maxLength; \n}\n</code></pre> <pre><code>function findLongestWordLength(str) {\n    const reducer = (x, y) =&gt; Math.max(x, y.length)\n    return str.split(' ')\n        .reduce(reducer, 0);\n}\n</code></pre>"},{"location":"Language/JavaScript/6.%20Basic%20Algorithm/Finders%20Keepers/","title":"Finders Keepers","text":"<pre><code>function findElement(arr, func) {\n    for (let i = 0; i &lt; arr.length; i++){\n        if(func(arr[i]))\n            return arr[i];\n    }\n    return undefined;\n}\n</code></pre> <pre><code>function findElement(arr, func) {\n    let num = 0;\n    return arr.length === 0 ? undefined : func(num = arr.shift()) ? num \n    : findElement(arr, func);\n}\n</code></pre> <pre><code>function findElement(arr, func) {\n    return arr[arr.map(func).indexOf(true)];\n}\n</code></pre>"},{"location":"Language/JavaScript/6.%20Basic%20Algorithm/Repeat%20a%20String%20Repeat%20a%20String/","title":"Repeat a String Repeat a String","text":"<pre><code>function repeatStringNumTimes(str, num) {\n    return num &gt; 0 ? str + repeatStringNumTimes(str, num-1) : '';\n}\n</code></pre> <pre><code>function repeatStringNumTimes(str, num) { \n    let accumulatedStr = \"\"; \n    for (let i = 0; i &lt; num; i++) { \n        accumulatedStr += str; \n    } \n    return accumulatedStr; }\n</code></pre>"},{"location":"Language/JavaScript/6.%20Basic%20Algorithm/Return%20Largest%20Numbers%20in%20Arrays/","title":"Return Largest Numbers in Arrays","text":"<pre><code>function largestOfFour(arr) {\n    return [...arr.map(x =&gt; Math.max(...x))];\n}\n</code></pre> <pre><code>function largestOfFour(arr) {\n    return arr.map(group =&gt;\n                  group.reduce((prev, current) =&gt; \n                               current &gt; prev ? current : prev) \n                  )\n}\n</code></pre> <pre><code>function largestOfFour(arr, finalArr = []) {\n    return !arr.length\n        ? finalArr\n        : largestOfFour(arr.slice(1), finalArr.concat(Math.max(...arr[0])))\n}\n</code></pre>"},{"location":"Language/JavaScript/6.%20Basic%20Algorithm/Reverse%20a%20String/","title":"Reverse a String","text":"<pre><code>function reverseString(str) {\n    let newStr = \"\";\n    for(let i = str.length-1; i &gt;= 0; i--){\n    newStr += str[i];\n    }\n    return newStr;\n}\n</code></pre> <p>or </p> <pre><code>function reverseString(str) {\n    return [...str].reverse().join('');\n}\n</code></pre>"},{"location":"Language/JavaScript/6.%20Basic%20Algorithm/Title%20Case%20a%20Sentence/","title":"Title Case a Sentence","text":"<p>Return the provided string with the first letter of each word capitalized. Make sure the rest of the word is in lower case.</p> <p>For the purpose of this exercise, you should also capitalize connecting words like <code>the</code> and <code>of</code>.</p> <pre><code>\n</code></pre>"},{"location":"Language/JavaScript/6.%20Basic%20Algorithm/Truncate%20a%20String/","title":"[[Truncate]] a [[5. String|String]]","text":"<p><code>js function truncateString(str, num) {     return str.length &lt;= num ? str : str.slice(0,num)+'...'; }</code></p>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/1.%20JavaScript%20Object/","title":"Create a Basic [[1. JavaScript|JavaScript]] Object","text":"<p>Think about things people see every day, like cars, shops, and birds. These are all objects: tangible things people can observe and interact with.</p> <p>What are some qualities of these objects? A car has wheels. Shops sell items. Birds have wings.</p> <p>These qualities, or properties, define what makes up an object. Note that similar objects share the same properties, but may have different values for those properties. For example, all cars have wheels, but not all cars have the same number of wheels.</p> <p>Objects in [[1. JavaScript|JavaScript]] are used to model real-world objects, giving them properties and behavior just like their real-world counterparts. Here's an example using these concepts to create a <code>duck</code> object:</p> <pre><code>let duck = {\n  name: \"Aflac\",\n  numLegs: 2\n};\n</code></pre> <p>This <code>duck</code> object has two property/value pairs: a <code>name</code> of <code>Aflac</code> and a <code>numLegs</code> of 2.</p>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/1.%20JavaScript%20Object/#create-a-method-on-an-object","title":"Create a Method on an Object","text":"<p>Objects can have a special type of property, called a method.</p> <p>Methods are properties that are [[7. Function|functions]]. This adds different behavior to an object. Here is the <code>duck</code> example with a method:</p> <pre><code>let duck = {\n  name: \"Aflac\",\n  numLegs: 2,\n  sayName: function() {return \"The name of this duck is \" + duck.name + \".\";}\n};\nduck.sayName();\n</code></pre> <p>The example adds the <code>sayName</code> method, which is a function that returns a sentence giving the name of the <code>duck</code>. Notice that the method accessed the <code>name</code> property in the return statement using <code>duck.name</code>. The next challenge will cover another way to do this.</p>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/1.%20JavaScript%20Object/#make-code-more-reusable-with-the-this-keyword","title":"Make Code More Reusable with the this Keyword","text":"<p>The last challenge introduced a method to the <code>duck</code> object. It used <code>duck.name</code> dot notation to access the value for the <code>name</code> property within the return statement:</p> <pre><code>sayName: function() {return \"The name of this duck is \" + duck.name + \".\";}\n</code></pre> <p>While this is a valid way to access the object's property, there is a pitfall here. If the variable name changes, any code referencing the original name would need to be updated as well. In a short object definition, it isn't a problem, but if an object has many references to its properties there is a greater chance for error.</p> <p>A way to avoid these issues is with the <code>this</code> keyword:</p> <pre><code>let duck = {\n  name: \"Aflac\",\n  numLegs: 2,\n  sayName: function() {return \"The name of this duck is \" + this.name + \".\";}\n};\n</code></pre> <p><code>this</code> is a deep topic, and the above example is only one way to use it. In the current context, <code>this</code> refers to the object that the method is associated with: <code>duck</code>. If the object's name is changed to <code>mallard</code>, it is not necessary to find all the references to <code>duck</code> in the code. It makes the code reusable and easier to read.</p>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/1.%20JavaScript%20Object/#instanceof","title":"instanceof","text":"<p>Anytime a constructor function creates a new object, that object is said to be an instanceof its constructor. JavaScript gives a convenient way to verify this with the <code>instanceof</code>operator. <code>instanceof</code> allows you to compare an object to a constructor, returning <code>true</code>or <code>false</code> based on whether or not that object was created with the constructor. Here's an example:</p> <pre><code>let Bird = function(name, color) {\n  this.name = name;\n  this.color = color;\n  this.numLegs = 2;\n}\n\nlet crow = new Bird(\"Alexis\", \"black\");\n\ncrow instanceof Bird;\n</code></pre> <p>This <code>instanceof</code> method would return <code>true</code>.</p> <p>If an object is created without using a constructor, <code>instanceof</code> will verify that it is not an instance of that constructor:</p> <pre><code>let canary = {\n  name: \"Mildred\",\n  color: \"Yellow\",\n  numLegs: 2\n};\n\ncanary instanceof Bird;\n</code></pre> <p>This <code>instanceof</code> method would return <code>false</code>.</p>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/1.%20JavaScript%20Object/#constructor-property","title":"Constructor Property","text":"<p>There is a special <code>constructor</code> property located on the object instances <code>duck</code> and <code>beagle</code> that were created in the previous challenges:</p> <pre><code>let duck = new Bird();\nlet beagle = new Dog();\n\nconsole.log(duck.constructor === Bird); \nconsole.log(beagle.constructor === Dog);\n</code></pre> <p>Both of these <code>console.log</code> calls would display <code>true</code> in the console.</p> <p>Note that the <code>constructor</code> property is a reference to the constructor function that created the instance. The advantage of the <code>constructor</code> property is that it's possible to check for this property to find out what kind of object it is. Here's an example of how this could be used:</p> <pre><code>function joinBirdFraternity(candidate) {\n  if (candidate.constructor === Bird) {\n    return true;\n  } else {\n    return false;\n  }\n}\n</code></pre> <p>Note: Since the <code>constructor</code> property can be overwritten (which will be covered in the next two challenges) it\u2019s generally better to use the <code>instanceof</code> method to check the type of an object. To fix it, whenever a prototype is manually set to a new object, remember to define the <code>constructor</code> property:</p> <pre><code>Bird.prototype = {\n  constructor: Bird,\n  numLegs: 2,\n  eat: function() {\n    console.log(\"nom nom nom\");\n  },\n  describe: function() {\n    console.log(\"My name is \" + this.name); \n  }\n};\n</code></pre>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/2.%20Prtotype/","title":"Define a [[10. Constructor Function|Constructor]] Function","text":"<p>Constructors are [[7. Function|functions]] that create new objects. They define properties and behaviors that will belong to the new object. Think of them as a blueprint for the creation of new objects.</p> <p>Here is an example of a constructor:</p> <pre><code>function Bird() {\n  this.name = \"Albert\";\n  this.color = \"blue\";\n  this.numLegs = 2;\n}\n</code></pre> <p>This constructor defines a <code>Bird</code> object with properties <code>name</code>, <code>color</code>, and <code>numLegs</code> set to Albert, blue, and 2, respectively. Constructors follow a few conventions:</p> <ul> <li>Constructors are defined with a capitalized name to [[distinguish]] them from other [[7. Function|functions]] that are not <code>constructors</code>.</li> <li>Constructors use the keyword <code>this</code> to set properties of the object they will create. Inside the constructor, <code>this</code> refers to the new object it will create.</li> <li>Constructors define properties and behaviors instead of returning a value as other [[7. Function|functions]] might.</li> </ul>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/2.%20Prtotype/#use-a-constructor-to-create-objects","title":"Use a Constructor to Create Objects","text":"<pre><code>function Bird() {\n  this.name = \"Albert\";\n  this.color  = \"blue\";\n  this.numLegs = 2;\n}\n\nlet blueBird = new Bird();\n</code></pre> <p>NOTE: <code>this</code> inside the constructor always refers to the object being created.</p> <p>Notice that the <code>new</code> operator is used when calling a constructor. This tells JavaScript to create a new instance of <code>Bird</code> called <code>blueBird</code>. Without the <code>new</code> operator, <code>this</code> inside the constructor would not point to the newly created object, giving unexpected results. Now <code>blueBird</code> has all the properties defined inside the <code>Bird</code> constructor:</p>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/2.%20Prtotype/#extend-constructors-to-receive-arguments","title":"Extend Constructors to Receive Arguments","text":"<p>Suppose you were writing a program to keep track of hundreds or even thousands of different birds in an aviary. It would take a lot of time to create all the birds, then change the properties to different values for every one. To more easily create different <code>Bird</code>objects, you can design your Bird constructor to accept parameters:</p> <pre><code>function Bird(name, color) {\n  this.name = name;\n  this.color = color;\n  this.numLegs = 2;\n}\n</code></pre> <p>Then pass in the values as arguments to define each unique bird into the <code>Bird</code>constructor: <code>let cardinal = new Bird(\"Bruce\", \"red\");</code> This gives a new instance of <code>Bird</code> with <code>name</code> and <code>color</code> properties set to <code>Bruce</code> and <code>red</code>, respectively. The <code>numLegs</code> property is still set to 2. The <code>cardinal</code> has these properties:</p> <pre><code>cardinal.name\ncardinal.color\ncardinal.numLegs\n</code></pre> <p>The constructor is more flexible. It's now possible to define the properties for each <code>Bird</code>at the time it is created, which is one way that JavaScript constructors are so useful. They group objects together based on shared characteristics and behavior and define a blueprint that automates their creation.</p>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/2.%20Prtotype/#prototype-properties","title":"Prototype Properties","text":"<p>This may not be an issue when there are only two instances, but imagine if there are millions of instances. That would be a lot of duplicated variables.</p> <p>A better way is to use the <code>prototype</code> of <code>Bird</code>. Properties in the <code>prototype</code> are shared among ALL instances of <code>Bird</code>. Here's how to add <code>numLegs</code> to the <code>Bird prototype</code>:</p> <pre><code>Bird.prototype.numLegs = 2;\n</code></pre> <p>Now all instances of <code>Bird</code> have the <code>numLegs</code> property.</p> <pre><code>console.log(duck.numLegs);\nconsole.log(canary.numLegs);\n</code></pre> <p>Since all instances automatically have the properties on the <code>prototype</code>, think of a <code>prototype</code> as a \"recipe\" for creating objects. Note that the <code>prototype</code> for <code>duck</code> and <code>canary</code> is part of the <code>Bird</code> constructor as <code>Bird.prototype</code>. Nearly every object in JavaScript has a <code>prototype</code> property which is part of the constructor function that created it.</p>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/2.%20Prtotype/#change-the-prototype-to-a-new-object","title":"Change the Prototype to a New Object","text":"<p>This becomes tedious after more than a few properties.</p> <pre><code>Bird.prototype.eat = function() {\n  console.log(\"nom nom nom\");\n}\n\nBird.prototype.describe = function() {\n  console.log(\"My name is \" + this.name);\n}\n</code></pre> <p>A more efficient way is to set the <code>prototype</code> to a new object that already contains the properties. This way, the properties are added all at once:</p> <pre><code>Bird.prototype = {\n  numLegs: 2, \n  eat: function() {\n    console.log(\"nom nom nom\");\n  },\n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};\n</code></pre>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/2.%20Prtotype/#use-inheritance","title":"Use Inheritance","text":"<p>There's a principle in programming called Don't Repeat Yourself (DRY). The reason repeated code is a problem is because any change requires fixing code in multiple places. This usually means more work for programmers and more room for errors.</p> <p>Notice in the example below that the <code>describe</code> method is shared by <code>Bird</code> and <code>Dog</code>:</p> <pre><code>Bird.prototype = {\n  constructor: Bird,\n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};\n\nDog.prototype = {\n  constructor: Dog,\n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};\n</code></pre> <p>The <code>describe</code> method is repeated in two places. The code can be edited to follow the DRY principle by creating a <code>supertype</code> (or parent) called <code>Animal</code>:</p> <pre><code>function Animal() { };\n\nAnimal.prototype = {\n  constructor: Animal, \n  describe: function() {\n    console.log(\"My name is \" + this.name);\n  }\n};\n</code></pre> <p>Since <code>Animal</code> includes the <code>describe</code> method, you can remove it from <code>Bird</code> and <code>Dog</code>:</p> <pre><code>Bird.prototype = {\n  constructor: Bird\n};\n\nDog.prototype = {\n  constructor: Dog\n};\n</code></pre>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/2.%20Prtotype/#inherit-behaviors-from-a-supertype","title":"Inherit Behaviors from a Supertype","text":"<p>To reuse the methods of <code>Animal</code> inside <code>Bird</code>and <code>Dog</code> without defining them again. It uses a technique called inheritance. This challenge covers the first step: make an instance of the <code>supertype</code> (or parent). You already know one way to create an instance of <code>Animal</code> using the <code>new</code> operator:</p> <pre><code>let animal = new Animal();\n</code></pre> <p>There are some disadvantages when using this syntax for inheritance, which are too complex for the scope of this challenge. Instead, here's an alternative approach without those disadvantages:</p> <pre><code>let animal = Object.create(Animal.prototype);\n</code></pre> <p><code>Object.create(obj)</code> creates a new object, and sets <code>obj</code> as the new object's <code>prototype</code>. Recall that the <code>prototype</code> is like the \"recipe\" for creating an object. By setting the <code>prototype</code> of <code>animal</code> to be the <code>prototype</code> of <code>Animal</code>, you are effectively giving the <code>animal</code> instance the same \"recipe\" as any other instance of <code>Animal</code>.</p>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/2.%20Prtotype/#set-the-childs-prototype","title":"Set the Child's Prototype","text":"<p>set the <code>prototype</code> of the subtype (or child)\u2014in this case, <code>Bird</code>\u2014to be an instance of <code>Animal</code>.</p> <pre><code>Bird.prototype = Object.create(Animal.prototype);\n\nlet duck = new Bird(\"Donald\");\nduck.eat();\n</code></pre> <p>Remember that the <code>prototype</code> is like the \"recipe\" for creating an object. In a way, the recipe for <code>Bird</code> now includes all the key \"ingredients\" from <code>Animal</code>. <code>duck</code> inherits all of <code>Animal</code>'s properties, including the <code>eat</code> method.</p>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/2.%20Prtotype/#reset-an-inherited-add-methods","title":"Reset an Inherited &amp; Add Methods","text":"<p>When an object inherits its <code>prototype</code> from another object, it also inherits the supertype's constructor property. Here's an example:</p> <pre><code>function Bird() { }\nBird.prototype = Object.create(Animal.prototype);\nlet duck = new Bird();\nduck.constructor\n</code></pre> <p>But <code>duck</code> and all instances of <code>Bird</code> should show that they were constructed by <code>Bird</code>and not <code>Animal</code>. To do so, we can manually set the constructor property of <code>Bird</code> to the <code>Bird</code> object:</p> <pre><code>Bird.prototype.constructor = Bird;\nduck.constructor\n</code></pre>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/2.%20Prtotype/#add-methods","title":"Add Methods","text":"<p>A constructor function that inherits its <code>prototype</code> object from a supertype constructor function can still have its own methods in addition to inherited methods.</p> <p>For example, <code>Bird</code> is a constructor that inherits its <code>prototype</code> from <code>Animal</code>:</p> <pre><code>function Animal() { }\nAnimal.prototype.eat = function() {\n  console.log(\"nom nom nom\");\n};\nfunction Bird() { }\nBird.prototype = Object.create(Animal.prototype);\nBird.prototype.constructor = Bird;\n</code></pre> <p>In addition to what is inherited from <code>Animal</code>, you want to add behavior that is unique to <code>Bird</code> objects. Here, <code>Bird</code> will get a <code>fly()</code> function. Functions are added to <code>Bird's``prototype</code> the same way as any constructor function:</p> <pre><code>Bird.prototype.fly = function() {\n  console.log(\"I'm flying!\");\n};\n</code></pre> <p>Now instances of <code>Bird</code> will have both <code>eat()</code> and <code>fly()</code> methods:</p> <pre><code>let duck = new Bird();\nduck.eat();\nduck.fly();\n</code></pre> <p><code>duck.eat()</code> would display the string <code>nom nom nom</code> in the console, and <code>duck.fly()</code>would display the string <code>I'm flying!</code>.</p>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/2.%20Prtotype/#override-inherited-methods","title":"Override Inherited Methods","text":"<p>It's possible to override an inherited method. It's done the same way - by adding a method to <code>ChildObject.prototype</code> using the same method name as the one to override. Here;s an example of <code>Bird</code> overriding the <code>eat()</code> method inherited from <code>Animal</code>:</p> <pre><code>function Animail(){ };\nAnimal.prototype.eat = function(){\n    return \"nom nom nom\";\n};\nfunction Bird(){ };\n\nBird.prototype = Object.create(Animal.prototype);\n\nBird.prototype.eat = function() {\n    return \"peck peck peck\";\n}\n</code></pre> <p>If we have an instance <code>let duck = new Bird();</code> and we call <code>duck.eat()</code>, this is how JavaScript looks for method on the <code>prototype</code> chain of <code>duck</code>:</p> <ol> <li><code>duck</code> =&gt; is <code>eat()</code> defined here? =&gt; No.</li> <li><code>Bird</code> =&gt; is <code>eat()</code> defined here? =&gt; Yes. Execute it and stop searching.</li> <li><code>Animal</code> =&gt; <code>eat()</code> is defined, but JavaScript stopped searching before reaching this level. </li> </ol>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/2.%20Prtotype/#understand-prototype","title":"Understand Prototype","text":""},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/2.%20Prtotype/#inherit-of-prototype","title":"Inherit of Prototype","text":"<p>Just like people inherit genes from their parents, an object inherits its <code>prototype</code>directly from the constructor function that created it. For example, here the <code>Bird</code>constructor creates the <code>duck</code> object:</p> <pre><code>function Bird(name) {\n  this.name = name;\n}\n\nlet duck = new Bird(\"Donald\");\n</code></pre> <p><code>duck</code> inherits its <code>prototype</code> from the <code>Bird</code> constructor function. You can show this relationship with the <code>isPrototypeOf</code> method:</p> <pre><code>Bird.prototype.isPrototypeOf(duck);\n</code></pre> <p>This would return <code>true</code>.</p>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/2.%20Prtotype/#prototype-chain","title":"Prototype chain","text":"<p>All objects in javaScript have a <code>prototype</code>. Also, an object's prototype itself is an object.</p> <pre><code>function Bird(name) {\n  this.name = name;\n}\n\ntypeof Bird.prototype;\n</code></pre> <p>Because a <code>prototype</code> is an object, a <code>prototype</code> can have its own <code>prototype</code>! In this case, the <code>prototype</code> of <code>Bird.prototype</code> is <code>Object.prototype</code>:</p> <pre><code>Object.prototype.isPrototypeOf(Bird.prototype);\n</code></pre> <p>How is this useful? You may recall the <code>hasOwnProperty</code> method from a previous challenge:</p> <pre><code>let duck = new Bird(\"Donald\");\nduck.hasOwnProperty(\"name\");\n</code></pre> <p>The <code>hasOwnProperty</code> method is defined in <code>Object.prototype</code>, which can be accessed by <code>Bird.prototype</code>, which can then be accessed by <code>duck</code>. This is an example of the <code>prototype</code> chain. In this <code>prototype</code> chain, <code>Bird</code> is the <code>supertype</code> for <code>duck</code>, while <code>duck</code> is the <code>subtype</code>. <code>Object</code> is a <code>supertype</code> for both <code>Bird</code> and <code>duck</code>. <code>Object</code> is a <code>supertype</code> for all objects in JavaScript. Therefore, any object can use the <code>hasOwnProperty</code> method.</p> <pre><code>function Dog(name) {\n    this.name = name;\n}\n    let beagle = new Dog(\"Snoopy\");\n    Dog.prototype.isPrototypeOf(beagle); // yields true\n    Object.prototype.isPrototypeOf(Dog.prototype); //yields true\n</code></pre>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/3.%20IIFE%20%28%E5%8D%95%E4%BE%8B%29/","title":"Immediately Invoked Function Expression (IIFE)","text":"<p>A common pattern in JavaScript to execute a function as soon as it is declared:</p> <pre><code>(function() {\n    console.log(\"Chirp, chirp!\");\n})();\n</code></pre> <p>This is an anonymous function expression that executes right away, and output <code>Chirp, chirp!</code> immediately.</p> <p>Note that the function has no name and is not stored in a variable. The two parentheses() at the end of the function expression cause it to be immediately execute or invoked. This pattern is known as an immediately invoked function expression or IIFE.</p>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/3.%20IIFE%20%28%E5%8D%95%E4%BE%8B%29/#use-an-iife-to-create-a-module","title":"Use an IIFE to Create a Module","text":"<p>An Immediately Invoked Function expression (IIFE) us often to group related functionality into a single object or <code>module</code>. For example\uff0c</p> <pre><code>function glideMixin(obj) {\n  obj.glide = function() {\n    console.log(\"Gliding on the water\");\n  };\n}\nfunction flyMixin(obj) {\n  obj.fly = function() {\n    console.log(\"Flying, wooosh!\");\n  };\n}\n</code></pre> <p>We can group these mixins into a module as follows:</p> <pre><code>let motionModule = (function (){\n    return {\n        glideMixin: function(obj){\n            obj.glide = function(){\n                console.log(\"Gliding on the water\");\n            }\n        }\n        flyMixin: function(obj){\n            obj.fly = function(){\n                console.log(\"Flying, wooosh!\")\n            }\n        }\n    }\n})();\n</code></pre> <p>Now, we have an IIFE that return an object <code>motionModule</code>. This returned object contains all of the mixin behaviors as properties of the object. The advantage of the module patterns is that all of the motion behaviros can be packaged into a single object that can then be used by other parts of our code. Here is an example using it:</p> <pre><code>motionModule.glideMixin(duck);\nduck.glide();\n</code></pre>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/3.%20Mixin%28%E7%BB%A7%E6%89%BF%29%20and%20Closure%28private%29/","title":"Mixin -&gt; Add Common Behavior Between Unrelated Objects","text":"<p>For unrelated objects, it's better to use mixins, A mixin allows other object to use a collection of functions.</p> <pre><code>let flyMixin = function(obj) {\n    obj.fly = function() {\n        console.log(\"Flying!\");\n    }\n};\n\nlet bird = {\n    name: \"Donald\",\n    numLegs: 2; \n}\n\nflyMixin(bird);\nbird.fly();\n</code></pre> <p>The <code>flyMixin</code> take any object and give it the fly method.  Here <code>bird</code> are passed into <code>flyMixin</code>, which then assigns the <code>fly</code> function to each object. Now <code>bird</code> can both fly.</p>"},{"location":"Language/JavaScript/7.%20Object%20Oriented%20Programming/3.%20Mixin%28%E7%BB%A7%E6%89%BF%29%20and%20Closure%28private%29/#closure-protect-properties-within-an-object-from-being-modified-externally","title":"Closure -&gt; Protect Properties Within an Object from being Modified Externally","text":"<p>The simplest way to make the public property private is by creating a variable within the constructor function. This changes the scope of that variable to be within the constructor function versus available globally. This way, the variable can only be accessed and changed by methods also within the constructor function.</p> <pre><code>function Bird(){\n    let hatchedEgg = 10;\n    this.getHatchedWEggCount = function() {\n        return hatchedEgg;\n    };\n}\nlet ducky = new Bird();\nducky.getHatchedEggCount();\n</code></pre> <p>Here <code>getHatchedEggCount</code> is a privileged method, because it has access to the private variable hatchedEgg. This is possible because <code>hatchedEgg</code> is declared in the same context as <code>getHatchedEggCount</code>. In JavaScript, a function always has access to the context in wichi it was created. This called <code>closure</code>.</p>"},{"location":"Language/JavaScript/8.%20Functional%20Programming/1.%20Functional%20Programming/","title":"Functional Programming","text":"<p>Functional programming is a style of programming where solutions are simple, isolated functions, without any side effects outside of the function scope: <code>INPUT -&gt; PROCESS -&gt; OUTPUT</code></p> <p>Functional programming is about:</p> <ol> <li>Isolated functions - there is no dependence on the state of the program, which includes global variables that are subject to change.</li> <li>Pure functions - the same input always gives the same output</li> <li>Functions with limited side effects - any changes, or mutations, to the state of the program outside the function are carefully controlled.</li> </ol>"},{"location":"Language/JavaScript/8.%20Functional%20Programming/1.%20Functional%20Programming/#understand-functional-programming-terminology","title":"Understand Functional Programming [[Terminology]]","text":"<p>The FCC Team had a mood swing and now wants two types of tea: green tea and black tea. General Fact: Client mood swings are pretty common.</p> <p>With that information, we'll need to revisit the <code>getTea</code> function from last challenge to handle various tea requests. We can modify <code>getTea</code> to accept a function as a parameter to be able to change the type of tea it prepares. This makes <code>getTea</code> more flexible, and gives the programmer more control when client requests change.</p> <p>But first, let's cover some functional terminology:</p> <p>Callbacks are the functions that are slipped or passed into another to decide the invocation of that function. We may seen them passed to other methods, for example in <code>filter</code>, the callback function tells JavaScript the criteria for how to filter an array.</p> <p>Functions that can be assigned to a variable, passed into another function, or returned from another function just like any other normal value, are called first class functions. In JavaScript, all functions are first class functions.</p> <p>The functions that take a function as an argument, or return a function as a return value are called higher order functions.</p> <p>When functions are passed in to or returned from another function, then those functions which were passed in or returned can be called a lambda.</p>"},{"location":"Language/JavaScript/8.%20Functional%20Programming/1.%20Functional%20Programming/#understand-the-hazards-of-using-imperative-code","title":"Understand the Hazards of Using Imperative Code","text":"<p>Functional programming is a good habit. It keeps your code easy to manage, and saves you from sneaky bugs. But before we get there, let's look at an imperative approach to programming to highlight where you may have issues. </p> <p>In English (and many other languages), the imperative tense is used to give commands. Similarly, an imperative style in programming is one that gives the computer a set of statements to perform a task.</p> <p>Often the statements change the state of the program, like updating global variables. A classic example is writing a <code>for</code> loop that gives exact directions to iterate over the indices of an array.</p> <p>In contrast, functional programming is a form of declarative programming. You tell the computer what you want done by calling a method or function.</p> <p>JavaScript offers many predefined methods that handle common tasks so you don't need to write out how the computer should perform them. For example, instead of using the <code>for</code> loop mentioned above, you could call the <code>map</code> method which handles the details of iterating over an array. This helps to avoid semantic errors, like the \"Off By One Errors\" that were covered in the Debugging section.</p>"},{"location":"Language/JavaScript/8.%20Functional%20Programming/1.%20Functional%20Programming/#avoid-mutations-and-side-effects-using-functional-programming","title":"Avoid Mutations and Side Effects Using Functional Programming","text":"<p>Unfortunately, <code>splice</code> changes the original array it is called on, so the second call to it used a modified array, and gave unexpected results.</p> <p>This is a small example of a much larger pattern - you call a function on a variable, array, or an object, and the function changes the variable or something in the object.</p> <p>One of the core principles of functional programming is to not change things. Changes lead to bugs. It's easier to prevent bugs knowing that your functions don't change anything, including the function arguments or any global variable.</p> <p>The previous example didn't have any complicated operations but the <code>splice</code> method changed the original array, and resulted in a bug.</p> <p>Recall that in functional programming, changing or altering things is called mutation, and the outcome is called a side effect. A function, ideally, should be a pure function, meaning that it does not cause any side effects.</p>"},{"location":"Language/JavaScript/8.%20Functional%20Programming/1.%20Functional%20Programming/#pass-arguments-to-avoid-external-dependence-in-a-function","title":"Pass Arguments to Avoid External Dependence in a Function","text":"<p>Another principle of functional programming is to always declare your dependencies explicitly. This means if a function depends on a variable or object being present, then pass that variable or object directly into the function as an argument.</p> <p>There are several good consequences from this principle. The function is easier to test, you know exactly what input it takes, and it won't depend on anything else in your program.</p> <p>This can give you more confidence when you alter, remove, or add new code. You would know what you can or cannot change and you can see where the potential traps are.</p> <p>Finally, the function would always produce the same output for the same set of inputs, no matter what part of the code executes it.</p>"},{"location":"Language/JavaScript/8.%20Functional%20Programming/1.%20Functional%20Programming/#refactor-global-variables-out-of-functions","title":"Refactor Global Variables Out of Functions","text":"<p>So far, we have seen two distinct principles for functional programming:</p> <ol> <li> <p>Don't alter a variable or object - create new variables and objects and return them if need be from a function. Hint: using something like <code>const newArr = arrVar</code>, where <code>arrVar</code> is an array will simply create a reference to the existing variable and not a copy. So changing a value in <code>newArr</code> would change the value in <code>arrVar</code>.</p> </li> <li> <p>Declare function parameters - any computation inside a function depends only on the arguments passed to the function, and not on any global object or variable.</p> </li> </ol> <p>Adding one to a number is not very exciting, but we can apply these principles when working with arrays or more complex objects.</p>"},{"location":"Language/Web/Applied%20Accessibility/","title":"[[Applied Accessibility]]","text":"<p>In web development, accessibility refer to web content and a user interface that can be understood, navigated, and interacted with by a broad audience. This include people with visual, auditory, mobility, or cognitive disabilities.</p>"},{"location":"Language/Web/Applied%20Accessibility/#text-alternative-to-image","title":"Text Alternative to Image","text":"<p>Remember good <code>alt</code> text provides the reader a brief description of the image. We should always include an <code>alt</code> attribute on our image.</p> <pre><code>&lt;img src=\"logo.png\" alt=\"company logo\"&gt;\n</code></pre>"},{"location":"Language/Web/Applied%20Accessibility/#know-when-alt-text-should-be-left-blank","title":"Know When Alt Text Should be Left Blank","text":"<p>However, sometimes images are grouped with a caption already describing them, or are used for decoration only. In these cases, <code>alt</code> text may seem redundant or unnecessary. So when an image is already explained with text content or does not add meaning to page, the <code>img</code> still need an <code>alt</code> attribute, but it can be set to an empty string. Here is an example:</p> <pre><code>&lt;img src=\"product.png\" alt=\"\"&gt;\n</code></pre>"},{"location":"Language/Web/Applied%20Accessibility/#use-headings-to-show-hierarchical-relationships-of-content","title":"Use Headings to Show Hierarchical Relationships of Content","text":"<p>Heading (<code>h1</code> to <code>h6</code> elements) are workhorse tags that help provide structure and labeling to our content. Screen reader can beset to read only the headings on a pages so the user gets a summary. This means it's important for the heading tags in your markup to have semantic meaning and relate to each other, not be picked merely for their size value.</p> <p>Semantic meaning means that the tag you use around content indicates the type  of information it contains.</p> <p>Headings with equal (or higher) rank start new implied sections, headings with lower rank start subsections of the previous one.</p> <p>As an example, a page with an <code>h2</code> element followed by several subsections labeled with <code>h4</code> elements would confuse a screen reader user. With six choices, it's tempting to use a tag because it looks better in a browser, but you can use CSS to edit the relative sizing.</p> <p>One final point, each page should always have one (and only one) <code>h1</code> element, which is the main subject of your content. This and the other headings are used in part by search engines to understand the topic of the page.</p>"},{"location":"Language/Web/Applied%20Accessibility/#jump-straight-to-the-content-using-the-main-element","title":"Jump Straight to the Content Using the main Element","text":"<p>HTML5 introduced several new element that give developers more options while also incorporating accessibility features. These tags include <code>main, header, footer, nav, article and section</code> among other.</p> <p>By default, a browser renders these elements similar to the humble <code>div</code>. However, using them where appropriate gives additional meaning to our makeup. The tag name alone can indicate the type of information it contains, which adds semantic meaning to that content.</p> <p>The <code>main</code> element is used to wrap the main content, and there should be only one per page. It's meant to surround the information related to our page's central topic. It's not meant to include items that repeat across pages, like navigation links or banners.</p> <p>The <code>main</code> tag also has an embedded landmark feature that assistive technology can use to navigate to the main content quickly (things like \"jump to Main Content\" Link).</p>"},{"location":"Language/Web/Applied%20Accessibility/#wrap-content-in-the-article-element","title":"Wrap content in the article element","text":"<p><code>article</code> is another one of the new HTML5 elements that add semantic meaning to your markup. <code>article</code> is sectioning element and is used to wrap independent, self-contained content. The tag works well with blog entires, forum posts, or news articles. For example:</p> <pre><code>&lt;article&gt;\n    &lt;h2&gt; Hello &lt;/h2&gt;\n    &lt;p&gt; Content &lt;/p&gt;\n&lt;/article&gt;\n</code></pre> <p><code>section</code> element is also new with HTML5, and has a slightly different semantic meaning than <code>article</code>. An <code>article</code> is for standalone content, and a <code>section</code> is for grouping thematically related content. For example, if a book is the <code>article</code>, then each chapter is a <code>section</code>. When there's no relationship between groups of content, then use a <code>div</code>.</p>"},{"location":"Language/Web/Applied%20Accessibility/#make-screen-reader-navigation-easier-with-header-landmark","title":"Make Screen Reader Navigation Easier with header Landmark","text":"<p>The <code>header</code> tag is used to wrap introductory information or navigation links for its parent tag and works well around content that's repeated at the top on multiple pages. <code>header</code> also have embedded landmark feature. For example:</p> <pre><code>&lt;header&gt; \n    &lt;h1&gt; Hello &lt;/h1&gt;\n&lt;/header&gt;\n</code></pre>"},{"location":"Language/Web/Applied%20Accessibility/#navigation","title":"Navigation","text":"<p>The <code>nav</code> tag is meant to wrap around the main navigation links in our page. It also have embedded landmark feature. For example:</p> <pre><code>&lt;header&gt;\n    &lt;ul&gt;\n        &lt;li&gt;&lt;a href=\"#a\"&gt;a&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"#b\"&gt;a&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/header&gt;\n</code></pre>"},{"location":"Language/Web/Applied%20Accessibility/#footer","title":"Footer","text":"<p>The <code>footer</code> tag is meant to wrap around the content of copyright information or links to related document that usually sit at the bottom of a page. It also have embedded landmark feature. For example:</p> <pre><code>&lt;footer&gt;\n    &amp;copy; 2021 Hello\n&lt;footer&gt;\n</code></pre>"},{"location":"Language/Web/Applied%20Accessibility/#audio","title":"Audio","text":"<p>HTML5's <code>audio</code> element gives semantic meaning when it wraps sound or audio stream content in our markup. Audio content also needs a text alternative to be accessible to people who are deaf or hard of hearing. This can be done with nearby text on the page or link to a transcript.</p> <p>The <code>audio</code> element support the <code>controls</code> attribute. This shows the browser default play, pause, and other controls, and supports keyboard functionality. This is a boolean attribute, its presence on the tag turns the setting on.</p> <p>For example:</p> <pre><code>&lt;audio controls&gt;\n    &lt;source src=\"audio/xx.mp3\" type=\"audio/mpeg\"&gt;\n&lt;/audio&gt;\n</code></pre>"},{"location":"Language/Web/Applied%20Accessibility/#figure-element","title":"Figure Element","text":"<p>HTML5's <code>figure</code> element and the related <code>figcaption</code>, used together, these items wrap a visual representation (like an image, digram, or chart) along with its caption. For data visualizations like charts, the caption can be used to briefly note the trends or conclusion for users with visual impairments.</p> <p>For example:</p> <pre><code>&lt;figure&gt;\n    &lt;img src=\"logo.png\" alt=\"company logo\"&gt;\n    &lt;figcaption&gt;\n        Hello World\n    &lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre>"},{"location":"Language/Web/Applied%20Accessibility/#date","title":"Date","text":""},{"location":"Language/Web/Applied%20Accessibility/#date-picker","title":"Date Picker","text":"<p>Form often include the <code>input</code> field, which can be used to create several different form controls. The <code>type</code> attribute on this element indicates what kind of <code>input</code> element will be created.</p> <p>And HMTL5 introduced an option to specify a <code>date</code> field. A data picker shows up in the <code>input</code> field when it's in focus, which makes filling in a form easier for all users.</p> <p>For older browsers, the type will default to <code>text</code>, so it helps to show users the expected data format in the <code>label</code> or <code>placeholder</code> text just in case.</p> <p>Here is an example:</p> <pre><code>&lt;label for=\"input1\"&gt;Enter a date:&lt;/label&gt;\n&lt;input type=\"date\" id=\"input1\" name=\"input1\"&gt;\n</code></pre>"},{"location":"Language/Web/Applied%20Accessibility/#datatime-attribute","title":"Datatime Attribute","text":"<p>HTML5 introduced the <code>time</code> element along with a <code>datatime</code> attribute to standardize times. The <code>time</code> element along with a <code>datatime</code> attribute to standardize times. The <code>time</code> element is an inline element that can wrap a date or time on a page. A <code>datatime</code> attribute holds a valid format of that date. This is the value accessed by assistive devices.</p> <p>Here's an example:</p> <pre><code>&lt;p&gt;Today is &lt;time datetime=\"2013-02-13\"&gt;last Wednesday&lt;/time&gt;. &lt;/p&gt;\n</code></pre>"},{"location":"Language/Web/Applied%20Accessibility/#only-visible-to-a-screen-reader","title":"Only Visible to a Screen Reader","text":"<pre><code>.box {\n    overflow: hidden;\n}\n</code></pre> <p>The following CSS approaches will NOT do the same thing: - <code>display: none</code> or <code>visibility: hidden;</code> hides content for everyone, including screen reader users. - Zero values for pixel sizes, such as <code>width: 0px; height: 0px;</code> remove that element from the flow of our document, meaning screen reader will ignore it.</p>"},{"location":"Language/Web/Applied%20Accessibility/#avoid-colorblindness-issues","title":"Avoid Colorblindness Issues","text":""},{"location":"Language/Web/Applied%20Accessibility/#using-sufficient-contrast","title":"Using Sufficient Contrast","text":"<p>The WCAG-recommended contrast ratio of 4.5:1 applies for color use as well as gray-scale combinations. For exmaple:</p> <pre><code>body {\n    color: hsl(0, 55%, 15%);\n    background-color: hsl(120, 25%, 55%);\n}\n</code></pre>"},{"location":"Language/Web/Applied%20Accessibility/#keyboard-accessibility","title":"Keyboard Accessibility","text":""},{"location":"Language/Web/Applied%20Accessibility/#access-keys","title":"Access Keys","text":"<p>HTML offers the <code>accesskey</code> attribute to specify a shortcut key to activate or bring focus to an element. Adding an <code>accesskey</code> attribute can make navigation more efficient for keyboard users. For example:</p> <pre><code>&lt;button accesskey=\"b\"&gt;Important Button&lt;/button&gt;\n&lt;a href=\"#\" accesskey=\"m\"&gt;ME&lt;/a&gt;\n</code></pre>"},{"location":"Language/Web/Applied%20Accessibility/#tabindex","title":"Tabindex","text":"<p>The HTML <code>tabindex</code> attribute has three distinct functions relating to an element's keyboard focus. When it's on a tag, it indicates that the element can be focused on.  The value (an integer that's positive, negative, or zero) determines the behavior.</p> <p>Certain element, such as links and form controls, automatically receive keyboard focus when a user tabs through a page. It's in the same order as the elements come in the HTML source markup. This same functionality can be given to other elements, such as <code>div</code>, <code>span</code>, and <code>p</code>, by placing a <code>tabindex=\"0\"</code> attribute on them. For example:</p> <pre><code>&lt;div tabindex=\"0\"&gt;I need keyboard focus!&lt;/div&gt;\n</code></pre> <p>![[Pasted image 20220102015514.png]]</p> <p>A negative <code>tabindex</code> value (typically -1) indicates that an element is focusable, but is not reachable by the keyboard.  This method is generally used to bring focus to content programmatically (like when a <code>div</code> used for a pop-up window is activated), and is beyond the scope of these challenges.</p>"},{"location":"Language/Web/Applied%20Visual%20Design/","title":"Visual Balance","text":""},{"location":"Language/Web/Applied%20Visual%20Design/#position","title":"Position","text":"<p>CSS trade each HTML element as its own box, which is usually referred to as the CSS Box Model. Block-level items automatically start on new line (heading, paragraphs, and divs) while inline item sit within surrounding content(images or spans). </p> <p>The default layout of elements in this way is called the normal flow of a document, but CSS offers the <code>position</code> property to override it.</p>"},{"location":"Language/Web/Applied%20Visual%20Design/#relative-postion","title":"Relative Postion","text":"<p>When the position of an element is set to <code>relative</code>, it allows us to specify how CSS should move it relative to its current position in the normal flow of the page. It pair with the CSS offset properties of <code>left</code> or <code>right</code> and <code>top</code> or <code>bottom</code>. These say how many pixels, percentages, or <code>em</code>s to move the item away from where it is normally positioned. For example:</p> <pre><code>p {\n    position: relative;\n    bottom: 10px;\n}\n</code></pre> <p>This example moves the paragraph 10 pixels away from the bottom. *Note: move an element's position to relative does not remove it from the normal flow, so other element around it still behave as if that item were in its default position.</p>"},{"location":"Language/Web/Applied%20Visual%20Design/#absolute-position","title":"Absolute Position","text":"<p>The <code>absolute</code> will lock the element in place relative to its parent container. Unlike the <code>relative</code> position, this removes the element from the normal flow of the document, so surrounding items ignore it.  It pair with the CSS offset properties of <code>left</code> or <code>right</code> and <code>top</code> or <code>bottom</code> to adjust the position.  For example:</p> <pre><code>.box {\n    position: absolute;\n    top: 50px;\n}\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#fixed-position","title":"Fixed Position","text":"<p>The <code>fixed</code> layout scheme is a type of absolute positioning that locks an element relative to the browser windows. Similar to absolute positioning, it's used with the CSS offset properties and also removes the element from the normal flow of the document. Other items no longer \"realize\" where it is positioned. </p> <p>One key different between <code>absolute</code> and <code>fixed</code> position is that an element with a fixed position won't move when the user scrolls. This look like:</p> <pre><code>.NavBar {\n    position: fixed;\n    top: 0px;\n    left: 0px;\n}\n\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#float-property","title":"Float Property","text":"<p>To push elements left or right, we can set <code>float</code> property of an element. Floating elements are removed from the normal flow of a document and pushed to either the <code>left</code> or <code>right</code> of their containing parent element. </p> <p>It's commonly used with the <code>width</code> property to specify how much horizontal space the floated element requires. For example:</p> <pre><code>.Left {\n    float: left;\n    width: 50%;\n}\n\n.right {\n    float: right;\n    width: 40%;\n}\n</code></pre> <p>![[Pasted image 20211231220149.png]]</p>"},{"location":"Language/Web/Applied%20Visual%20Design/#z-index","title":"Z-index","text":"<p>When elements are positioned to overlap. To change the position of overlapping element, we can use <code>z-index</code> property. It can specify the order of how elements are stacked on the top of one another. It must be integer, a higher value for the <code>z-index</code> property of an element move it higher in the stack than those with lower value. For example:</p> <pre><code>.box-a {\n    z-index: 1;\n}\n\n.box-b {\n    z-index: 2;\n}\n</code></pre> <p>Here the <code>box-b</code> will be above of the <code>box-a</code>.</p>"},{"location":"Language/Web/Applied%20Visual%20Design/#size","title":"Size","text":""},{"location":"Language/Web/Applied%20Visual%20Design/#width-property","title":"Width Property","text":"<p>We can specify the width of an element using the <code>width</code> property in CSS. Value can be given in relative length units, such as <code>em</code>; or absolute length unit, such as   <code>px</code>; or as a percentage of its containing parent element. For example:</p> <pre><code>img {\n    width: 200px;\n}\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#height-property","title":"Height Property","text":"<p>We can specify the height of an element using the <code>height</code> property in CSS. It is similar to the <code>width</code> property. For example:</p> <pre><code>img {\n    height: 20px;\n}\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#transform-scale","title":"Transform Scale","text":"<p>To change the scale of an element, CSS has the <code>transform</code> property, along with its <code>scale()</code> function. For example:</p> <pre><code>p {\n    transform: scale(2);\n}\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#transform-skew","title":"Transform Skew","text":"<p>To skews the selected element along its X(horizontal) axis by a given degree by <code>skewX()</code> function from <code>transform</code> property. For example:</p> <pre><code>p {\n    transform: skewX(24deg);\n}\n</code></pre> <p>![[Pasted image 20220101152551.png]]</p> <p>To skews the selected element along its Y(vertical) axis by a given degree by <code>skewY()</code> function from <code>transform</code> property. For example:</p> <pre><code>p {\n    transform: skewY(-10deg);\n}\n</code></pre> <p>![[Pasted image 20220101152836.png]]</p>"},{"location":"Language/Web/Applied%20Visual%20Design/#graphic","title":"Graphic","text":""},{"location":"Language/Web/Applied%20Visual%20Design/#padding-of-an-element","title":"Padding of an Element","text":"<p>HTML elements are essentially little rectangles. There are three important properties control the space that surrounds each HTLM element: <code>padding</code>, <code>border</code>, <code>margin</code>.</p>"},{"location":"Language/Web/Applied%20Visual%20Design/#padding","title":"Padding","text":"<p>An element's <code>padding</code> controls the amount of space between the element's content and its <code>boarder</code>. For example: </p> <pre><code>.blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n}\n</code></pre> <p>![[Pasted image 20211231132250.png]] When we increase the blue box's <code>padding</code>, it will increase the distance(<code>padding</code>) between the text and the border around it. For example:</p> <pre><code>.blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 5px;\n}\n</code></pre> <p>![[Pasted image 20211231132615.png]]</p>"},{"location":"Language/Web/Applied%20Visual%20Design/#different-padding-to-each-side-of-an-element","title":"Different Padding to Each Side of an Element","text":"<p>If we want to customize an element so that is has different amount of <code>padding</code> on each of its sides. CSS allow us to control the <code>padding</code> of all four individual sides of an element with the <code>padding-top</code>, <code>padding-bottom</code>, <code>padding-left</code> and <code>padding-right</code> properties. For example:</p> <pre><code>.blue-box {\n    background-color: blue;\n    color: #fff;\n    padding-top: 40px;\n    padding-left: 40px;\n    padding-right: 20px;\n    padding_bottom: 20px;\n}\n</code></pre> <p>![[Pasted image 20211231134823.png]]</p>"},{"location":"Language/Web/Applied%20Visual%20Design/#use-clockwise-notation","title":"Use Clockwise Notation","text":"<p>Instead of specifying and element's <code>padding-top</code>, <code>padding-bottom</code>, <code>padding-left</code> and <code>padding-right</code> properties individually, we can specify them all in one line, like this:</p> <pre><code>.blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 10px 20px 10px 20px\n}\n</code></pre> <p>The four values work like a clock: top, right, bottom, left.</p>"},{"location":"Language/Web/Applied%20Visual%20Design/#margin","title":"Margin","text":"<p>An element's <code>margin</code> controls the amount of space between elemen's <code>border</code> and surrounding elements. For example:</p> <pre><code>.blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n    margin: 10px;\n}\n</code></pre> <p>![[Pasted image 20211231132832.png]] When we increase the blue box's <code>margin</code>, it will increase the distance between its border and surrounding elements. For example:</p> <pre><code>.blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n    margin: 30px;\n}\n</code></pre> <p>![[Pasted image 20211231133112.png]]</p>"},{"location":"Language/Web/Applied%20Visual%20Design/#negative-margin","title":"Negative Margin","text":"<p>If we want an element grow larger, we can set an element's margin to a negative value. For example:</p> <pre><code>.blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n    margin: -15px;\n}   \n</code></pre> <p>![[Pasted image 20211231134112.png]]</p>"},{"location":"Language/Web/Applied%20Visual%20Design/#different-margin-to-each-side-of-an-element","title":"Different Margin to Each Side of an Element","text":"<p>If we want to customize an element so that is has different amount of <code>margin</code> on each of its side. CSS allow us to control <code>margin</code> of  all four individual sides of an element with the <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code> and <code>margin-left</code> properties. For example: </p> <pre><code>.blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 20px;\n    margin-left: 40px;\n    margin-bottom: 20px;\n    margin-top: 40px;\n    margin-right: 20px;\n}\n</code></pre> <p>![[Pasted image 20211231135428.png]]</p>"},{"location":"Language/Web/Applied%20Visual%20Design/#use-clockwise-notation_1","title":"Use Clockwise Notation","text":"<p>Instead of specifying an element's <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code> and <code>margin-left</code> properties individually, we can specify them all in one line, like this:</p> <pre><code>.blue-box {\n    background-color: blue;\n    color: #fff;\n    margin: 10px 20px 10px 20px\n}\n</code></pre> <p>The four values work like a clock: top, right, bottom, left.</p>"},{"location":"Language/Web/Applied%20Visual%20Design/#center-an-element-horizontally","title":"Center an Element Horizontally","text":"<p>To center a block element horizontally, one way is to set its <code>margin to a value of auto</code>. </p> <p>This method work for image, too. Image are inline elements by default, but can be changed to block elements when we set the <code>display</code> property to <code>block</code>.</p> <p>For example:</p> <pre><code>div {\n    margin: auto;\n}\n\nimg {\n    display: block;\n    margin: auto;\n}\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#text","title":"Text","text":""},{"location":"Language/Web/Applied%20Visual%20Design/#text-align-property","title":"Text-align Property","text":"<p>Text is often a large part of web content. CSS has several options for how to align it with the <code>text-align</code> property. </p> <p><code>text-align: justify;</code> spaces the text so that each line has equal width; <code>text-align: center;</code> centers the text; <code>text-align: right;</code> right-aligns the text; <code>text-align: left;</code> (the default) left-aligns the text.</p> <pre><code>p {\n    text-align: justify;\n}\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#text-bold","title":"Text Bold","text":"<p>To make text bold, we can use the <code>strong</code> tag. With the <code>strong</code> tag, the browser applies the CSS of <code>font-weight: bold;</code> to the element. For example:</p> <pre><code>&lt;p&gt;Hello &lt;strong&gt;World&lt;/strong&gt;&lt;/p&gt;\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#underline-text","title":"Underline Text","text":"<p>To underline text, we can use the <code>u</code> tag. With <code>u</code> tag, the browser applies the the CSS of <code>text-decoration: underline;</code> to the element. For example:</p> <pre><code>&lt;p&gt;Hello &lt;u&gt;World&lt;/u&gt;&lt;/p&gt;\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#italicize-text","title":"Italicize Text","text":"<p>To emphasize text, we can use the <code>em</code> tag. This display text as italicized, as the browser applies the CSS of <code>font-style: italic;</code> to the element. For example:</p> <pre><code>&lt;p&gt;Hello &lt;em&gt;World&lt;/em&gt;&lt;/p&gt;\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#strikethrough-text","title":"Strikethrough Text","text":"<p>To strikethrough text (a horizontal line cuts across the characters), we can use <code>s</code> tag. It shows a section of text is no longer valid.With <code>s</code> tag the browser applies the CSS of <code>text-decoration: line-through;</code> to the element. For example:</p> <pre><code>&lt;p&gt;Hello &lt;s&gt;World&lt;/s&gt;&lt;/p&gt;\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#text-transform","title":"Text Transform","text":"<p>tThe <code>text-transform</code> property in CSS is used to change the appearance of text. Which is convenient way to make sure text on a webpage appears consistently, without haveing to change the text content of the actual HTML elements. - <code>lowercase</code>  \"hello world\" -  <code>uppercase</code>  \"HELLO WORLD\" - <code>capitalize</code>  \"Hello World\" - <code>initial</code>  Use the default value. - <code>inherit</code> Use the <code>text-transform</code> value from the parent element. - <code>none</code> default: use the original text </p> <p>For example:</p> <pre><code>H1 {\n    text-transform: uppercase;\n}\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#line-height","title":"Line Height","text":"<p>CSS offer <code>line-height</code> property to change the height of each line in a block of text. It changes the amount of vertical space that each line of text gets.</p> <pre><code>p {\n    line-height: 25px;\n}\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#horizontal-line","title":"Horizontal Line","text":"<p>we can use <code>hr</code> tag to add a horizontal line across the width of its containing element. For example:</p> <pre><code>&lt;h1&gt;Hello&lt;/h1&gt;\n&lt;hr&gt;\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#shadow","title":"Shadow","text":"<p>The <code>box-shadow</code> property applies one or more shadows to an element. The <code>box-shadow</code> property takes values for: - <code>offset-x</code> how far to push the shadow horizontally from the element. - <code>offset-y</code> how far to push the shadow vertically from the element. - <code>blur-raidus</code> - <code>spread-radius</code> - <code>color</code> The <code>blur-radius</code>  and  <code>spread-radius</code> values are optional. Also multiple box0shadows can be created by using commas to separate properties of each <code>box-shadow</code> element. For example:</p> <pre><code>box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#opacity","title":"Opacity","text":"<p>The <code>opacity</code> property in CSS is used to adjust the opacity, or conversely, the transparency for an item.</p> <ul> <li>A value of 1 is opaque (which isn't transparent at all)</li> <li>A value of 0.5 if half see-through.</li> <li>A value of 0 if completely transparent.</li> </ul> <p>For example:</p> <pre><code>.links {\n    opacity: 0.7;\n}\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#pseudo-classes","title":"Pseudo-classes","text":"<p>Pseudo-class is a keyword that can be added to selectors, in order to select a specific state of the element. For example the styling of anchor tag can be changed for its hover state using the <code>:hover</code> pseudo-class selector.</p>"},{"location":"Language/Web/Applied%20Visual%20Design/#hover-state","title":"Hover State","text":"<p>By using the <code>:hover</code> pseudo-class selector, we can change the styling of an anchor tag. For example:</p> <pre><code>a {\n    color: #000;\n}\n\na:hover {\n    color: red;\n}\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#before-and-after","title":":: before and ::after","text":"<p><code>::before</code> create a pesudo-element that is the first child of the select element. <code>::after</code> create a pesudo-element that is the last child of the select element. For example if we want to create a heart shape, first a <code>::before</code> class is used to add a rectangle to an element with the class:</p> <pre><code>.heart::before {\n    content: \"\";\n    background-color: yellow;\n    border-radius: 25%;\n    position: absolute;\n    height: 50px;\n    width: 70px;\n    top: -50px;\n    left: 5px;\n}\n</code></pre> <p>For the <code>::before</code> and <code>::after</code> pseudo-element to function properly, they must have a defined <code>content</code> property. This property is used to add things like a photo or text to the select element. When the <code>::before</code> and <code>::after</code> pseudo-element are used to make shapes, the <code>content</code> property is still required, but it's set to an empty string.</p> <p>In the above example, the element with the class of <code>heart</code> has a <code>::before</code> pseudo-element that produces a yellow rectangle with height and width of <code>50px</code> and <code>70px</code>, respectively. This rectangle has round corners due to its 25% <code>border-radius</code> and is positioned absolutely at <code>5px</code> from the left and <code>50px</code> above the top of the element.</p> <p>## Animation  To animate an element, we need to use the animation properties and the <code>@keyframes</code> rule. The animation properties control how the animation should behave and the <code>@keyframes</code> rule controls what happens during that animation. There are eight animation properties in total. The two most important ones:</p> <p><code>animation-name</code> sets the name of the animation, which is used by <code>@keyframes</code> to tell CSS which rules go with which animations.</p> <p><code>animation-duration</code> set the length of time for the animation.</p> <p><code>@keyframes</code> is how specify exactly what happens within the animation over the duration. This is done by given CSS properties for specify \"frames\" during the animation, with percentages ranging from 0% to 100%. The CSS properties for 0% is how the element element displays in the opening scene. The CSS properties for 100% is how the element appears at the end. For example:</p> <pre><code>#anim {\n    animation-name: colorful;\n    animation-duration: 3s;\n}\n\n@keyframes colorful {\n    0% {\n        background-color: blue;\n    }\n\n    100% {\n        background-color: yellow;\n    }\n}\n</code></pre> <p>For the element with <code>anim</code> id, the code snippet above set the <code>animation-name</code> to <code>colorful</code> and sets the <code>animation-duration</code> to 3 seconds. Then the <code>@keyframes</code> rule links to animation properties with the name <code>colorful</code>. It sets the color to blue at the beginning of the animation (0%) which will transition to yellow by the end of the animation(100%).</p>"},{"location":"Language/Web/Applied%20Visual%20Design/#specifies-element-when-animation-finished","title":"Specifies element when animation finished","text":"<p>If we don't want our animation reset after the duration, this can be done by setting the <code>animation-fill-mode</code> property to forward. The <code>animation-fill-mode</code> specifies the style applied to an element when the animation has finished. We can set it like so:</p> <pre><code>#anim {\n    animation-name: colorful;\n    animation-duration: 3s;\n    animation-fill-mode: forwards;\n}\n\n@keyframes colorful {\n    0% {\n        background-color: blue;\n    }\n\n    100% {\n        background-color: yellow;\n    }\n}\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#movement-animation","title":"Movement Animation","text":"<p>When elements have a specified <code>position</code>, such as <code>fixed</code> and <code>relative</code>, the CSS offset properties <code>right</code>, <code>left</code>, <code>top</code> and <code>bottom</code> can be used in animation rules to create movement. For example:</p> <pre><code>@keyframes rainbow {\n    0% {\n        top: 0px;\n    }\n    50% {\n        top: 50px;\n    }\n    100% {\n        top: 0px;\n    }\n}\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#visual-direction","title":"Visual Direction","text":"<pre><code>@keyframes fade {\n    50% {\n        left: 60%;\n        opacity: 0.1;\n    }\n}\n</code></pre> <p>In the displayed animation, the round element with the gradient background moves to the right by the 50% mark of the animation per the <code>@keyframes</code> rule.</p>"},{"location":"Language/Web/Applied%20Visual%20Design/#animation-continually","title":"Animation Continually","text":"<p>Another animation property is the <code>animation-iteration-count</code>, which allow us to control how many times we would like to loop through the animation. For example:</p> <pre><code>#anim {\n    animation-name: colorful;\n    animation-duration: 3s;\n    animation-iteration-count: infinite;\n}\n</code></pre> <p>By setting the <code>animation-iteration-count</code> property to <code>infinite</code>, we make the animation run continuously.</p>"},{"location":"Language/Web/Applied%20Visual%20Design/#animation-timing","title":"Animation Timing","text":"<p>In CSS animation, the <code>animation-timing-function</code> property controls how quickly an animated element change over the duration of the animation. If the animation is a car moving from point A to point B in a given time (<code>animation-duration</code>), the <code>animation-timing-function</code> says how the car accelerates and decelerates over the course of the drive.</p> <p><code>ease</code> the default value, which starts slow, speeds up in the middle, and then slows down again in the end. <code>ease-out</code>, which is quick in the beginning then slows down. <code>ease-in</code>, which is slow in the beginning then speeds up at the end. <code>linear</code>, which is applies a constant animation speed throughout.</p> <p>For example: </p> <pre><code>#anim {\n    animation-name: colorful;\n    animation-duration: 3s;\n    animation-iteration-count: infinite;\n    animation-timing-function: ease;\n}\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#cubic-bezier","title":"Cubic-bezier","text":"<p>CSS offer <code>cubic-bezier</code> function which provides even finer control over how the animation plays out than keywords.</p> <p>In CSS animation, Bezier curvers are sued with the <code>cubic-bezier</code> function. The shape of the curve represents how the animation plays out. The curve lives on a 1 by 1 coordinate system. The X-axis of this coordinate system is the duration of the animation (a time scale), and Y-axis is the change in the animation.</p> <p>The <code>cubic-bezier</code> function consists of four main points that sit on this 1 by 1 grid: <code>p0</code>, <code>p1</code>, <code>p2</code> and <code>p3</code>. <code>p0</code> and <code>p3</code> are set for us - they are the beginning and end points which are always located respectively at the origin(0,0) and (1,1). We set the x and y values for the other two point, and where we place them in the grid dictates the shape of the curve for the animation to follow. This is done in CSS by declaring the x and y values of the <code>p1</code> and <code>p2</code> \"anchor\" point in the form: <code>(x1, y1, x2, y2)</code>. Pulling it all together, here's an exaple:</p> <pre><code>animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);\n</code></pre>"},{"location":"Language/Web/Applied%20Visual%20Design/#move-a-graphic","title":"Move a Graphic","text":"<p>Similar animation progressions to the <code>ease-out</code> keyword can be achieved by using a custom cubic Bezier curve function.</p> <p>In general, changing the <code>p1</code> and <code>p2</code> anchor point drives the creation of different Bezier curves, which controls how the animation progresses through time. Here's a example of a Bezier curve using values to mimic the ease-out style:</p> <pre><code>animation-timing-function: cubic-bezier(0, 0, 0.58, 1);\n</code></pre> <p>Remember that all <code>cubic-bezier</code> functions start with <code>p0</code> at (0, 0) and end with <code>p3</code> at (1, 1). In this example, the curve moves faster through the Y-axis (starts at 0, goes to <code>p1</code> y value of 0, then goes to <code>p2</code> y value of 1) than it moves through the X-axis (0 to start, then 0 for <code>p1</code>, up to 0.58 for <code>p2</code>).</p>"},{"location":"Language/Web/Applied%20Visual%20Design/#natural-motion","title":"Natural Motion","text":"<p>The <code>animation-timing-function</code> automatically loops at every keyframe when the <code>animation-iteration-count</code> is set to infinite. The following cubic Bezier curve simulates a juggling movement:</p> <pre><code>cubic-bezier(0.3, 0.4, 0.5, 1.6);\n</code></pre>"},{"location":"Language/Web/Color/","title":"Color","text":"<p>linear-gradient(black, #000099, #66c2ff, #ffcccc, #ffeee6) sky</p>"},{"location":"Language/Web/Responsive%20Web%20Design/","title":"Resonsive Web Desgin","text":""},{"location":"Language/Web/Responsive%20Web%20Design/#basic-html","title":"[[Basic HTML]]","text":"<ul> <li>Hypertext Markup Language</li> <li>for content</li> <li>HTML is an evolving language, and is update regularly.</li> </ul>"},{"location":"Language/Web/Responsive%20Web%20Design/#css","title":"CSS","text":"<ul> <li>Cascading Style Sheets</li> <li>for design</li> </ul>"},{"location":"Language/Web/CSS/Basic%20CSS/","title":"CSS","text":"<p>With CSS there are hundreds of CSS properties that we can use to change the way an element looks on our page.</p>"},{"location":"Language/Web/CSS/Basic%20CSS/#use-css-selectors","title":"Use CSS Selectors","text":"<p>We can styling element individually with inline CSS. Such as:</p> <pre><code>&lt;h1 style-\"color: red;\"&gt;Hello&lt;/h1&gt;\n</code></pre> <p>That is one way to specify the style of an element, but there is a better way. At the top of our code, create a <code>style</code> block look like this:</p> <pre><code>&lt;style&gt;\n    ...\n&lt;/style&gt;\n</code></pre> <p>Inside that style block, we can create a CSS selector for a element. For example, if we want all <code>h1</code> elements to be red:</p> <pre><code>&lt;style&gt;\n    h1 {\n        color: red;\n    }\n&lt;/style&gt;\n</code></pre> <p>*note: that is important to have both opening and closing curly braces <code>{</code> and <code>}</code> around each element's style rules. </p>"},{"location":"Language/Web/CSS/Basic%20CSS/#css-class-selector","title":"CSS Class Selector","text":"<p>Classes are reusable styles that can be added to HTML elements. Classes are always allow us to use the same CSS styles on multiple HTML elements. Here's an example:</p> <pre><code>&lt;style&gt;\n    .blue-text {\n        color: blue;\n    }\n&lt;/style&gt;\n</code></pre> <p>To apply this, we need add <code>class=\"blue-text\"</code> to an HTML elements. And we are also able to apply multiple classes to an element using its <code>class</code> attribute, by separating each class name with a space.</p> <p>*note: in our CSS <code>style</code> element, class name start with a period <code>.</code>. In our HTML elements' class attribute, the class name does not include the period <code>.</code>.</p>"},{"location":"Language/Web/CSS/Basic%20CSS/#id-selector","title":"ID Selector","text":"<p>In addition to classes, each HTML elements can also have an id attribute. An <code>id</code> has a higher specificity(importance) than a class.</p> <p>There are several benefits to using <code>id</code> attributes: We can use an <code>id</code> to style a single element and we can use them to select and modify specific elements with JavaScript.</p> <p><code>id</code> attributes should be unique. Browsers won't enforce this, but it is a widely agreed upon best practice.</p> <p>For example:</p> <pre><code>&lt;h2 id=\"cat-photo-app\"&gt;\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#using-id-attribute-to-style-an-element","title":"Using ID Attribute to style an Element","text":"<p><code>id</code> just like <code>class</code> we can style them using CSS. To apply this, we have to put a <code>#</code> in front of their name. For example: </p> <pre><code>#cat-photo-element {\n    background-color: green;\n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#attribute-selectors","title":"Attribute Selectors","text":"<p>We can use <code>[attr=value]</code> attribute selector to style element. For example, we want to style the radio button, this selector will match and style element with a specific attribute value:</p> <pre><code>[type=\"radio\"] {\n    margin: 20px 0px 20px 0px;\n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#style-the-html-body","title":"Style the HTML Body","text":"<p>Every HTML page has a <code>body</code> element, and this element can also be styled with CSS. We can style our <code>body</code> element by:</p> <pre><code>body{\n    background-color: black;\n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#css-variables","title":"CSS Variables","text":"<p>CSS Variables are a powerful way to change many CSS style properties at once by changing only one value. For example:</p> <pre><code>.penguin {\n    --penguin-skin: black;\n    --penguin-belly: gray;\n    --penguin-beak: yellow;\n}\n\n.penguin-top {\n    background: var(--penguin-skin, gray);\n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#create-a-custom-css-variable","title":"Create a custom CSS Variable","text":"<p>To Create a CSS variable, we need to give it a name with two hyphens <code>--</code> in front of it and assign it a value like this:</p> <pre><code>.penguin {\n    --penguin-skin: gray\n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#use-a-custom-css-variable","title":"Use a custom CSS Variable","text":"<p>After create a CSS variable, we can assign its value to other CSS properties by referencing the name we give it, like this:</p> <pre><code>.penguin {\n    --penguin-skin: gray\n}\n.penguin-top {\n    background: var(--penguin-skin);\n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#attach-a-fallback-value-to-a-css-variable","title":"Attach a Fallback value to a CSS Variable","text":"<p>For example:</p> <pre><code>.penguin {\n    --penguin-skin: gray\n}\n.penguin-top {\n    background: var(--penguin-skin, black);\n}\n</code></pre> <p>*note: This will not work on IE browser. Rather, it is used so that the browser has a color to display if cannot find your variable. When working with CSS you will likely run into browser compatibility issues at some point. This is why it's important to provide browser fallbacks to avoid potential problems. </p>"},{"location":"Language/Web/CSS/Basic%20CSS/#improve-compatibility-with-browser-fallback","title":"Improve Compatibility with Browser Fallback","text":"<p>When your browser parses the CSS of a webpage, it ignores any properties that it doesn't recognize or support.  If you do want to provide a browser fallback, it's as easy as providing another more widely supported value immediately before your declaration. For example:</p> <pre><code>:root {\n    --red-color: red;\n}\n\n.red-box {\n    background: red;\n    background: var(--red-color);\n}\n</code></pre> <p>We adding another <code>background</code> declaration right before the existing declaration, this will improve the compatibility. </p>"},{"location":"Language/Web/CSS/Basic%20CSS/#inherit-css-variables","title":"Inherit CSS Variables","text":"<p>When we create a variable, it is available for us to use inside the selector in which we create it. It also is available in any of that selector's descendants. This happen because CSS variables are inherited, just like ordinary properties.</p> <p>To make use of inheritance, CSS variables are often defined in the <code>:root</code> element. It is a pseudo-class selector that match the root element of the document, usually the <code>html</code> element. By create our variables in <code>:root</code>, they will be available globally and can be accessed from any other selector in the style sheet. For example: </p> <pre><code>:root {\n    --red-color: red;\n}\n\n.red-box {\n    background: red;\n    background: var(--red-color);\n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#change-a-variable-for-a-specific-area","title":"Change a variable for a specific area","text":"<p>When we create our variable in <code>:root</code> they will set the value of that variable for the whole page. But we can overwrite these variables by setting them again within a specific element.</p> <pre><code>:root {\n    --red-color: red;\n}\n\nbody {\n    backgound: var(--red-color);\n}\n\n.box {\n    --red-color: white;\n}\n\n.red-box {\n    background: red;\n    background: var(--red-color);\n}\n</code></pre> <p>The background of <code>body</code> will be red, but after we assign it to white, the background of <code>red-box</code> will display in white.</p>"},{"location":"Language/Web/CSS/Basic%20CSS/#use-a-media-query-to-change-variable","title":"Use a media query to change variable","text":"<p>CSS Variables can simplify the way use media queries. For example:</p> <pre><code>:root {\n    --red-color: red;\n    --red-size: 100px;\n}\n\n@media (max-width: 350px){\n    :root {\n        --red-color: white;\n        --red-size: 200px;\n    }\n}\n\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#color","title":"Color","text":"<p><code>color</code> style property is responsible for the color of an element. this look like:</p> <pre><code>p {\n    color: red;\n}\n</code></pre> <p>If we want a transparent color use <code>transparent</code>.</p>"},{"location":"Language/Web/CSS/Basic%20CSS/#hex-code-for-specific-color","title":"Hex Code for Specific color","text":"<p>If we want to specific color of our HTML element, we can use hex code. In CSS we can use 6 Hex digits to represent colors, two each for red(R), green(G), blue(B) components. For example <code>#000000</code> is black. Hex code give us a possibilities of more than 16 million colors. *Hexadecimals(Hex) are base 16 numbers. This means it uses sixteen distinct symbols (0-9 and A to F).  The digital <code>0</code> is the lowest number in hex code, and represents a complete absence of color. The digital <code>F</code> is the highest number in hex code, and represents the maximum possible brightness.  For example:</p> <pre><code>p {\n    color: #000000;\n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#use-abbreviated-hex-code","title":"Use Abbreviated Hex Code","text":"<p>Since it's difficult to remember hex code, we can shorten it. For example, red's hex code <code>#FF0000</code> can be shorted to <code>#F00</code>. This shortened form fives one digit for red, one digit for green, and one digit for blue. This reduce the total number of possible colors to around 4,000. But browser will interpret <code>#FF0000</code> and <code>#F00</code> as exactly the same color. For example:</p> <pre><code>p {\n    color: #000;\n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#use-rgb-values-to-color-elements","title":"Use RGB values to Color Elements","text":"<p>Another way we can represent colors in CSS is by using <code>RGB</code> values. For example, The <code>RGB</code> value for black looks like this: </p> <pre><code>p {\n    color: rgb(0, 0, 0);\n}\n</code></pre> <p>Instead of using 6 hex code, with <code>RGB</code> we specify the brightness of each color with a number between 0 and 255.</p>"},{"location":"Language/Web/CSS/Basic%20CSS/#use-rgba-value-for-background-color","title":"Use RGBA value for background-color","text":"<p>We can add <code>background-color</code> to the element holding the text we want to emphasize. <code>RGBA</code> is great to use in this case, as it allows us to adjust the opacity. This means we don't have to completely block out the background. For example:</p> <pre><code>p {\n    background-color: rbga(45, 45, 45, 0.1)\n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#hsl","title":"HSL","text":"<p>CSS3 introduced the <code>hsl()</code> property as an alternative way to pick a color by directly stating hue, saturation and lightness.  HUE is what people generally think of as 'color'. In <code>hsl()</code> hue uses a color wheel concept instead of the spectrum, where the angle of the color on circle is given as a value between 0 and 360.</p> <p>Saturation is the amount of gray in a color. A fully saturated color has no gray in it, and a minimally saturated color is almost gray. this is given as a percentage with 100% being fully saturated.</p> <p>Lightness is the amount of white or black in a color. A percentage is given ranging from 0% (black) to 100%(white), where 50% is the normal color. </p> <p>For example:</p> <pre><code>dvi {\n    background-color: hsl(120, 100%, 50%);\n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#linear-gradient","title":"Linear Gradient","text":"<p>CSS also provides the ability to use color transitions, as known as gradients on elements. This ability accessed through the <code>background</code> property's <code>liner-gradient()</code> function. For example:</p> <pre><code>backgound: linear-gradient(90deg, red, yellow, rgb(203,203,255));\n</code></pre> <p>The general syntax is: </p> <pre><code>background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#striped-element-by-linear-gradient","title":"Striped Element by Linear Gradient","text":"<p>We can use the <code>repeating-linear-gradient()</code> function to create a striped element. The <code>repeating-linear-gradient()</code> function is very similar to <code>linear-gradient()</code> with the major difference that it repeats the specified gradient pattern. <code>repeating-linear-gradient()</code> accepts a variety of values. For example: </p> <pre><code>background:\n    repeating-linear-gradient(\n    45deg,\n    yellow 0px,\n    yellow 40px,\n    black 40px,\n    black 80px\n    );\n}\n</code></pre> <pre><code>\n# Font\n## Font Size\nFont size control by the  ```front-size``` CSS property. this look like this:\n``` CSS\np {\n    font-size: 30px;\n}\n</code></pre> <p>![[Pasted image 20220101151427.png]]</p>"},{"location":"Language/Web/CSS/Basic%20CSS/#background-image","title":"Background Image","text":"<p>The <code>background</code> property supports the <code>url()</code> function in order to link to an image of the chosen texture of pattern. For exmaple:</p> <pre><code>body {\n    background:\n        url(\"https://cdn-media-1.freecodecamp.org/imgr/MJAkxbh.png\");\n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#font","title":"Font","text":""},{"location":"Language/Web/CSS/Basic%20CSS/#font-family","title":"Font family","text":"<p>Font family control by the <code>font-family</code> CSS property. For example:</p> <pre><code>p {\n    font-family: sans-serif; \n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#font-weight","title":"Font Weight","text":"<p>The <code>font-weight</code> property sets how thick or thin characters are in a section of text. For example:</p> <pre><code>p{ \n    font-weight: 800;\n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#import-font","title":"Import Font","text":"<p>If we want to specify non-standard, custom web fonts for use on our website, such as Google Font which is a free library of web fonts that we can use in our CSS by referencing the font's URL. </p> <p>For example if we want to import the Lobster font, to do this we have to add this.</p> <pre><code>&lt;link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"&gt;\n</code></pre> <p>Then we can use the Lobster font in our CSS by using Lobster as the family name:</p> <pre><code>p {\n    font-family: Lobster, sans-serif;\n}\n</code></pre> <p>*Note: The <code>sans-serif</code> is optional, and is a fallback font in case the other specified font is not available. Family name are case-sensitive and need to be wrapped in quotes if there is a space in the name. For example, we need quotes to use the <code>\"Open Sans\"</code>, but not to use the <code>sans-serif</code>.</p>"},{"location":"Language/Web/CSS/Basic%20CSS/#size-the-image","title":"Size the Image","text":"<p>Using the <code>width</code> CSS property to controls an element's width. For example:</p> <pre><code>.image {\n    width: 500px;\n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#border","title":"Border","text":"<p>CSS borders have properties like <code>style</code>, <code>color</code> and <code>width</code>. For example:</p> <pre><code>.thin-red-border {\n    border-color: red;\n    border-width: 5px;\n    border-style: solid;\n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#add-rounded-corner","title":"Add Rounded Corner","text":"<p>We can round out those corners with CSS property called <code>border-radius</code>. For example:</p> <pre><code>.thin-red-border {\n    border-color: red;\n    border-width: 5px;\n    border-style: solid;\n    border-radius: 10px;\n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#make-circular-image-with-border-radius","title":"Make Circular Image with border-radius","text":"<p>For example:</p> <pre><code>.thin-red-border {\n    border-color: red;\n    border-width: 5px;\n    border-style: solid;\n    border-radius: 50%;\n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#background","title":"Background","text":""},{"location":"Language/Web/CSS/Basic%20CSS/#background-color","title":"Background Color","text":"<pre><code>.green-background {\n    background-color: green;\n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#absolute-vs-relative-units","title":"Absolute Vs. Relative Units","text":"<p>Pixels <code>px</code> are a type of length unit, which is what tells the browser how to size or space an item. In addition to <code>px</code>, CSS has a number of different length unit options that we can use. The two main types of length units are absolute and relative. </p> <p>Absolute units tie to physical units of length. For example, <code>in</code> and <code>mm</code> refer inches and millimetres, respectively. Absolute length units approximate the actual measurement on a screen, but there are some different depending on a screen's resolution.</p> <p>Relative units, such as <code>em</code> or <code>rem</code>, are relative to another length value. For example, <code>em</code> is based on the size of an element's font. If we use it to set the <code>font-size</code> property itself, it's relative to the parent's <code>font-size</code>.</p> <p>For example:</p> <pre><code>.box {\n    padding 1.5em;\n}\n</code></pre>"},{"location":"Language/Web/CSS/Basic%20CSS/#inherit-styles","title":"Inherit Styles","text":"<p>All other elements will inherit our <code>body</code> element's style.</p>"},{"location":"Language/Web/CSS/Basic%20CSS/#prioritize-one-style-over-another","title":"Prioritize One Style Over Another","text":"<p>Sometime our HTML element will receive multiple styles that conflict with one another.</p> <pre><code>body {\n    color: green;\n}\n\n.pink-color {\n    color: pink;\n}\n\n&lt;h1 class=\"pink-color\"&gt;hello&lt;/h1&gt;\n</code></pre> <p>The <code>pink-color</code> class will override the <code>body</code> class. This <code>h1</code> element will display in pink instead of green.</p>"},{"location":"Language/Web/CSS/Basic%20CSS/#override-styles-in-subsequent-css","title":"Override Styles in Subsequent CSS","text":"<p>The order of <code>class</code> declarations in the <code>style</code> section is what is important. The latest declaration will always take precedence over the first. For example:</p> <pre><code>body {\n    color: green;\n}\n.pink-color {\n    color: pink;\n}\n.blue-color {\n    color: blue;\n}\n&lt;h1 class=\"pink-color blue-color\"&gt;hello&lt;/h1&gt;\n</code></pre> <p>The <code>blue-color</code> class will override the <code>pink-color</code> and the <code>body</code> class. This <code>h1</code> element will display in blue instead of green or pink.</p>"},{"location":"Language/Web/CSS/Basic%20CSS/#override-class-declarations-by-id-attributes","title":"Override Class Declarations by ID attributes","text":"<p>We known an <code>id</code> has a higher specificity(importance) than a class. It doesn't matter whether we declare CSS <code>class</code> above or below, the <code>id</code> attribute will always take precedence. For example:</p> <pre><code>body {\n    color: green;\n}\n#brown-color {\n    color: brown;\n}\n.pink-color {\n    color: pink;\n}\n.blue-color {\n    color: blue;\n}\n&lt;h1 class=\"pink-color blue-color\" id=\"brown-color\"&gt;hello&lt;/h1&gt;\n</code></pre> <p>The <code>brown-color</code> <code>id</code> attribute will override all other class. This <code>h1</code> element will display in brown.</p>"},{"location":"Language/Web/CSS/Basic%20CSS/#override-class-declaration-with-inline-styles","title":"Override Class Declaration with Inline Styles","text":"<p>There are other way that we can override CSS by inline style. For example:</p> <pre><code>body {\n    color: green;\n}\n#brown-color {\n    color: brown;\n}\n.pink-color {\n    color: pink;\n}\n.blue-color {\n    color: blue;\n}\n&lt;h1 class=\"pink-color blue-color\" id=\"brown-color\" style=\"color:white;\"&gt;hello&lt;/h1&gt;\n</code></pre> <p>The <code>style=\"color:white;\"</code> will override CSS classes and ids styles. This <code>h1</code> element will display in white.</p>"},{"location":"Language/Web/CSS/Basic%20CSS/#override-all-other-style-by-using-important","title":"Override All other Style by using Important","text":"<p>There's one last way to override CSS. This is the most powerful method of all. In many situation, we will use a CSS Libraries. These may accidentally override our own CSS. So when we absolutely need to be sure that an element has specific CSS, we can use <code>!important</code>. For example:</p> <pre><code>body {\n    color: green; \n}\n#brown-color {\n    color: brown;\n}\n.pink-color {\n    color: pink !important;\n}\n.blue-color {\n    color: blue;\n}\n&lt;h1 class=\"pink-color blue-color\" id=\"brown-color\" style=\"color:white;\"&gt;hello&lt;/h1&gt;\n</code></pre> <p>The <code>color: pink !important;</code> will override all other CSS styles. This <code>h1</code> element will display in pink.</p>"},{"location":"Language/Web/CSS/layout/CSS%20Flexbox/","title":"[[CSS Flexbox]]","text":"<p>Flexbox is powerful, well-supported layout method that was introduced with the latest version of CSS, CSS3. With flexbox, it's easy to center elements on the page and create dynamic user interfaces that shrink and expand automatically.</p>"},{"location":"Language/Web/CSS/layout/CSS%20Flexbox/#flex-to-position-two-box","title":"Flex to Position Two Box","text":"<p>By placing the CSS property <code>display: flex;</code> on element allows us to use other flex properties to build a responsive page. For example:</p> <pre><code>.box {\n    display: flex;\n}\n</code></pre> <p>![[Pasted image 20220102154514.png]] ![[Pasted image 20220102154503.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Flexbox/#flex-direction","title":"Flex-direction","text":"<p>Adding <code>display: flex</code> to an element turns it into a flex container. This make it possible to align any children of that element into rows or columns. We do this by adding the <code>flex direction</code> property to the parent item and setting it to <code>row</code> or <code>column</code>. Creating a row will align the children horizontally, and creating a column will align the children vertically.</p> <p>Other options for <code>flex-direction</code> are <code>row-reverse</code> and <code>cloumn-reverse</code>. The default value for the <code>flex-direction</code> property is <code>row</code>.</p> <p>For example:</p> <pre><code>.box {\n    dispaly: flex;\n    flex-drection: cloumn;\n}\n</code></pre> <p>![[Pasted image 20220102155706.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Flexbox/#justify-content","title":"Justify-content","text":"<p>Sometimes the flex items within a flex container do not fill all the space in the container. It is common to want to tell CSS how to align and space out the flex items a certain way. Fortunately, the <code>justify-content</code> property has several options to do this. </p> <p>Recall that setting a flex container as a row places the flex items side-by-side from left-to-right. A flex container set as a column places the flex items in a vertical stack from top-to-bottom. For each, the direction the flex items are arranged is called the main axis. For a row, this is a horizontal line that cuts through each item. And for a column, the main axis is vertical line through the items.</p> <p>There are serval option for how to space the flex items along the line that is the main axis.  ![[Pasted image 20220102160601.png]]</p> <ul> <li> <p><code>justify-content: center;</code>. which aligns all the flex items to the center inside the flex container. ![[Pasted image 20220102160538.png]]</p> </li> <li> <p><code>flex-start</code>: aligns item to the start pf the flex container. ![[Pasted image 20220102160631.png]]</p> </li> <li> <p><code>flex-end</code> aligns items to the end of the flex container. ![[Pasted image 20220102160716.png]]</p> </li> <li> <p><code>space-between</code> aligns items to the center of the main axis, with extra space placed between the items. The first and last items are pushed to the very edge of the flex container. ![[Pasted image 20220102160927.png]]</p> </li> <li> <p><code>space-around</code> similar to <code>space-between</code> but the first and last item are not locked to the edges of the container, the space is distributed around all the items with a half space on either end of the flex container. ![[Pasted image 20220102161055.png]]</p> </li> <li> <p><code>space-evenly</code> Distributes space evenly between the flex items with a full space at either end of the flex container ![[Pasted image 20220102161208.png]]</p> </li> </ul>"},{"location":"Language/Web/CSS/layout/CSS%20Flexbox/#align-items","title":"Align items","text":"<p>The <code>align-items</code> property is similar to <code>justify-content</code>. Flex container also have a cross axis which is the opposite of the main axis. For rows, the cross axis is vertical and for columns, the cross axis is horizontal.</p> <p>CSS offers the <code>align-items</code> property to align flex items along the cross axis. For a row, it tells CSS how to push the items in the entire row up or down within the container, And for a column, how to push all the items left or right within the container.</p> <p>![[Pasted image 20220102162147.png]]</p> <p>The different values available for <code>align-items</code> include: - <code>center</code> align items to the center. ![[Pasted image 20220102162240.png]]</p> <ul> <li> <p><code>flex-start</code> align items to the start of the flex container. ![[Pasted image 20220102162254.png]]</p> </li> <li> <p><code>flex-end</code> align items to the end of flex container. ![[Pasted image 20220102162308.png]]</p> </li> <li> <p><code>stretch</code> stretch the items to fill the flex container. ![[Pasted image 20220102162520.png]]</p> </li> <li> <p><code>baseline</code> align items to their baselines. Baseline is a text concept, think of it as the line that the letters sit on. ![[Pasted image 20220102162547.png]]</p> </li> </ul>"},{"location":"Language/Web/CSS/layout/CSS%20Flexbox/#flex-wrap","title":"Flex wrap","text":"<p>By default, a flex container will fit all flex items together (a row will all be on one line). However, using the <code>flex-wrap</code> property tells CSS to wrap items. This means items move into a new row or column. The break point of where the wrapping happens depends on the size of the items and the size of the container.</p> <p>There are 3 options for the direction of the wrap: - <code>nowrap</code>: this is the default setting, and does not wrap items. ![[Pasted image 20220102163616.png]]</p> <ul> <li> <p><code>wrap</code>: wraps items onto multiple lines from top-to-bottom if they are in rows and left-to-right if they are in columns. ![[Pasted image 20220102163603.png]]</p> </li> <li> <p><code>wrap-reverse</code>: wrap items onto multiple lines from bottom-to-top if they are in rows and right-to-left if they are in columns. ![[Pasted image 20220102163639.png]]</p> </li> </ul>"},{"location":"Language/Web/CSS/layout/CSS%20Flexbox/#flex-shrink","title":"Flex shrink","text":"<p>When use the <code>flex-shrink</code> property, it allows an item to shrink if the flex container is too small. Items shrink when the width of the parent container is smaller than the combined widths of all the flex items within it.</p> <p>The <code>flex-shrink</code> property takes number as values. The higher the number, the more it will shrink compared to the other items in the container. For example, if one item has a <code>flex-shrink</code> value of 1 and the other has a <code>flex-shrink</code> value of 3, the one with the value of 3 will shrink three times as much as the other.</p> <p>For example: ![[Pasted image 20220102164109.png]]</p> <pre><code>#box-1 {\n    background-color: dodgerblue;\n    width: 100%;\n    height: 200px;\n    flex-shrink: 1;\n}\n\n#box-2 {\n    background-color: orangered;\n    width: 100%;\n    height: 200px;\n    flex-shrink: 2;\n}\n</code></pre> <p>![[Pasted image 20220102164153.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Flexbox/#flex-grow","title":"Flex grow","text":"<p>The <code>flex-grow</code> is the opposite of <code>flex-shirk</code>. The <code>flex-shrink</code> controls the size of the items when the container shrinks. The <code>flex-grow</code> property controls the size of items when the parent container expands.</p> <p>If one item has a <code>flex-grow</code> value of <code>1</code> and the other has a <code>flex-grow</code> value of <code>3</code>, the one with the value of <code>3</code> will grow three times as much as the other.</p> <p>For example:</p> <pre><code>#box-1 {\n    background-color: dodgerblue;\n    height: 200px;\n    flex-grow: 1;\n}\n\n#box-2 {\n    background-color: orangered;\n    height: 200px;\n    flex-grow: 2;\n}\n</code></pre> <p>![[Pasted image 20220102164755.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Flexbox/#flex-basis","title":"Flex basis","text":"<p>The <code>flex-basis</code> property specifies the initial size of the item before CSS makes adjustment with <code>flex-shrink</code> or <code>flex-grow</code>.</p> <p>The units used by the <code>flex-basis</code> property are the same as other size properties (<code>px</code>, <code>em</code>, <code>%</code>, etc.). The value <code>auto</code> sizes items based on the content. </p> <p>For example: </p> <pre><code>#box-1 {\n    background-color: dodgerblue;\n    height: 200px;\n    flex-basis: 10em;\n}\n\n#box-2 {\n    background-color: orangered;\n    height: 200px;\n    flex-basis: 20em;\n}\n</code></pre> <p>![[Pasted image 20220102170610.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Flexbox/#flex-shorthand","title":"Flex Shorthand","text":"<p>There is a shorthand available to set several flex properties at once. The <code>flex-grow</code>, <code>flex-shrink</code>, and <code>flex-basis</code> properties can all be together by using the <code>flex</code> property.</p> <p>For example, <code>flex: 1 0 10px;</code> will set the item to <code>flex-grow: 1</code>, <code>flex-shrink:0</code>, and <code>flex-basis: 10px</code>.</p> <p>The default property setting are <code>flex: 0 1 auto</code>.</p> <p>For example: </p> <pre><code>#box-1 {\n    background-color: dodgerblue;\n    flex: 2 2 150px;\n    height: 200px;\n}\n\n#box-2 {\n    background-color: orangered;\n    flex: 1 1 150px;\n    height: 200px;\n}\n</code></pre>"},{"location":"Language/Web/CSS/layout/CSS%20Flexbox/#rearrange-items","title":"Rearrange Items","text":"<p>The <code>order</code> property is used to tell CSS the order of how flex items appear in the flex container. By default, items will appear in the sam order they come in the source HTML. The property takes numbers as values, and negative numbers can be used.</p> <p>![[Pasted image 20220102171416.png]] For example:</p> <pre><code>#box-1 {\n    background-color: dodgerblue;\n    order: 2;\n    height: 200px;\n    width: 200px;\n}  \n\n#box-2 {\n    background-color: orangered;\n    order: 1;\n    height: 200px;\n    width: 200px;\n}\n</code></pre> <p>![[Pasted image 20220102171447.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Flexbox/#align-self","title":"Align self","text":"<p>The <code>align-self</code> property allow us to adjust each item's alignment individually, instead of setting them all at once. This is useful since other common adjustment techniques using the CSS properties <code>float</code>, <code>clear</code>, and <code>vertical-align</code> do not work on flex items.</p> <p><code>align-self</code> accepts the same values as <code>align-items</code> and will override any value set by the <code>align-items</code> property.</p> <p>For example:</p> <pre><code>#box-1 {\n    background-color: dodgerblue;\n    align-self: center;\n    height: 200px;\n    width: 200px;\n}\n\n\n\n#box-2 {\n    background-color: orangered;\n    align-self: flex-end;\n    height: 200px;\n    width: 200px;\n}\n</code></pre> <p>![[Pasted image 20220102173022.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/","title":"[[CSS Grid]]","text":"<p>CSS Grid is a newer standard that makes it easy to build complex responsive layouts. It works by turning an HTLM element into a grid, and lets you place child elements anywhere whiten.</p> <p>Turn any HTML element into a grid container by setting its <code>display</code> property to <code>grid</code>. This give us the ability to use all the other properties associated with CSS Grid.</p> <p>*note: In CSS Grid, the parent element is referred to as the container and its children are called items. </p> <pre><code>.container {\n    display: grid;\n}\n</code></pre> <p>![[Pasted image 20220102175652.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#add-columns","title":"Add Columns","text":"<p>To add some columns to the grid, use the <code>grid-template-columns</code> property on a grid container as demonstrated bellow:</p> <pre><code>.container {\n    display: grid;\n    grid-template-columns: 100px 100px 100px; \n}\n</code></pre> <p>![[Pasted image 20220102180020.png]]This give our grid two columns that are each 100px wide. The number of parameters given to the <code>grid-template-columns</code> property indicates the number of columns in the grid, and the value of each parameter indicates the width of each column.</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#add-rows","title":"Add Rows","text":"<p>To adjust the rows manually, use the <code>grid-template-rows</code> property in the same way we used <code>grid-template-columns</code>.</p> <pre><code>.container {\n    display: grid;\n    grid-template-columns: 100px 100px 100px;\n    grid-template-rows: 100px 50px;\n}\n</code></pre> <p>![[Pasted image 20220102180419.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#change-size-of-columns-and-rows","title":"Change Size of Columns and Rows","text":"<p>We can use absolute and relative units like <code>px</code> and <code>em</code> in CSS Grid to define the size of rows and columns. We can use these as well:</p> <p><code>fr</code> sets the column or row to fraction of the available space.</p> <p><code>auto</code> sets the column or row to the width or height of tis content automatically.</p> <p><code>%</code> adjust the column or row to the percent width of tis container.</p> <pre><code>gird-template-columns: auto 50px 10% 2fr 1fr;\n</code></pre> <p>![[Pasted image 20220102181045.png]] This snippet creates five columns. The first column is as wide as its content, the second column is 50px, the third 10% of its container, and for the last two columns, the remaining space is divided into three sections, two are allocated for the fourth column, and one for the fifth.</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#add-column-gaps","title":"Add Column Gaps","text":"<p>To add a gap between the columns, use the <code>grid-column-gap</code> property like this:</p> <pre><code>grid-column-gap: 20px;\n</code></pre> <p>![[Pasted image 20220102182042.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#add-row-gap","title":"Add Row Gap","text":"<p>To add a gap in between rows of a grid using <code>grid-row-gap</code> property like this:</p> <pre><code>grid-row-gap: 5px;\n</code></pre> <p>![[Pasted image 20220102182401.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#add-gaps-faster","title":"Add Gaps Faster","text":"<p><code>grid-gap</code> is a shorthand property for <code>grid-row-gap</code> and <code>grid-column-gap</code>. If <code>grid-gap</code> has one value, it will create a gap between all rows and columns. However, if there are two values, it will use the first one to set the gap between the rows and the second value for the columns.</p> <pre><code>gird-gap: 10px 20px;\n</code></pre> <p>![[Pasted image 20220102182721.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#use-grid-column-to-control-spacing","title":"Use grid-column to Control Spacing","text":"<p>The <code>grid-column</code> property is the first one for use on the grid items themselves.</p> <p>The hypothetical horizontal and vertical lines that create the grid are referred to as lines, These lines are numbered starting with 1 at the top left corner of the grid and move right for columns and down for rows. It look like for a 3x3 grid: ![[Pasted image 20220102184319.png]]</p> <p>To control the number of columns an item will consume, we can use the <code>grid-column</code> property in conjunction with the line numbers we want the item to start and stop at.</p> <p>Here's an example:</p> <pre><code>.item5 {\n    grid-column: 2 / 4;\n}\n</code></pre> <p>![[Pasted image 20220102184743.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#use-grid-row-to-control-spacing","title":"Use grid-row to Control Spacing","text":"<p>We define the horizontal lines we want an item to start and stop at using the <code>grid-row</code> property on a grid item.</p> <pre><code>.item5 {\n    grid-column: 2 / 4;\n    grid-row: 2 / 4;\n}\n</code></pre> <p>![[Pasted image 20220102185044.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#align-a-item","title":"Align A Item","text":""},{"location":"Language/Web/CSS/layout/CSS%20Grid/#align-items-horizontally","title":"Align items Horizontally","text":"<p>In CSS Grid, the content of each item is located in a box which is referee to as a cell. We can align the content's position within its cell horizontally using the <code>justify-self</code> property on a grid item. By default, this property has a value of <code>stretch</code>, which will make the content fill the while width of the cell. This CSS Grid property accepts other values as well:</p> <ul> <li><code>start</code> aligns the content at the left of the cell.</li> <li><code>center</code> aligns the content in the center of the cell.</li> <li><code>end</code> aligns the content at the right of the cell.</li> </ul> <pre><code>.item2 {\n    justify-self: center;\n}\n</code></pre> <p>![[Pasted image 20220102190015.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#align-items-vertically","title":"Align items Vertically","text":"<p>We can use the <code>align-self</code> property on an item, this property accepts all of the same values as <code>justify-self</code>.</p> <pre><code>.item2 {\n    align-self: end;\n}\n</code></pre> <p>![[Pasted image 20220102190320.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#align-all-items","title":"Align All Items","text":""},{"location":"Language/Web/CSS/layout/CSS%20Grid/#align-all-items-horizontally","title":"Align All Items Horizontally","text":"<p>When we want all the items in our CSS Grid to share the same alignment. We can align them all at once horizontally by using Justify-items by using <code>justify-items</code> on our grid container. This property can accept all the same values we use in <code>align-self</code> or <code>justify-self</code>.</p> <pre><code>.container {\n    justify-items: center;\n}\n</code></pre> <p>![[Pasted image 20220102210334.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#align-all-items-vertically","title":"Align All items Vertically","text":"<p>Using the <code>align-items</code> property on a grid container will set the vertical alignment for all the items in our grid.</p> <pre><code>.container {\n    align-items: center;\n}\n</code></pre> <p>![[Pasted image 20220102210802.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#grid-areas","title":"Grid Areas","text":""},{"location":"Language/Web/CSS/layout/CSS%20Grid/#divide-the-grid-into-an-area-template","title":"Divide the Grid Into an Area Template","text":"<p>We can group calls of our grid together into an area and give the area a custom name. Do this by using <code>grid-template-areas</code> on the container like this:</p> <pre><code>    .contaier {\n        grid-template-areas:\n        \"header header header\"\n        \"advert content content\"\n        \"footer footer footer\"\n    }\n</code></pre> <p>The code above groups the cells of the grid into four areas: <code>header</code>, <code>advert</code>, <code>content</code> and <code>footer</code>. Every word represents a cell and every pair of quotation marks represent a row.</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#place-items-in-grid-areas","title":"Place Items in Grid Areas","text":"<p>After creating an area template for our grid container, we can place an item in our custom area by referencing the name we gave it. To do this, we use the <code>grid-area</code> property on an item like this:</p> <pre><code>.item5 {\n    grid-area: footer;\n}\n</code></pre> <p>This lets the grid know that we want the <code>item1</code> class to go in the area named <code>footer</code>.  ![[Pasted image 20220102212304.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#using-grid-area-without-creating-an-areas-template","title":"Using grid-area without creating an Areas Template","text":"<p>The <code>grid-area</code> property can be used in another way. If we doesn't have an area template to reference, we can create an area on the fly for an item to be placed like this:</p> <pre><code>.item5 {\n    grid-area: 1/1/2/4;\n}\n</code></pre> <p>This is using the line number to define where the area for this item will be. The number in the example above represent these values:</p> <pre><code>grid-area: horizontal line to start at / vertical line to start at / horizontal line to end at / vertical line to end at;\n</code></pre> <p>So the item in the example will consume the rows between lines 1 and 2, and the columns between 1 and 4.</p> <p>For example:</p> <pre><code>.item5 {\n    grid-area: 3/1/4/4;\n}\n</code></pre> <p>In the above example, we place the element with <code>item5</code>class between the third and fourth horizontal lines and between the first and fourth vertical lines. ![[Pasted image 20220102213122.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#reduce-repetition","title":"Reduce Repetition","text":"<p>When we used <code>grid-template-coulumns</code> and <code>grid-template-rows</code> to define the structure of a grid, we enters a value for each row or column we created.</p> <p>By using the <code>repeat</code> function to specify the number of times we want our column or row to be repeated, followed by a comma and the value we want to repeat.</p> <p>Here is an example that would create the 100 row grid, each row at <code>50px</code> tall.</p> <pre><code>grid-template-rows: repeat(100, 50px);\n</code></pre> <p>We can also repeat multiple values with the repeat function and insert the function amongst other values when defining a grid structure. Here's what looks like:</p> <pre><code>grid-template-row: repeat(2, 1fr, 50px) 20px;\n</code></pre> <p>This translate to:</p> <pre><code>grid-template-row: 1fr 50px 1fr 50px 20px;\n</code></pre> <pre><code>grid-template-columns: repeat (3, 1fr);\ngrid-template-rows: repeat (3, 1fr);\n</code></pre> <p>![[Pasted image 20220102214804.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#limit-item-size","title":"Limit Item Size","text":"<p>There's another built-in function to use with <code>grid-template-columns</code> and <code>grid-template-rows</code> called <code>minmax</code>. It's used to limit the size of items when the grid container changes size. To do this we need to specify the acceptable size range for our item. For example:</p> <pre><code>grid-template-columns: 100px minmax(50px, 200px);\n</code></pre> <p>In the code above, <code>grid-template-columns</code> is set to create two columns; The first is 100px wide, and the second has the minimum width of 50px and the maximum width of 200px.</p> <pre><code>grid-template-columns: repeat(3, minmax(90px, 1fr));\n</code></pre>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#flexible-layout","title":"Flexible Layout","text":""},{"location":"Language/Web/CSS/layout/CSS%20Grid/#using-auto-fill","title":"Using auto-fill","text":"<p>The repeat function comes with an option called auto-fill. This allows us to automatically insert as many rows or columns of our desired size as possible depending on the size of the container. We can create Flexible layouts when combining <code>auto-fill</code> with <code>minmax</code>, like this:</p> <pre><code>grid-template-columns: repeat(auto-file, minmax(60px, 1fr));\n</code></pre> <p>When the container changes size, this setup keeps inserting 60px columns and stretching them until it can insert another one.</p> <p>![[Pasted image 20220102221311.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#using-auto-fit","title":"Using auto-fit","text":"<p><code>auto-fit</code> is almost identically to <code>auto-fill</code>. The only different is that when the container's size exceeds the size of all the items combined. <code>auto-fill</code> keeps inserting empty rows or columns and pushes our items to the side. <code>auto-fit</code> collapses those empty rows or columns and stretches our items to fit the size of the container.</p> <pre><code>grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));\n</code></pre>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#using-media-queries","title":"Using Media Queries","text":"<pre><code>@media (min-width: 300px){\n    .container{\n    grid-template-columns: auto 1fr;    \n    grid-template-rows: auto 1fr auto;\n    grid-template-areas:\n    \"advert header\"\n    \"advert content\"\n    \"advert footer\";\n    }\n}\n</code></pre> <p>![[Pasted image 20220102222831.png]]</p> <pre><code>@media (min-width: 400px){\n.container{\n    grid-template-areas:\n        \"advert header\"\n        \"advert content\"\n        \"advert footer\";\n    }\n}\n</code></pre> <p>![[Pasted image 20220102222842.png]]</p>"},{"location":"Language/Web/CSS/layout/CSS%20Grid/#create-a-grids-within-grids","title":"Create a Grids within Grids","text":"<pre><code>display: grid;\ngrid-template-columns: auto 1fr;\n</code></pre>"},{"location":"Language/Web/HTML/Basic%20HTML/","title":"[[Basic HTML|HTML]] Element","text":"<p>Most HTML elements have an opening tag and a closing tag. <code>&lt;h1&gt; Hello &lt;/h1&gt;</code></p> <p>opening tag look like  <code>&lt;h1&gt;</code></p> <p>closing tag look like <code>&lt;/h1&gt;</code></p> <p>*all HTML tags are writing in lowercase.</p>"},{"location":"Language/Web/HTML/Basic%20HTML/#comment","title":"Comment","text":"<p>Comment in HTML start with <code>&lt;!--</code> and end with <code>--&gt;</code></p>"},{"location":"Language/Web/HTML/Basic%20HTML/#doctype-of-html-document","title":"Doctype of HTML Document","text":"<p>This should be include in every HTML document. At top of HTML document we should tell browser which version of HTML the page is using.</p> <p>To tell the browser this information by adding the <code>&lt;!DOCTYPE...&gt;</code>tag on the first line, where the <code>...</code> part is the version of HTML. For HTML5, we use <code>&lt;!DOCTYPE html&gt;</code>. The <code>!</code> and uppercase <code>DOCTYPE</code> is important, especially for older browser, The <code>html</code> is not case sensitive.</p> <p>Next, the rest of our HTML code needs to be wrapped in <code>html</code> tags. The opening <code>&lt;html&gt;</code> goes directly below the <code>&lt;!DOCTYPE html&gt;</code> line, and the closing <code>&lt;/html&gt;</code> goes at the end of the page.</p> <p>For Example:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;HTML&gt;\n    ...\n&lt;/HTML&gt;\n</code></pre>"},{"location":"Language/Web/HTML/Basic%20HTML/#head-and-body-of-html-document","title":"Head and Body of HTML Document","text":"<p>Any makeup with information about your page would go into the <code>head</code> tag. Such as <code>link</code>, <code>meta</code>, <code>title</code>, and <code>style</code> typically go inside the head element.</p> <p>Any makeup with contact of the page (what display to users) would go into the <code>body</code> tag.</p> <p>For example:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta /&gt;\n        &lt;title&gt;...&lt;/title&gt;\n        ...\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div&gt;\n            ...\n        &lt;/div&gt;\n        ...\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Language/Web/HTML/Basic%20HTML/#headline","title":"Headline","text":"<p>Headline elements tell the browser about the structure of the website.</p> <p><code>h1</code> elements are often used for main headings. <code>h2</code> elements are generally used for subheadings. <code>h3 h4 h5</code> elements to indicate different level of subheadings.</p>"},{"location":"Language/Web/HTML/Basic%20HTML/#paragraph","title":"Paragraph","text":"<p><code>p</code> elements are the preferred element for paragraph text on websites. <code>&lt;p&gt; hello paragraph &lt;/p&gt;</code> Web developer traditionally use lorem ipsum text as placeholder text, which is randomly scraped form a famous passage by Cicero Ancient Rome.</p>"},{"location":"Language/Web/HTML/Basic%20HTML/#image","title":"Image","text":"<p>Add images to website by using the <code>img</code>  elements, and point to a specific image's URL using the src attribute.</p> <p>*This kind of elements are self-closing.</p> <p>All <code>img</code> element **must have an <code>alt</code> attribute, the text inside and <code>alt</code> attribute is used for screen readers to improve accessibility and  is displayed if the image fails to load.</p> <p>look like <code>&lt;img src=\"https://www.google.com/logo.jpg\" alt=\"logo\"&gt;</code></p>"},{"location":"Language/Web/HTML/Basic%20HTML/#link","title":"Link","text":"<p>Link to content outside of the web page by using the <code>a</code> anchor elements. Anchor element need a destination web address called an <code>href</code> attribute, and also need anchor text.</p> <p>look like <code>&lt;a href=\"https://www.google.com\"&gt; Google &lt;/a&gt;</code></p> <p>*To open page in new window, add <code>target=\"_blank\"</code> attribute.</p>"},{"location":"Language/Web/HTML/Basic%20HTML/#internal-link","title":"internal Link","text":"<p>assign a link's <code>href</code> attribute to a hash symbol <code>#</code> plus the value of the id attribute for the element.</p> <pre><code>&lt;a herf=\"#contacts-header\"&gt; Contacts &lt;/a&gt;\n</code></pre>"},{"location":"Language/Web/HTML/Basic%20HTML/#nest-link-in-paragraph","title":"nest link in Paragraph","text":"<pre><code>&lt;p&gt; \n    Here's the &lt;a target=\"_bland\" href=\"https://google.com\"&gt;Google&lt;/a&gt; page.    \n&lt;/p&gt;\n</code></pre>"},{"location":"Language/Web/HTML/Basic%20HTML/#dead-link","title":"dead link","text":"<p><code>herf=\"#\"</code></p>"},{"location":"Language/Web/HTML/Basic%20HTML/#nest-link-with-image","title":"nest link with image","text":"<pre><code>&lt;a herf=\"https://google.com\"&gt;&lt;img src=\"https://google.com/logo.jpg\" alt=\"google\"&gt;&lt;/a&gt;\n</code></pre>"},{"location":"Language/Web/HTML/Basic%20HTML/#list","title":"List","text":""},{"location":"Language/Web/HTML/Basic%20HTML/#bulleted-unordered-list","title":"Bulleted Unordered  List","text":"<p>Start with an opening <code>&lt;ul&gt;</code> element, followed by and number of <code>&lt;li&gt; &lt;/li&gt;</code> elements, Finally, unordered lists closed by <code>&lt;/ul&gt;</code> This look like: </p> <pre><code>&lt;ul&gt;\n    &lt;li&gt; A &lt;/li&gt;\n    &lt;li&gt; B &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"Language/Web/HTML/Basic%20HTML/#ordered-list","title":"Ordered List","text":"<p>Start with an opening <code>&lt;ol&gt;</code> element, followed by any number of <code>&lt;li&gt;</code> elements, Finally, ordered list are closed with the <code>&lt;ol&gt;</code> tag. This look like:</p> <pre><code>&lt;ol&gt;\n    &lt;li&gt; A &lt;/li&gt;\n    &lt;li&gt; B &lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>"},{"location":"Language/Web/HTML/Basic%20HTML/#form","title":"Form","text":"<p>To submit data to the server using nothing more than pure HTML. We can do this by specifying an action attribute on the <code>form</code> element. For example:</p> <pre><code>&lt;form action=\"/url-where-you-want-to-subemit-form-data\"&gt;\n    &lt;input&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"Language/Web/HTML/Basic%20HTML/#submit-form","title":"Submit form","text":"<p>To send the data form the form to the URL we specified with the form <code>action</code> attribute, we have to add a <code>submit</code> button to the form. This look like:</p> <pre><code>&lt;form action=\"/url-where-you-want-to-subemit-form-data\"&gt;\n    &lt;input&gt;\n    &lt;button type=\"submit\"&gt;submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"Language/Web/HTML/Basic%20HTML/#require-a-filed-html5","title":"Require a filed (html5)","text":"<p>To require a specific form filed so user will not be able to submit the form until they filled it out. To do this we just add the attribute <code>required</code> within the <code>input</code> element. For example:</p> <pre><code>&lt;input type=\"text\" required&gt;\n</code></pre>"},{"location":"Language/Web/HTML/Basic%20HTML/#input","title":"Input","text":""},{"location":"Language/Web/HTML/Basic%20HTML/#text-field","title":"Text Field","text":"<p>Use <code>input</code>  elements, those elements are self-closing. It look like:</p> <pre><code>&lt;input type=\"text\"&gt;\n</code></pre>"},{"location":"Language/Web/HTML/Basic%20HTML/#placeholder-text","title":"placeholder text","text":"<p>Placeholder text is what displayed in the <code>input</code> element before the user has inputted anything. This look like:</p> <pre><code>&lt;input type=\"text\" placeholder=\"hello\"&gt;\n</code></pre>"},{"location":"Language/Web/HTML/Basic%20HTML/#radio-button","title":"Radio Button","text":"<p>Using radio button for questions where we want user to only give us one answer of multiple options. Radio buttons are a type of <code>input</code>, and each radio button can be nested within its own <code>label</code>. All related radio button should have the same <code>name</code> attribute to create a radio button group. By creating a radio button group, selecting any single radio button within the same group will automatically deselect the other radio buttons, which mean only one answer will be provided by the user. For example:</p> <pre><code>&lt;label&gt;\n    &lt;input type=\"radio\" name=\"group\"&gt;Indoor&lt;/input&gt;\n&lt;/label&gt;\n</code></pre> <p>To set a <code>for</code> attribute on the <code>label</code> element, with a value that matches the value of the id attribute of the input element. This allows assistive technologies to create a linked relationship between the label and the related <code>input</code> element. For example:</p> <pre><code>&lt;input id=\"indoor\" type=\"radio\" name=\"group\"&gt;Indor&lt;/input&gt;\n&lt;label for=\"indoor\"&gt;Indoor&lt;/label&gt;\n</code></pre> <p>or nest the <code>input</code> element within the label tags:</p> <pre><code>&lt;label for==\"indoor\"&gt;&lt;input id=\"indoor\" type=\"radio\" name=\"group\"&gt;Indoor&lt;/label&gt;\n</code></pre>"},{"location":"Language/Web/HTML/Basic%20HTML/#checkbox","title":"Checkbox","text":"<p>Forms commonly use checkboxes for questions that may have more than one answers.  Check box is a type of input.  Each of the checkboxes can be nested within its own <code>label</code> element. By wrapping an <code>input</code> element inside of a label element it will automatically associate the checkbox input with the label element surrounding it. All related checkbox element should have the same <code>name</code> attribute.  For Example:  <code>HTML  &lt;label for=\"obj\"&gt;&lt;input id=\"obj\" type=\"checkbox\" name=\"cat\"&gt; white cat&lt;/label&gt;</code></p> <p>## Value attribute with Radio button and Checkbox  When the form gets submitted, the data is sent to the server and includes entries for the options selected. Inputs of type <code>radio</code> and <code>checkbox</code> will report their values from the value attribute.  For example:  ```HTML   indoor  </p> <p> outdoor   <code>When submit the form with the indoor option selected, the form data will include the line:</code>indoor-outdoor=indoor<code>. This is from the</code>name<code>and</code>value<code>attributes of the \"indoor\" input.  If you omit the</code>value<code>attribute, the submitted form data uses the default value, which is on. So when user submit the form, the form data will include the line</code>indoor-outdoor=on```, which is not really useful.</p> <p>## Check Radio Buttons and Checkboxes by default  To do this, just add the <code>checked</code> attribute to the inside of an input element. For example:</p> <pre><code>&lt;input type=\"radio\" name=\"test-name\" checked&gt;\n</code></pre>"},{"location":"Language/Web/HTML/Basic%20HTML/#label-element","title":"Label Element","text":"<p>The <code>label</code> tag wraps the text for a specific form control item, usually the name or label for a choice. This ties meaning to the item and makes the form more readable. The <code>for</code> attribute on a <code>label</code> tag explicitly associates that <code>label</code> with the form control and is used by screen readers. </p> <p>The value of the <code>for</code> attribute must be the same as the value of the <code>id</code> attribute of the form control. For example:</p> <pre><code>&lt;form&gt;\n    &lt;label for=\"name\"&gt;Name:&lt;/label&gt;\n    &lt;input type=\"text\" id=\"name\" name=\"name\"&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"Language/Web/HTML/Basic%20HTML/#fieldset-element","title":"Fieldset Element","text":"<p>The <code>fieldset</code> tag surrounds the entire grouping of radio buttons, it often uses a <code>legend</code> tag to provide a description for the grouping, which screen reader read for each choice in the fieldset element. </p> <p>The <code>fieldset</code> wrapper and <code>legend</code> tag are not necessary when the choices are self-explanatory. Using a <code>label</code> with the <code>for</code> attribute for each radio button is sufficient.</p> <p>Here is an example:</p> <pre><code>&lt;form&gt;\n    &lt;fieldset&gt;\n        &lt;legend&gt;make a choice&lt;/legend&gt;\n        &lt;input id=\"one\" type=\"radio\" name=\"item\" value=\"one\"&gt;\n        &lt;input id=\"two\" type=\"radio\" name=\"item\" value=\"two\"&gt;   \n        &lt;input id=\"three\" type=\"radio\" name=\"item\" value=\"three\"&gt;\n    &lt;/fieldset&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"Language/Web/HTML/Basic%20HTML/#div-element","title":"Div Element","text":"<p>The <code>div</code> element, also known as a division element, is a general purpose container for other elements. The <code>div</code> element start with <code>&lt;div&gt;</code> and close it on another line with <code>&lt;/div&gt;</code>.</p>"},{"location":"Language/Web/HTML/Basic%20HTML/#html5-elements","title":"HTML5 Elements","text":"<p><code>main header footer nav video article section</code> and others. These tags give a descriptive structure to HTML, make HTML easier to read, and also help with Search Engine Optimization (SEO). <code>main</code> tag helps search engines and other developers to find the main contact of page.</p>"},{"location":"Language/Web/HTML/Design%20Principles/","title":"[[Design Principles]]","text":"<p>There are many devices that can access the web, and they come in all shapes and sizes. Responsive web design is the practice of designing flexible websites that can respond to different screen sizes, orientations, and resolutions. We need to make our website look good, no matter what device they're viewed on.</p>"},{"location":"Language/Web/HTML/Design%20Principles/#media-query","title":"Media Query","text":"<p>Media Queries are new technique introduced in CSS3 that change the presentation of content based on different viewport sizes. The viewport is a user's visible area of a web page, and is different depending on the device used to access the site.</p> <p>Media Queries consist of a media type, and if that media type matches the style of the document is displayed on, the styles are applied. We can have as many selectors and styles inside our media query as we want.</p> <p>Here is an example of a media query that returns the content when the device's width is less than or equal to <code>100px</code>:</p> <pre><code>@media (max-widht: 100px) {\n    /* CSS Rules */\n}\n</code></pre> <p>and the following media query return the content when the devices's height is more than or equal to <code>350px</code>:</p> <pre><code>@media (min-height: 350px) {\n    /* CSS Rules */\n}\n</code></pre>"},{"location":"Language/Web/HTML/Design%20Principles/#image-responsive","title":"Image Responsive","text":"<p>To making images responsive with CSS, we need to add these properties on an image:</p> <pre><code>img {\n    max-width: 100%\n    height: auto;\n}\n</code></pre> <p>The <code>max-width</code> of <code>100%</code> will make sure the image is never wider than the container it is in, and the <code>height</code> of <code>auto</code> will make the image keep its original aspect ratio.</p>"},{"location":"Language/Web/HTML/Design%20Principles/#retina-image-for-high-resolutaion-display","title":"Retina Image for High-Resolutaion Display","text":"<p>The simplest way to make our images properly on High-Resolution Displays is to define their <code>width</code> and <code>height</code> values as only half of that the original file is. For example:</p> <pre><code>&lt;style&gt;\n    img {\n        height: 250px;\n        width: 250px;\n    }\n&lt;/style&gt;\n\n&lt;img src=\"logo500x500\" alt=\"company logo\"&gt;\n</code></pre>"},{"location":"Language/Web/HTML/Design%20Principles/#make-typography-responsive","title":"Make Typography Responsive","text":"<p>Instead of using <code>px</code> or <code>em</code> to size text, we can use viewport units fro responsive typography. Viewpoint units, like percentages, are relative units, but they are based off different items. Viewport units are relative to the viewport dimensions (width or height) of a device, and percentages are relative to the size of the parent container element.</p> <p>The for different viewport unites are: - <code>vw</code> (viewport width): <code>10vw</code> would be 10% of the viewport's width. - <code>vh</code> (viewport height): <code>3vh</code> would be 3% of the viewport's height. - <code>vmin</code> (viewport minimum): <code>70vmin</code> would be 70% of the viewport's smaller dimension (height or width). - <code>vmax</code> (viewport maximum): <code>100vmax</code> would be 100% of the viewport's bigger dimension (height or width).</p> <p>For example:</p> <pre><code>body {\n    width: 30vw;\n}\n</code></pre>"},{"location":"%F0%9F%8F%AD%20CI/argo%20workflow/","title":"\ud83d\udcc5 Argo Workflow","text":""},{"location":"%F0%9F%8F%AD%20CI/argo%20workflow/#argo","title":"\ud83d\udcbf \u5b89\u88c5 argo","text":"<p>\u5b89\u88c5Argo Workflow</p>"},{"location":"%F0%9F%8F%AD%20CI/argo%20workflow/#_1","title":"\ud83d\udd27 \u5f00\u59cb\u4f7f\u7528","text":""},{"location":"%F0%9F%8F%AD%20CI/github%20action/","title":"\u23f0 GitHub Action","text":""},{"location":"%F0%9F%93%A6%20Container/docker/dockerfile/","title":"\ud83d\udc33 Dockerfile","text":"<p>Dockerfile \u662f\u4e00\u4e2a\u7528\u6765\u6784\u5efa\u955c\u50cf\u7684\u6587\u672c\u6587\u4ef6\uff0c\u6587\u672c\u5185\u5bb9\u5305\u542b\u4e86\u4e00\u6761\u6761\u6784\u5efa\u955c\u50cf\u6240\u9700\u7684\u6307\u4ee4\u548c\u8bf4\u660e\u3002</p>"},{"location":"%F0%9F%93%A6%20Container/docker/dockerfile/#_1","title":"\ud83d\udcbf \u6784\u5efa\u7b2c\u4e00\u4e2a\u955c\u50cf","text":""},{"location":"%F0%9F%93%A6%20Container/docker/dockerfile/#dockerfile_1","title":"\u521b\u5efaDockerfile","text":"<pre><code>FROM nginx:latest\nRUN echo '\u8fd9\u662f\u4e00\u4e2a\u672c\u5730\u6784\u5efa\u7684nginx\u955c\u50cf' &gt; /usr/share/nginx/html/index.html\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/docker/dockerfile/#_2","title":"\u6784\u5efa\u955c\u50cf","text":"<pre><code>docker build -t nginx-local:latest .\n</code></pre> <p>\u901a\u8fc7\u76ee\u5f55\u4e0b\u7684 Dockerfile \u6784\u5efa\u4e00\u4e2a nginx-local:latest\uff08\u955c\u50cf\u540d\u79f0:\u955c\u50cf\u6807\u7b7e\uff09\u3002</p> <p>\u6ce8\u610f\u6700\u540e\u7684\u7684<code>.</code>\u662f\u4ee3\u8868\u672c\u6b21\u6267\u884c\u7684\u4e0a\u4e0b\u6587\u8def\u5f84\u3002</p> <p>\u4e0a\u4e0b\u6587\u8def\u5f84\uff0c\u662f\u6307 docker \u5728\u6784\u5efa\u955c\u50cf\uff0c\u6709\u65f6\u5019\u60f3\u8981\u4f7f\u7528\u5230\u672c\u673a\u7684\u6587\u4ef6\uff08\u6bd4\u5982\u590d\u5236\uff09\uff0cdocker build \u547d\u4ee4\u5f97\u77e5\u8fd9\u4e2a\u8def\u5f84\u540e\uff0c\u4f1a\u5c06\u8def\u5f84\u4e0b\u7684\u6240\u6709\u5185\u5bb9\u6253\u5305\u3002</p>"},{"location":"%F0%9F%93%A6%20Container/docker/dockerfile/#copy","title":"\ud83d\udcc3 COPY \u6dfb\u52a0\u6587\u4ef6\u5230\u955c\u50cf","text":""},{"location":"%F0%9F%93%A6%20Container/docker/dockerfile/#dockerfile_2","title":"\u4fee\u6539Dockerfile","text":"<pre><code>FROM nginx:latest\nCOPY index.html /usr/share/nginx/html/\n</code></pre> <p>\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528<code>COPY</code>\u6307\u4ee4\uff0c\u4ece\u4e0a\u4e0b\u6587\u76ee\u5f55\u4e2d\u590d\u5236\u6587\u4ef6\u6216\u8005\u76ee\u5f55\u5230\u5bb9\u5668\u91cc\u6307\u5b9a\u8def\u5f84\u3002</p>"},{"location":"%F0%9F%93%A6%20Container/docker/dockerfile/#copy_1","title":"<code>COPY</code> \u6307\u4ee4","text":"<pre><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;\u6e90\u8def\u5f841&gt;...  &lt;\u76ee\u6807\u8def\u5f84&gt;\nCOPY [--chown=&lt;user&gt;:&lt;group&gt;] [\"&lt;\u6e90\u8def\u5f841&gt;\",...  \"&lt;\u76ee\u6807\u8def\u5f84&gt;\"]\n</code></pre> <p>&lt;\u6e90\u8def\u5f84&gt;\uff1a\u6e90\u6587\u4ef6\u6216\u8005\u6e90\u76ee\u5f55\uff0c\u8fd9\u91cc\u53ef\u4ee5\u662f\u901a\u914d\u7b26\u8868\u8fbe\u5f0f\uff0c\u5176\u901a\u914d\u7b26\u89c4\u5219\u8981\u6ee1\u8db3 Go \u7684 filepath.Match \u89c4\u5219\u3002\u4f8b\u5982\uff1a</p> <pre><code>COPY hom* /mydir/\nCOPY hom?.txt /mydir/\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/docker/dockerfile/#add","title":"\ud83d\udcc1 ADD \u6dfb\u52a0\u6587\u4ef6\u5939\u5230\u955c\u50cf","text":""},{"location":"%F0%9F%93%A6%20Container/docker/dockerfile/#dockerfile_3","title":"\u4fee\u6539Dockerfile","text":"<pre><code>FROM nginx:latest\nAdd ./html /usr/share/nginx/html/\n</code></pre> <p><code>ADD</code> \u6307\u4ee4\u548c COPY \u7684\u4f7f\u7528\u683c\u7c7b\u4f3c\uff08\u540c\u6837\u9700\u6c42\u4e0b\uff0c\u5b98\u65b9\u63a8\u8350\u4f7f\u7528 COPY\uff09\u3002\u529f\u80fd\u4e5f\u7c7b\u4f3c\uff0c\u4e0d\u540c\u4e4b\u5904\u5982\u4e0b\uff1a</p> <p><code>ADD</code> \u7684\u4f18\u70b9\uff1a\u5728\u6267\u884c &lt;\u6e90\u6587\u4ef6&gt; \u4e3a tar \u538b\u7f29\u6587\u4ef6\u7684\u8bdd\uff0c\u538b\u7f29\u683c\u5f0f\u4e3a gzip, bzip2 \u4ee5\u53ca xz \u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u81ea\u52a8\u590d\u5236\u5e76\u89e3\u538b\u5230 &lt;\u76ee\u6807\u8def\u5f84&gt;\u3002</p> <p><code>ADD</code> \u7684\u7f3a\u70b9\uff1a\u5728\u4e0d\u89e3\u538b\u7684\u524d\u63d0\u4e0b\uff0c\u65e0\u6cd5\u590d\u5236 tar \u538b\u7f29\u6587\u4ef6\u3002\u4f1a\u4ee4\u955c\u50cf\u6784\u5efa\u7f13\u5b58\u5931\u6548\uff0c\u4ece\u800c\u53ef\u80fd\u4f1a\u4ee4\u955c\u50cf\u6784\u5efa\u53d8\u5f97\u6bd4\u8f83\u7f13\u6162\u3002\u5177\u4f53\u662f\u5426\u4f7f\u7528\uff0c\u53ef\u4ee5\u6839\u636e\u662f\u5426\u9700\u8981\u81ea\u52a8\u89e3\u538b\u6765\u51b3\u5b9a\u3002</p>"},{"location":"%F0%9F%93%A6%20Container/k8s/YAML%E6%96%87%E4%BB%B6/","title":"\ud83d\udcc3 YAML \u6587\u4ef6","text":""},{"location":"%F0%9F%93%A6%20Container/k8s/YAML%E6%96%87%E4%BB%B6/#yaml_1","title":"\ud83d\udda8\ufe0f \u521b\u5efa YAML \u6587\u4ef6","text":"<pre><code>apiVersion: apps/v1 #\u4e0ek8s\u96c6\u7fa4\u7248\u672c\u6709\u5173\uff0c\u4f7f\u7528 kubectl api-versions \u5373\u53ef\u67e5\u770b\u5f53\u524d\u96c6\u7fa4\u652f\u6301\u7684\u7248\u672c\nkind: Deployment    #\u8be5\u914d\u7f6e\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u662f Deployment\nmetadata:           #\u8bd1\u540d\u4e3a\u5143\u6570\u636e\uff0c\u5373 Deployment \u7684\u4e00\u4e9b\u57fa\u672c\u5c5e\u6027\u548c\u4fe1\u606f\n  name: nginx-deployment    #Deployment \u7684\u540d\u79f0\n  labels:       #\u6807\u7b7e\uff0c\u53ef\u4ee5\u7075\u6d3b\u5b9a\u4f4d\u4e00\u4e2a\u6216\u591a\u4e2a\u8d44\u6e90\uff0c\u5176\u4e2dkey\u548cvalue\u5747\u53ef\u81ea\u5b9a\u4e49\uff0c\u53ef\u4ee5\u5b9a\u4e49\u591a\u7ec4\uff0c\u76ee\u524d\u4e0d\u9700\u8981\u7406\u89e3\n    app: nginx  #\u4e3a\u8be5Deployment\u8bbe\u7f6ekey\u4e3aapp\uff0cvalue\u4e3anginx\u7684\u6807\u7b7e\nspec:           #\u8fd9\u662f\u5173\u4e8e\u8be5Deployment\u7684\u63cf\u8ff0\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4f60\u671f\u5f85\u8be5Deployment\u5728k8s\u4e2d\u5982\u4f55\u4f7f\u7528\n  replicas: 1   #\u4f7f\u7528\u8be5Deployment\u521b\u5efa\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\n  selector:     #\u6807\u7b7e\u9009\u62e9\u5668\uff0c\u4e0e\u4e0a\u9762\u7684\u6807\u7b7e\u5171\u540c\u4f5c\u7528\uff0c\u76ee\u524d\u4e0d\u9700\u8981\u7406\u89e3\n    matchLabels: #\u9009\u62e9\u5305\u542b\u6807\u7b7eapp:nginx\u7684\u8d44\u6e90\n      app: nginx\n  template:     #\u8fd9\u662f\u9009\u62e9\u6216\u521b\u5efa\u7684Pod\u7684\u6a21\u677f\n    metadata:   #Pod\u7684\u5143\u6570\u636e\n      labels:   #Pod\u7684\u6807\u7b7e\uff0c\u4e0a\u9762\u7684selector\u5373\u9009\u62e9\u5305\u542b\u6807\u7b7eapp:nginx\u7684Pod\n        app: nginx\n    spec:       #\u671f\u671bPod\u5b9e\u73b0\u7684\u529f\u80fd\uff08\u5373\u5728pod\u4e2d\u90e8\u7f72\uff09\n      containers:   #\u751f\u6210container\uff0c\u4e0edocker\u4e2d\u7684container\u662f\u540c\u4e00\u79cd\n      - name: nginx #container\u7684\u540d\u79f0\n        image: nginx:1.7.9  #\u4f7f\u7528\u955c\u50cfnginx:1.7.9\u521b\u5efacontainer\uff0c\u8be5container\u9ed8\u8ba480\u7aef\u53e3\u53ef\u8bbf\u95ee\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/k8s/YAML%E6%96%87%E4%BB%B6/#yaml_2","title":"\ud83d\udcbb \u5e94\u7528 YAML \u6587\u4ef6","text":"<pre><code>kubectl apply -f xxx-deployment.yaml\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/k8s/YAML%E6%96%87%E4%BB%B6/#_1","title":"\u67e5\u770b\u90e8\u7f72\u7ed3\u679c","text":"<pre><code>kubectl get deployments\n\nkubectl get pods\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/k8s/mongodb%E9%83%A8%E7%BD%B2/","title":"k8s \u90e8\u7f72mongoDB \ud83e\udd6d","text":""},{"location":"%F0%9F%93%A6%20Container/k8s/mongodb%E9%83%A8%E7%BD%B2/#nfs","title":"NFS\u6301\u4e45\u5316\u90e8\u7f72","text":"<p>\u5173\u4e8e\u6302\u5728NFS\uff0c\u67e5\u770b \u6302\u8f7dNFS</p>"},{"location":"%F0%9F%93%A6%20Container/k8s/stuck%20on%20terminating/","title":"\ud83e\udd1a NS\u5361\u5728terminating","text":"<p>\u539f\u6587</p>"},{"location":"%F0%9F%93%A6%20Container/k8s/%E4%BD%BF%E7%94%A8%E7%A7%81%E6%9C%89%E5%BA%93/","title":"\ud83d\udd12 \u4f7f\u7528\u79c1\u6709\u5e93","text":"<p>\u4f7f\u7528\u79c1\u6709\u5e93</p>"},{"location":"%F0%9F%93%A6%20Container/k8s/%E4%BD%BF%E7%94%A8%E7%A7%81%E6%9C%89%E5%BA%93/#secret","title":"\ud83d\udd11 \u521b\u5efa\u6388\u6743Secret","text":"<p>Kubernetes \u96c6\u7fa4\u4f7f\u7528 docker-registry \u7c7b\u578b\u7684 Secret \u6765\u901a\u8fc7\u5bb9\u5668\u4ed3\u5e93\u7684\u8eab\u4efd\u9a8c\u8bc1\uff0c\u8fdb\u800c\u63d0\u53d6\u79c1\u6709\u6620\u50cf\u3002</p> <pre><code>kubectl create secret docker-registry regcred \\\n  --docker-server=&lt;\u4f60\u7684\u955c\u50cf\u4ed3\u5e93\u670d\u52a1\u5668&gt; \\\n  --docker-username=&lt;\u4f60\u7684\u7528\u6237\u540d&gt; \\\n  --docker-password=&lt;\u4f60\u7684\u5bc6\u7801&gt; \\\n  --docker-email=&lt;\u4f60\u7684\u90ae\u7bb1\u5730\u5740&gt;\n</code></pre> <ul> <li> \u662f\u4f60\u7684\u79c1\u6709 Docker \u4ed3\u5e93\u5168\u9650\u5b9a\u57df\u540d\uff08FQDN\uff09\u3002 DockerHub \u4f7f\u7528 https://index.docker.io/v1/\u3002 <li> \u662f\u4f60\u7684 Docker \u7528\u6237\u540d\u3002 <li> \u662f\u4f60\u7684 Docker \u5bc6\u7801\u3002 <li> \u662f\u4f60\u7684 Docker \u90ae\u7bb1\u3002 \u8fd9\u6837\u4f60\u5c31\u6210\u529f\u5730\u5c06\u96c6\u7fa4\u4e2d\u7684 Docker \u51ed\u8bc1\u8bbe\u7f6e\u4e3a\u540d\u4e3a regcred \u7684 Secret\u3002"},{"location":"%F0%9F%93%A6%20Container/k8s/%E4%BD%BF%E7%94%A8%E7%A7%81%E6%9C%89%E5%BA%93/#secret_1","title":"\ud83d\udd0d \u68c0\u67e5 Secret","text":"<p>\u8981\u4e86\u89e3\u4f60\u521b\u5efa\u7684 regcred Secret \u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u7528 YAML \u683c\u5f0f\u8fdb\u884c\u67e5\u770b\uff1a</p> <pre><code>kubectl get secret regcred --output=yaml\n\napiVersion: v1\ndata:\n  .dockerconfigjson: eyJodHRwczovL2luZGV4L ... J0QUl6RTIifX0=\nkind: Secret\nmetadata:\n  ...\n  name: regcred\n  ...\ntype: kubernetes.io/dockerconfigjson\n</code></pre> <p>\u26a0\ufe0f .dockerconfigjson \u5b57\u6bb5\u7684\u503c\u662f Docker \u51ed\u8bc1\u7684 base64 \u8868\u793a\u3002</p> <p>\u8981\u4e86\u89e3 dockerconfigjson \u5b57\u6bb5\u4e2d\u7684\u5185\u5bb9\uff0c\u8bf7\u5c06 Secret \u6570\u636e\u8f6c\u6362\u4e3a\u53ef\u8bfb\u683c\u5f0f\uff1a</p> <p>kubectl get secret regcred --output=\"jsonpath={.data..dockerconfigjson}\" | base64 --decode \u8f93\u51fa\u548c\u4e0b\u9762\u7c7b\u4f3c\uff1a</p> <p>{\"auths\":{\"yourprivateregistry.com\":{\"username\":\"janedoe\",\"password\":\"xxxxxxxxxxx\",\"email\":\"jdoe@example.com\",\"auth\":\"c3R...zE2\"}}} \u8981\u4e86\u89e3 auth \u5b57\u6bb5\u4e2d\u7684\u5185\u5bb9\uff0c\u8bf7\u5c06 base64 \u7f16\u7801\u8fc7\u7684\u6570\u636e\u8f6c\u6362\u4e3a\u53ef\u8bfb\u683c\u5f0f\uff1a</p> <p>echo \"c3R...zE2\" | base64 --decode \u8f93\u51fa\u7ed3\u679c\u4e2d\uff0c\u7528\u6237\u540d\u548c\u5bc6\u7801\u7528 : \u94fe\u63a5\uff0c\u7c7b\u4f3c\u4e0b\u9762\u8fd9\u6837\uff1a</p> <p>janedoe:xxxxxxxxxxx \u6ce8\u610f\uff0cSecret \u6570\u636e\u5305\u542b\u4e0e\u672c\u5730 ~/.docker/config.json \u6587\u4ef6\u7c7b\u4f3c\u7684\u6388\u6743\u4ee4\u724c\u3002</p> <p>\u8fd9\u6837\u4f60\u5c31\u5df2\u7ecf\u6210\u529f\u5730\u5c06 Docker \u51ed\u8bc1\u8bbe\u7f6e\u4e3a\u96c6\u7fa4\u4e2d\u7684\u540d\u4e3a regcred \u7684 Secret\u3002</p>"},{"location":"%F0%9F%93%A6%20Container/k8s/%E4%BD%BF%E7%94%A8%E7%A7%81%E6%9C%89%E5%BA%93/#secret-pod","title":"\ud83d\udcbf \u521b\u5efa\u4e00\u4e2a\u4f7f\u7528\u4f60\u7684 Secret \u7684 Pod","text":"<p>\u4e0b\u9762\u662f\u4e00\u4e2a Pod \u914d\u7f6e\u6e05\u5355\u793a\u4f8b\uff0c\u8be5\u793a\u4f8b\u4e2d Pod \u9700\u8981\u8bbf\u95ee\u4f60\u7684 Docker \u51ed\u8bc1 regcred\uff1a</p> <pre><code>pods/private-reg-pod.yaml  Copy pods/private-reg-pod.yaml to clipboard\napiVersion: v1\nkind: Pod\nmetadata:\n  name: private-reg\nspec:\n  containers:\n  - name: private-reg-container\n    image: &lt;your-private-image&gt;\n  imagePullSecrets:\n  - name: regcred\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/k8s/%E6%8C%82%E8%BD%BDnfs/","title":"\ud83d\udcc1 \u6302\u8f7dNFS","text":""},{"location":"%F0%9F%93%A6%20Container/k8s/%E6%8C%82%E8%BD%BDnfs/#depolyments-statefulsets","title":"\u2699\ufe0f depolyments / StatefulSets","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n        volumeMounts:\n        - name: data\n          mountPath: /usr/share/nginx/html\n      volumes:\n      - name: data\n        nfs:\n          path: /opt/nfs-deployment\n          server: 172.26.204.144\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/k8s/%E6%8C%82%E8%BD%BDnfs/#_1","title":"\ud83d\udd75\ufe0f\u200d\u2640\ufe0f \u5e38\u89c1\u95ee\u9898","text":"<p>\u5982\u679c\u51fa\u73b0\u9519\u8bef <code>Kubernetes NFS volume mount fail with exit status 32</code>\uff0c\u9700\u8981\u518d\u6bcf\u4e2a\u8282\u70b9\u5b89\u88c5 <code>nfs-common</code>\u3002</p> <pre><code>apt-get install -y nfs-common\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/k8s/%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/","title":"\ud83c\udfde\ufe0f \u4f7f\u7528\u73af\u5883\u53d8\u91cf","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: envar-demo\n  labels:\n    purpose: demonstrate-envars\nspec:\n  containers:\n  - name: envar-demo-container\n    image: gcr.io/google-samples/node-hello:1.0\n    env:\n    - name: DEMO_GREETING\n      value: \"Hello from the environment\"\n    - name: DEMO_FAREWELL\n      value: \"Such a sweet sorrow\"\n\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E5%85%B6%E4%BB%96/argo/","title":"\ud83d\udcc5 Argo Workflow","text":""},{"location":"%F0%9F%93%A6%20Container/%E5%85%B6%E4%BB%96/argo/#argo-cli","title":"\ud83d\udcbf \u5b89\u88c5 argo-cli","text":"<p>argo-cli</p> <pre><code># Download the binary\ncurl -sLO https://github.com/argoproj/argo-workflows/releases/download/v3.3.0-rc4/argo-linux-amd64.gz\n\n# Unzip\ngunzip argo-linux-amd64.gz\n\n# Make binary executable\nchmod +x argo-linux-amd64\n\n# Move binary to path\nmv ./argo-linux-amd64 /usr/local/bin/argo\n\n# Test installation\nargo version\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E5%85%B6%E4%BB%96/argo/#argo-server-argo-controller","title":"\ud83d\udcc0 \u5b89\u88c5 argo-server \u548c argo-controller","text":""},{"location":"%F0%9F%93%A6%20Container/%E5%85%B6%E4%BB%96/argo/#yaml","title":"\u4f7f\u7528yaml","text":"<pre><code>kubectl create namespace argo\nkubectl apply -n argo -f https://github.com/argoproj/argo-workflows/releases/download/v3.3.0-rc4/install.yaml\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E5%85%B6%E4%BB%96/argo/#helm","title":"\u4f7f\u7528helm","text":"<pre><code>helm repo add argo https://argoproj.github.io/argo-helm\n</code></pre> <p>\u26a0\ufe0f k3s: \u9700\u8981\u628a <code>containerRuntimeExecutor: docker</code> \u4fee\u6539\u4e3a <code>containerRuntimeExecutor: k8sapi</code></p>"},{"location":"%F0%9F%93%A6%20Container/%E5%85%B6%E4%BB%96/argo/#_1","title":"\ud83e\uddea \u6d4b\u8bd5","text":"<pre><code>argo submit -n argo --watch https://raw.githubusercontent.com/argoproj/argo-workflows/master/examples/hello-world.yaml\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E5%85%B6%E4%BB%96/argo/#argo-ui","title":"\ud83d\udc69\u200d\ud83d\udcbb \u4f7f\u7528 argo-UI","text":"<p>\u4e3a argo service \u914d\u7f6e ingress / node port</p>"},{"location":"%F0%9F%93%A6%20Container/%E5%85%B6%E4%BB%96/argo/#auth-token","title":"\ud83d\udd12 \u83b7\u53d6 auth-token","text":"<pre><code>kubectl -n argo exec pod/argo-argo-workflows-server-5f5889464c-f8fjm -- argo auth token\n</code></pre> <p><code>argo-argo-workflows-server-5f5889464c-f8fjm</code> \u662fargo-server\u7684pod\u540d\u79f0</p>"},{"location":"%F0%9F%93%A6%20Container/%E5%85%B6%E4%BB%96/argo/#_2","title":"\u26a0\ufe0f \u5e38\u89c1\u95ee\u9898","text":"<p>pod \u5361\u5728 pending \u5e76\u663e\u793a <code>MountVolume.SetUp failed for volume \u201cdocker-sock\u201d</code></p> <p>\u9700\u8981\u628a <code>containerRuntimeExecutor: docker</code> \u4fee\u6539\u4e3a <code>containerRuntimeExecutor: k8sapi</code></p>"},{"location":"%F0%9F%93%A6%20Container/%E5%85%B6%E4%BB%96/openFaaS/","title":"\ud83d\udc1f OpenFaaS","text":""},{"location":"%F0%9F%93%A6%20Container/%E5%85%B6%E4%BB%96/openFaaS/#_1","title":"\u5b89\u88c5","text":"<p>\u4e3a\u4e86\u7b80\u5316\u5b89\u88c5\uff0c\u4f7f\u7528 <code>arkade</code></p>"},{"location":"%F0%9F%93%A6%20Container/%E5%85%B6%E4%BB%96/openFaaS/#arkade","title":"\u5b89\u88c5 arkade","text":"<pre><code>curl -sLS https://dl.get-arkade.dev | sudo sh\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E5%85%B6%E4%BB%96/openFaaS/#openfaas_1","title":"\u5b89\u88c5 openFaaS","text":"<pre><code>arkade install openfaas\narkade info openfaas\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E5%85%B6%E4%BB%96/openFaaS/#openfaas-cli","title":"\u5b89\u88c5 openFaaS cli","text":"<pre><code>curl -sSL https://cli.openfaas.com | sudo -E sh\nfaas version\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E5%85%B6%E4%BB%96/openFaaS/#web-ui","title":"\u767b\u9646web ui","text":"<p>\u9ed8\u8ba4\u7528\u6237\u4e3a <code>admin</code></p>"},{"location":"%F0%9F%93%A6%20Container/%E5%85%B6%E4%BB%96/openFaaS/#_2","title":"\u67e5\u770b\u5bc6\u7801","text":"<pre><code>PASSWORD=$(kubectl get secret -n openfaas basic-auth -o jsonpath=\"{.data.basic-auth-password}\" | base64 --decode; echo)\necho -n $PASSWORD | faas-cli login --username admin --password-stdin \necho $PASSWORD\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E5%B7%A5%E5%85%B7/lens/","title":"\ud83d\udd2d Lens","text":"<p>Lens \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u7528\u4e8e\u7ba1\u7406Kubernetes\u96c6\u7fa4\u7684IDE</p> <p></p>"},{"location":"%F0%9F%93%A6%20Container/%E5%B7%A5%E5%85%B7/lens/#lens_1","title":"\ud83d\udcbf \u5b89\u88c5Lens","text":"<p>\u4e0b\u8f7dLens</p>"},{"location":"%F0%9F%93%A6%20Container/%E5%B7%A5%E5%85%B7/lens/#_1","title":"\ud83c\udfe0 \u6dfb\u52a0\u96c6\u7fa4","text":"<p>\u5728 <code>Home &gt; Clusters</code> \u70b9\u51fb\u53f3\u4e0b\u89d2\u7684 +\uff0c \u9009\u62e9 <code>Add from kubeconfig</code></p> <p>\u8f93\u5165\u4f60master\u8282\u70b9\u7684 <code>kubeconfig</code>\u4fe1\u606f.</p> <p>\u4ee5 <code>k3s</code> \u4e3a\u5217\uff0c<code>kubeconfig</code> \u4fe1\u606f\u4f4d\u4e8e <code>/etc/rancher/k3s/k3s.yaml</code>.</p> <p>\u26a0\ufe0f \u5982\u679c\u4e0d\u5728host\u4e0a\u8fd0\u884c\uff0c\u6ce8\u610f\u9700\u8981\u4fee\u6539\u5bf9\u5e94\u7684server\u5730\u5740.</p>"},{"location":"%F0%9F%93%A6%20Container/%E5%B7%A5%E5%85%B7/lens/#metric","title":"\ud83d\udcc3 \u914d\u7f6e metric","text":"<p>\u521a\u6dfb\u52a0\u7684\u96c6\u7fa4\u9700\u8981\u5b89\u88c5\u76f8\u5e94\u7684\u63d2\u4ef6\u6765\u542f\u52a8metric.</p> <p>\u9700\u8981\u5728 <code>Setting &gt; Lens Metrics</code> \u4e2d\u5f00\u542f\u76f8\u5e94\u7684\u63d2\u4ef6</p> <p></p> <p></p>"},{"location":"%F0%9F%93%A6%20Container/%E5%B7%A5%E5%85%B7/portainer/","title":"\ud83d\udea2 Portainer","text":"<p>Portainer \u53ef\u4ee5\u901a\u8fc7GUI\u754c\u9762\u7ba1\u7406 Docker \u548c K8s\u3002</p>"},{"location":"%F0%9F%93%A6%20Container/%E5%B7%A5%E5%85%B7/portainer/#_1","title":"\ud83d\udcbf \u5b89\u88c5","text":"<pre><code>helm repo add portainer https://portainer.github.io/k8s/\nhelm repo update\nhelm install --create-namespace -n portainer portainer portainer/portainer \\\n--set service.type=LoadBalancer\n</code></pre> <p>\u26a0\ufe0f \u8fd9\u91cc\u4f7f\u7528loadbalancer\u914d\u7f6eservice</p>"},{"location":"%F0%9F%93%A6%20Container/%E5%B7%A5%E5%85%B7/portainer/#_2","title":"\ud83d\udd0d \u68c0\u67e5\u662f\u5426\u5b89\u88c5","text":"<pre><code>kubectl get all -n portainer\n\nNAME                        READY   STATUS    RESTARTS   AGE\nportainer-f8dbb6c74-p2g75   1/1     Running   0          51s\nsvclb-portainer-jqf9k       3/3     Running   0          51s\nsvclb-portainer-r9qlv       3/3     Running   0          51s\nsvclb-portainer-x4l26       3/3     Running   0          51s\n\nNAME        TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)                                        AGE\nportainer   LoadBalancer   10.43.126.166   192.168.0.121   9000:30107/TCP,9443:32415/TCP,8000:32327/TCP   84s\n</code></pre> <p>Now we can access the portainer GUI through http://192.168.0.121:9000</p>"},{"location":"%F0%9F%93%A6%20Container/%E5%B7%A5%E5%85%B7/rancher/","title":"\ud83d\udc2e Rancher","text":""},{"location":"%F0%9F%93%A6%20Container/%E5%B7%A5%E5%85%B7/rancher/#helm-chart","title":"\u6dfb\u52a0Helm chart\u6e90","text":"<pre><code>helm repo add rancher-latest https://releases.rancher.com/server-charts/latest\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E5%B7%A5%E5%85%B7/rancher/#namespace","title":"\u521b\u5efaNamespace","text":"<pre><code>kubectl create namespace cattle-system\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E5%B7%A5%E5%85%B7/rancher/#_1","title":"\u521b\u5efa\u8bc1\u4e66","text":"<pre><code>sh ./create_self-signed-cert.sh --ssl-domain=xxx.luobo.ca --ssl-trusted-ip=192.168.0.21, 192.168.0.22, 192.168.0.23, 192.168.0.25 --ssl-size=2048 --ssl-date=3650\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E5%B7%A5%E5%85%B7/rancher/#_2","title":"\u5bfc\u5165\u8bc1\u4e66","text":"<pre><code>kubectl -n cattle-system create secret generic tls-ca   --from-file=cacerts.pem=./cakey.pem\n\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E5%B7%A5%E5%85%B7/rancher/#rancher_1","title":"\u5b89\u88c5rancher","text":"<pre><code>helm install rancher rancher-latest/rancher --namespace cattle-system --set hostname=xxx.luobo.ca --set ingress.tls.source=secret --set privateCA=true --set replicas=3\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E5%B7%A5%E5%85%B7/rancher/#_3","title":"\u51fa\u73b0\u9519\u8bef","text":"<pre><code>export KUBECONFIG=/etc/rancher/k3s/k3s.yaml\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/kube-vip/","title":"\u2696\ufe0f \u90e8\u7f72 kube-vip","text":"","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/kube-vip/#_1","title":"\ud83d\udcc3 \u4e0b\u8f7d\u914d\u7f6e\u6587\u4ef6","text":"<pre><code>curl -s https://kube-vip.io/manifests/rbac.yaml &gt; /var/lib/rancher/k3s/server/manifests/kube-vip-rbac.yaml\n</code></pre>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/kube-vip/#_2","title":"\u2328\ufe0f \u914d\u7f6e\u53d8\u91cf","text":"","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/kube-vip/#interface","title":"\u68c0\u67e5 interface","text":"<pre><code>ifconfig \n</code></pre>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/kube-vip/#_3","title":"\u8bbe\u7f6e\u53d8\u91cf","text":"<pre><code>export VIP=192.168.0.100\nexport INTERFACE=eth0\n</code></pre> <p>\u26a0\ufe0f <code>VIP=192.168.0.100</code> \u662fkube-vip\u7684ip</p>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/kube-vip/#manifests","title":"\ud83e\ude9b \u914d\u7f6e manifests","text":"<p>\u5728 /etc/kuberentes/manifests \u4e2d\u8bbe\u7f6e\u9759\u6001 pod \u7684 yaml \u8d44\u6e90\u6e05\u5355\u6587\u4ef6\uff0c\u8fd9\u6837 Kubernetes \u5c31\u4f1a\u81ea\u52a8\u5728\u6bcf\u4e2a\u63a7\u5236\u5e73\u9762\u8282\u70b9\u4e0a\u90e8\u7f72 kube-vip \u7684 pod \u4e86\u3002</p> <pre><code># pull image\nctr image pull docker.io/plndr/kube-vip:latest\n\n# create alias\nalias kube-vip=\"ctr run --rm --net-host docker.io/plndr/kube-vip:latest vip /kube-vip\"\n\n# generate manifest\nkube-vip manifest daemonset \\\n    --arp \\\n    --interface $INTERFACE \\\n    --address $VIP \\\n    --controlplane \\\n    --leaderElection \\\n    --taint \\\n    --services \\\n    --inCluster | tee /var/lib/rancher/k3s/server/manifests/kube-vip.yaml\n</code></pre>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/kube-vip/#kube-vipyaml","title":"\ud83d\udc69\u200d\ud83d\udd27 \u4fee\u6539 kube-vip.yaml","text":"<pre><code>nano /var/lib/rancher/k3s/server/manifests/kube-vip.yaml\n</code></pre> <p>\u4fee\u6539 <code>tolerations</code> \u7247\u6bb5</p> <pre><code>    tolerations:\n    - effect: NoSchedule\n    key: node-role.kubernetes.io/master\n    operator: Exists\n</code></pre>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/kube-vip/#_4","title":"\ud83e\uddea \u6d4b\u8bd5","text":"<pre><code>ping 192.168.0.100\n</code></pre>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/kube-vip/#kubeconfig","title":"\u2699\ufe0f \u4fee\u6539 kubeconfig","text":"<p>K3S: </p> <pre><code>nano /etc/rancher/k3s/k3s.yaml\n</code></pre> <p>\u4fee\u6539 <code>server</code> \u7247\u6bb5</p> <pre><code>server: https://192.168.0.100:6443\n</code></pre>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/","title":"\ud83d\udd75\ufe0f\u200d\u2640\ufe0f \u5e38\u89c1\u95ee\u9898","text":""},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#kubernetes-cluster-unreachable","title":"Kubernetes cluster unreachable","text":"<p>\u5f53\u63d0\u793a <code>Kubernetes cluster unreachable</code> \u9519\u8bef\uff0c\u5982</p> <pre><code>Error: Kubernetes cluster unreachable: Get \"http://localhost:8080/version?timeout=32s\": dial tcp [::1]:8080: connect: connection refused\n\nError: exit code 1, stderr: Error: Kubernetes cluster unreachable: Get \"http://localhost:8080/version?timeout=32s\": dial tcp [::1]:8080: connect: connection refused\n\nError: INSTALLATION FAILED: Kubernetes cluster unreachable: Get \"http://localhost:8080/version\": dial tcp [::1]:8080: connect: connection refused\n</code></pre> <p>\u89e3\u51b3\u65b9\u6cd5\uff1a</p> <pre><code>export KUBECONFIG=/etc/rancher/k3s/k3s.yaml\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E9%AB%98%E5%8F%AF%E7%94%A8k3s/","title":"\ud83c\udfd8 \u90e8\u7f72\u9ad8\u53ef\u7528k3s","text":"<p>\u4f7f\u7528\u5185\u7f6eetcd\u6765\u90e8\u7f72\u9ad8\u53ef\u7528k3s\u3002</p>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E9%AB%98%E5%8F%AF%E7%94%A8k3s/#master-load-balance-treafik","title":"\ud83c\udfe0 \u521b\u5efa\u4e00\u4e2amaster\u8282\u70b9\u5e76\u7981\u7528\u81ea\u5e26\u7684 load balance \u548c treafik","text":"<pre><code>curl -sfL https://get.k3s.io | sh -s - server --cluster-init - --disable traefik --disable servicelb --disable local-storage\n</code></pre>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E9%AB%98%E5%8F%AF%E7%94%A8k3s/#kube-vip","title":"\u2696\ufe0f \u914d\u7f6e kube-vip","text":"<p>kube-vip</p>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E9%AB%98%E5%8F%AF%E7%94%A8k3s/#token","title":"\ud83d\udd12 \u83b7\u53d6 token","text":"<pre><code>sudo cat /var/lib/rancher/k3s/server/node-token\n</code></pre>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E9%AB%98%E5%8F%AF%E7%94%A8k3s/#master","title":"\ud83c\udfe0 \u521b\u5efa\u989d\u5916 master \u8282\u70b9","text":"","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E9%AB%98%E5%8F%AF%E7%94%A8k3s/#_1","title":"\u65b0\u5efa\u914d\u7f6e\u6587\u4ef6","text":"<pre><code>sudo mkdir -p /etc/rancher/k3s\nsudo echo 'token: \"\u521a\u521a\u83b7\u53d6\u7684token\"' &gt; /etc/rancher/k3s/config.yaml\nsudo echo 'server: \"https://kube-vip\u5730\u5740:6443\"' &gt;&gt; /etc/rancher/k3s/config.yaml\n</code></pre>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E9%AB%98%E5%8F%AF%E7%94%A8k3s/#_2","title":"\u5b89\u88c5","text":"<pre><code>curl -sfL https://get.k3s.io | sh -s - --disable traefik --disable servicelb --disable local-storage\n</code></pre>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E9%AB%98%E5%8F%AF%E7%94%A8k3s/#worker","title":"\ud83d\udc77\u200d\u2640\ufe0f \u521b\u5efa worker \u8282\u70b9","text":"<pre><code>curl -sfL https://get.k3s.io | K3S_URL=https://master\u8282\u70b9:6443 K3S_TOKEN=XXXXXXXXXXXXXXXXX sh - --disable traefik\n</code></pre>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E9%AB%98%E5%8F%AF%E7%94%A8k3s/#_3","title":"\ud83d\udd0d \u68c0\u67e5\u65b0\u7684\u8282\u70b9\u662f\u5426\u52a0\u5165\u96c6\u7fa4","text":"<pre><code>kubectl get nodes\n\nNAME        STATUS   ROLES                       AGE    VERSION\nk3s-node0   Ready    control-plane,etcd,master   4m2s   v1.22.6+k3s1\nk3s-node1   Ready    control-plane,etcd,master   45s    v1.22.6+k3s1\nk3s-node4   Ready    control-plane,etcd,master   60s    v1.22.6+k3s1\n</code></pre>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E9%AB%98%E5%8F%AF%E7%94%A8k3s/#_4","title":"\u231a\ufe0f \u63a5\u4e0b\u6765","text":"","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E9%AB%98%E5%8F%AF%E7%94%A8k3s/#helm","title":"\u5b89\u88c5 helm","text":"<p>\u5728\u4efb\u610fmaster\u8282\u70b9\u5b89\u88c5helm</p> <pre><code>curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\nchmod 700 get_helm.sh\n./get_helm.sh\n</code></pre> <p>\u5f53\u4f7f\u7528 helm \u5b89\u88c5\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u63d0\u793a <code>Kubernetes cluster unreachable</code> \u9519\u8bef\uff0c \u89e3\u51b3\u65b9\u6cd5</p>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E9%AB%98%E5%8F%AF%E7%94%A8k3s/#loadbalancer","title":"\u914d\u7f6e loadbalancer","text":"<p>\u4f7f\u7528 MetalLB \u4f5c\u4e3a load balancer</p>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E9%AB%98%E5%8F%AF%E7%94%A8k3s/#treafik-ingress","title":"\u914d\u7f6e treafik ingress","text":"<p>\u4f7f\u7528 treafik \u4f5c\u4e3a ingress controller</p>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E9%AB%98%E5%8F%AF%E7%94%A8k3s/#k3s-master","title":"\u5378\u8f7dk3s master\u8282\u70b9","text":"<pre><code>/usr/local/bin/k3s-uninstall.sh\n</code></pre>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E9%AB%98%E5%8F%AF%E7%94%A8k3s/#k3s-agent","title":"\u5378\u8f7dk3s agent\u8282\u70b9","text":"<pre><code>/usr/local/bin/k3s-agent-uninstall.sh\n</code></pre>","tags":["k3s","k8s \u90e8\u7f72"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik/","title":"\ud83e\udda6 Treafik ingress + \ud83d\udd12 Cloudflare","text":"<p>Treafik ingress \u81ea\u52a8\u914d\u7f6e\u8bc1\u4e66\u3002</p>","tags":["k8s \u90e8\u7f72","ingress"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik/#seret","title":"\ud83d\udd12 \u914d\u7f6e Seret","text":"<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: cloudflare-credentials\n  namespace: traefik\ntype: Opaque\nstringData:\n  email: **admin@admin.com**\n  apiKey: **cloudflare-api-key**\n</code></pre>","tags":["k8s \u90e8\u7f72","ingress"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik/#valueyaml","title":"\ud83d\udcc3 \u521b\u5efa value.yaml","text":"<pre><code>additionalArguments:\n  - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare\n  - --certificatesresolvers.cloudflare.acme.email=your-email@example.com\n  - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1\n  - --certificatesresolvers.cloudflare.acme.storage=/ssl-certs/acme-cloudflare.json\n\nports:\n  web:\n    redirectTo: websecure #\u5f3a\u5236\u4f7f\u7528https\n  websecure:\n    tls:\n      enabled: true\n      certResolver: cloudflare\n\nenv: \n   - name: CF_API_EMAIL\n     valueFrom:\n       secretKeyRef:\n         key: email\n         name: cloudflare-credentials\n   - name: CF_API_KEY\n     valueFrom:\n       secretKeyRef:\n         key: apiKey\n         name: cloudflare-credentials\n\npersistence: \n  enabled: true\n  name: ssl-certs\n  size: 1Gi\n  path: /ssl-certs\n\ningressClass:\n  enabled: true\n  isDefaultClass: true\n</code></pre>","tags":["k8s \u90e8\u7f72","ingress"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik/#treafik","title":"\ud83d\udcbf \u5b89\u88c5treafik","text":"<pre><code>helm repo add traefik https://helm.traefik.io/traefik\nhelm repo update\nhelm install traefik traefik/traefik --create-namespace -n treafik -f value.yaml\n</code></pre>","tags":["k8s \u90e8\u7f72","ingress"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik/#treafik_1","title":"\ud83d\udd0d \u68c0\u67e5treafik","text":"<pre><code>kubectl get service -A\n\nNAMESPACE     NAME             TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)                      AGE\ndefault       kubernetes       ClusterIP      10.43.0.1       &lt;none&gt;          443/TCP                      10m\nkube-system   kube-dns         ClusterIP      10.43.0.10      &lt;none&gt;          53/UDP,53/TCP,9153/TCP       10m\nkube-system   metrics-server   ClusterIP      10.43.239.79    &lt;none&gt;          443/TCP                      10m\ntreafik       traefik          LoadBalancer   10.43.212.101   192.168.0.120   80:30228/TCP,443:30832/TCP   34s\n</code></pre>","tags":["k8s \u90e8\u7f72","ingress"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik/#ingress","title":"\ud83d\udd79\ufe0f \u914d\u7f6e\u4e00\u4e2aingress","text":"<pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: wp-clcreative\n  namespace: wp-clcreative\n  annotations:\n    # (Optional): Annotations for the Ingress Controller\n    # ---\n    # General:\n    # kubernetes.io/ingress.class: traefik\n    # \n    # TLS configuration:\n    # traefik.ingress.kubernetes.io/router.entrypoints: web, websecure\n    # traefik.ingress.kubernetes.io/router.tls: \"true\"\n    # \n    # Middleware:\n    # traefik.ingress.kubernetes.io/router.middlewares:your-middleware@kubernetescrd\nspec:\n  rules:\n  - host: \"your-hostname.com\"  # Your hostname\n    http:\n      paths:\n      # Path-based routing settings:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: your-service-name  # The name of the service\n            port:\n              number: 80  # Service Portnumber\n\n</code></pre>","tags":["k8s \u90e8\u7f72","ingress"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E4%B8%AD%E9%97%B4%E4%BB%B6/","title":"\ud83e\udda6 traefik \u4e2d\u95f4\u4ef6","text":"<p>Middleware (\u4e2d\u95f4\u4ef6) \u4e2d\u95f4\u4ef6\u662f Traefik2.x \u4e2d\u4e00\u4e2a\u975e\u5e38\u6709\u7279\u8272\u7684\u529f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u5404\u79cd\u9700\u6c42\u53bb\u9009\u62e9\u4e0d\u540c\u7684\u4e2d\u95f4\u4ef6\u6765\u6ee1\u8db3\u670d\u52a1\uff0cTraefik \u5b98\u65b9\u5df2\u7ecf\u5185\u7f6e\u4e86\u8bb8\u591a\u4e0d\u540c\u529f\u80fd\u7684\u4e2d\u95f4\u4ef6\uff0c\u5176\u4e2d\u4e00\u4e9b\u53ef\u4ee5\u4fee\u6539\u8bf7\u6c42\uff0c\u5934\u4fe1\u606f\uff0c\u4e00\u4e9b\u8d1f\u8d23\u91cd\u5b9a\u5411\uff0c\u4e00\u4e9b\u6dfb\u52a0\u8eab\u4efd\u9a8c\u8bc1\u7b49\u7b49\uff0c\u800c\u4e14\u4e2d\u95f4\u4ef6\u8fd8\u53ef\u4ee5\u901a\u8fc7\u94fe\u5f0f\u7ec4\u5408\u7684\u65b9\u5f0f\u6765\u9002\u7528\u5404\u79cd\u60c5\u51b5\u3002</p> <p></p>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E4%B8%AD%E9%97%B4%E4%BB%B6/#_1","title":"\ud83c\udfe2 \u81ea\u5e26\u4e2d\u95f4\u4ef6","text":"Middleware Purpose AddPrefix Add a Path Prefix BasicAuth Basic auth mechanism Buffering Buffers the request/response Chain Combine multiple pieces of middleware CircuitBreaker Stop calling unhealthy services Compress Compress the response DigestAuth Adds Digest Authentication Errors Define custom error pages ForwardAuth Authentication delegation Headers Add Update headers IPWhiteList Limit the allowed client IPs InFlightReq Limit the number of simultaneous connections PassTLSClientCert Adding Client Certificates in a Header RateLimit Limit the call frequency RedirectScheme Redirect easily the client elsewhere RedirectRegex Redirect the client elsewhere ReplacePath Change the path of the request ReplacePathRegex Change the path of the request Retry Automatically retry the request in case of errors StripPrefix Change the path of the request StripPrefixRegex Change the path of the request"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E4%B8%AD%E9%97%B4%E4%BB%B6/#_2","title":"\ud83d\udd79\ufe0f \u4f7f\u7528\u4e2d\u95f4\u4ef6","text":""},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E4%B8%AD%E9%97%B4%E4%BB%B6/#_3","title":"\u58f0\u660e\u4e00\u4e2a\u4e2d\u95f4\u4ef6","text":"<p>\u4f7f\u7528\u4ee5\u4e0b\u683c\u5f0f</p> <pre><code>apiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: your-middleware\nspec:\n    ...\n</code></pre> <p>\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u5728dashboard\u4e2d\u67e5\u770b </p>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E4%B8%AD%E9%97%B4%E4%BB%B6/#_4","title":"\u5e94\u7528\u4e2d\u95f4\u4ef6\u5219","text":"<pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: wp-clcreative\n  namespace: wp-clcreative\n  annotations:\n    # Middleware:\n    traefik.ingress.kubernetes.io/router.middlewares: default-your-middleware@kubernetescrd, default-your-middleware-2@kubernetescrd\nspec:\n  rules:\n  - host: \"your-hostname.com\"  # Your hostname\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: your-service-name  # The name of the service\n            port:\n              number: 80  # Service Portnumber\n</code></pre> <p>\u26a0\ufe0f \u6ce8\u610f\u5f53\u4e2d\u4ef6\u4ef6\u65f6\uff0c\u4e2d\u95f4\u4ef6\u7684\u540d\u5b57\u524d\u9762\u8981\u52a0\u4e0anamespace, \u4f8b\u5982\u6211\u4eec\u521b\u5efa\u7684\u4e2d\u95f4\u4ef6\u7684\u540d\u5b57\u662f <code>your-middleware</code> \u5728 <code>default</code> namespace\u4e2d\u3002 \u4f7f\u7528\u8be5\u4e2d\u95f4\u4ef6\u7684\u65f6\u5019\u5b83\u7684\u540d\u5b57\u65f6 <code>default-your-middleware@kubernetescrd</code></p>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E4%B8%AD%E9%97%B4%E4%BB%B6/#https-redirect-https","title":"\ud83d\udd12 \u5f3a\u5236https\u8df3\u8f6c redirect-https","text":"<pre><code>apiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-redirect-https\nspec:\n  redirectScheme:\n    scheme: https\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E4%B8%AD%E9%97%B4%E4%BB%B6/#bacic-auth","title":"\ud83c\udd94 \u7b80\u6613\u8ba4\u8bc1 bacic-auth","text":""},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E4%B8%AD%E9%97%B4%E4%BB%B6/#_5","title":"\u58f0\u660e\u4e2d\u95f4\u4ef6","text":"<pre><code>apiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-basic-auth\nspec:\n  basicAuth:\n    secret: authsecret\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E4%B8%AD%E9%97%B4%E4%BB%B6/#secret","title":"\u58f0\u660e secret","text":"<p>\u5bc6\u7801\u5fc5\u987b\u7528 MD5\uff0cSHA1 \u6216\u8005 BCrypt \u7f16\u7801\u3002</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: authsecret\ntype: kubernetes.io/basic-auth\nstringData:\n  username: test\n  password: test\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E4%B8%AD%E9%97%B4%E4%BB%B6/#_6","title":"\u274c \u9519\u8bef\u9875\u9762","text":"<pre><code>apiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: test-errorpage\nspec:\n  errors:\n    status:\n      - \"500-599\"\n    query: /{status}.html\n    service:\n      name: #\u5904\u7406\u9519\u8bef\u4fe1\u606f\u7684service\n      port: 80\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E4%B8%AD%E9%97%B4%E4%BB%B6/#service-traefik","title":"&gt; \u5173\u4e8e service \u53ef\u4ee5\u53c2\u8003 traefik\u5168\u5c40\u9519\u8bef\u9875\u9762","text":""},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E4%BC%98%E5%85%88%E7%BA%A7/","title":"\ud83e\udda6 traefik \u4f18\u5148\u7ea7","text":"<p>\u4e3a\u907f\u514d\u8def\u5f84\u91cd\u53e0\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u89c4\u5219\u957f\u5ea6\u6309\u964d\u5e8f\u5bf9\u8def\u7ebf\u8fdb\u884c\u6392\u5e8f\u3002\u4f18\u5148\u7ea7\u76f4\u63a5\u7b49\u4e8e\u89c4\u5219\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u6700\u957f\u7684\u957f\u5ea6\u4f18\u5148\u7ea7\u6700\u9ad8\u3002</p> <p>\u4f18\u5148\u7ea7 = 0 \u8868\u793a\u4f7f\u7528\u9ed8\u8ba4\u89c4\u5219\u957f\u5ea6\u6392\u5e8f\u3002</p>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E4%BC%98%E5%85%88%E7%BA%A7/#_1","title":"\ud83d\udd79\ufe0f \u4f7f\u7528\u4f18\u5148\u7ea7","text":"<pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: default-page\n  namespace: traefik\n  annotations:\n    traefik.ingress.kubernetes.io/router.priority: \"1\"\nspec:\n  rules:\n    - host: \"*.yourdomain.xx\"\n      http:\n        paths:\n          - path: /\n            pathType: Prefix\n            backend:\n              service:\n                name: yourservice\n                port:\n                  number: 80\n</code></pre> <p>\u8fd9\u91cc\u914d\u7f6e\u4f18\u5148\u7ea7\u4e3a <code>1</code> \u53ca\u6700\u4f4e\u4f18\u5148\u7ea7\u3002</p>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E5%81%9A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/","title":"\ud83e\udda6 traefik \u53cd\u5411\u4ee3\u7406","text":"<p>TODO</p> <p>[\u539f\u6587]https://blog.eleven-labs.com/en/using-traefik-as-a-reverse-proxy/</p>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E5%81%9A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/#file-provider","title":"\ud83d\udcbb \u4f7f\u7528 file provider","text":"<p>TODO</p>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E5%85%A8%E5%B1%80%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2/","title":"\ud83e\udda6 Treafik ingress \u9ed8\u8ba4\u9519\u8bef\u9875\u9762","text":"<p>Treafik \u81ea\u5e26\u7684\u9519\u8bef\u9875\u9762\u53ea\u4f1a\u663e\u793a <code>404 page not found</code>, \u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u9ed8\u8ba4\u7684\u9519\u8bef\u9875\u9762\u3002</p>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E5%85%A8%E5%B1%80%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2/#_1","title":"\u26a0\ufe0f \u5f00\u59cb","text":"<p>\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u914d\u7f6e\u4e00\u4e2aingress\u4f7f\u7528<code>defaultBackend</code>, \u4f7f\u7528\u4e00\u4e2a service \u8fd4\u6240\u6709\u9519\u8bef\u9875\u9762\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 tarampampam/error-pages \u8fd9\u4e2a\u955c\u50cf\u6765\u65b9\u4fbf\u7684\u751f\u6210\u9519\u8bef\u9875\u9762\u3002</p>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E5%85%A8%E5%B1%80%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2/#deployment","title":"\u58f0\u660e deployment","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: errorpage\n  labels:\n    app: errorpage\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: errorpage\n  template:\n    metadata:\n      labels:\n        app: errorpage\n    spec:\n      containers:\n      - name: errorpage\n        image: tarampampam/error-pages\n        env:\n        - name: TEMPLATE_NAME\n          value: random\n        - name: SHOW_DETAILS\n          value: \"true\"\n        ports:\n        - containerPort: 8080\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E5%85%A8%E5%B1%80%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2/#service","title":"\u58f0\u660e service","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: errorpage\nspec:\n  selector:\n    app: errorpage\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8080\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E5%85%A8%E5%B1%80%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2/#middleware","title":"\u58f0\u660e middleware","text":"<pre><code>apiVersion: traefik.containo.us/v1alpha1\nkind: Middleware\nmetadata:\n  name: errorpage\n  namespace: default\nspec:\n  errors:\n    status:\n      - \"500-599\"\n    query: /{status}.html\n    service:\n      name: errorpage\n      port: 80\n</code></pre> <p>\u5173\u4e8e middleware \u8bf7\u53c2\u8003 traefik\u4e2d\u95f4\u4ef6</p>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/ingress/traefik%E5%85%A8%E5%B1%80%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2/#ingress","title":"\u58f0\u660e ingress","text":"<pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: errorpage\n  # \u4f7f\u7528 errorpage \u4e2d\u95f4\u4ef6\n  annotations:\n  traefik.ingress.kubernetes.io/router.priority: \"1\"\n  traefik.ingress.kubernetes.io/router.middlewares: default-errorpage@kubernetescrd\nspec:\n  defaultBackend:\n    service:\n      name: errorpage # \u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u7a7a\u7684web server\n      port:\n        number: 80\n</code></pre> <p>\u26a0\ufe0f \u8fd9\u4e2a\u65b9\u6cd5\u5e76\u4e0d\u9002\u7528\u9700\u8981TLS\u8ba4\u8bc1\u7684\u9875\u9762</p> <p>\u5b66\u4e60\u5173\u4e8e traefik routing \u7684\u66f4\u591a\u5185\u5bb9</p>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/loadbalance/metalLB/","title":"\ud83d\udd73\ufe0f MetlLB","text":"<p>MetalLB \u662f\u4e00\u4e2a\u5f00\u6e90\u7684 loadbalance</p>","tags":["k8s \u90e8\u7f72","loadbalance"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/loadbalance/metalLB/#_1","title":"\ud83d\udcbf \u5b89\u88c5","text":"","tags":["k8s \u90e8\u7f72","loadbalance"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/loadbalance/metalLB/#valuesyaml","title":"\u521b\u5efavalues.yaml","text":"<pre><code>configInline:\n  address-pools:\n   - name: default\n     protocol: layer2\n     addresses:\n     - 192.168.0.120-192.168.0.130\n</code></pre> <p>\u8fd9\u5c06\u914d\u7f6e\u4e00\u4e2a\u7531 MetalLB \u4e8c\u5c42\u6a21\u5f0f\u63a7\u5236\u7684 service \u5916\u90e8 IP \u6bb5\u4e3a <code>192.168.0.120-192.168.0.130</code>\u3002</p>","tags":["k8s \u90e8\u7f72","loadbalance"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/loadbalance/metalLB/#helm-metallb","title":"\u901a\u8fc7helm\u5b89\u88c5 MetalLB","text":"<pre><code>helm repo add metallb https://metallb.github.io/metallb\nhelm repo update\nhelm install metallb metallb/metallb -f values.yaml --create-namespace -n metallb\n</code></pre>","tags":["k8s \u90e8\u7f72","loadbalance"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/loadbalance/metalLB/#metallb","title":"\ud83d\udd0d \u68c0\u67e5MetalLB","text":"<pre><code>kubectl get pods -n metallb\n</code></pre>","tags":["k8s \u90e8\u7f72","loadbalance"]},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E5%A5%87%E6%80%AA%E7%9A%84%E9%85%8D%E7%BD%AE/zerotier%E5%BC%82%E5%9C%B0%E9%9B%86%E7%BE%A4/","title":"\ud83c\udf0d \u901a\u8fc7 zerotier \u6765\u90e8\u7f72\u96c6\u7fa4","text":"<p>\u539f\u6587</p>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E5%A5%87%E6%80%AA%E7%9A%84%E9%85%8D%E7%BD%AE/zerotier%E5%BC%82%E5%9C%B0%E9%9B%86%E7%BE%A4/#zerotier_1","title":"\ud83d\udcbb \u65b0\u5efa zerotier \u7f51\u7edc","text":"<p>zerotier</p> <p>\u65b0\u5efa\u4e00\u4e2a\u7f51\u7edc</p> <p></p>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E5%A5%87%E6%80%AA%E7%9A%84%E9%85%8D%E7%BD%AE/zerotier%E5%BC%82%E5%9C%B0%E9%9B%86%E7%BE%A4/#zerotier_2","title":"\ud83d\udcbf \u5b89\u88c5zerotier","text":"<pre><code>curl -s https://install.zerotier.com | sudo bash\nzerotier-cli join **Network ID**\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E5%A5%87%E6%80%AA%E7%9A%84%E9%85%8D%E7%BD%AE/zerotier%E5%BC%82%E5%9C%B0%E9%9B%86%E7%BE%A4/#zerotier-router","title":"\ud83c\udf0d \u914d\u7f6e zerotier 'router'","text":"<p>\u5728debian\u73af\u5883\u4e0b</p> <pre><code># Ensure that we can forward packets between interfaces\nsudo sysctl net.ipv4.ip_forward=1\nsudo sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/g' /etc/sysctl.conf\n\n# Set up iptables rules\nip link | awk -F: '$0 !~ \"lo|vir|wl|^[^0-9]\"{print $2;getline}'\n# eth0        &lt;== \u7269\u7406\u7f51\u53e3\n# ztyou2j6dw  &lt;== Zerotier\u865a\u62df\u7f51\u53e3\n\nPHY_IFACE=\"eth0\"\nZT_IFACE=\"$(ip l | grep 'zt' | awk '{print substr($2,1,length($2)-1)}')\" # &lt;== This command will grab your ZeroTier interface name\nsudo iptables -t nat -A POSTROUTING -o $PHY_IFACE -j MASQUERADE\nsudo iptables -A FORWARD -i $PHY_IFACE -o $ZT_IFACE -m state --state RELATED,ESTABLISHED -j ACCEPT\nsudo iptables -A FORWARD -i $ZT_IFACE -o $PHY_IFACE -j ACCEPT\n\n# Make sure the rules are persistent after reboot/poweroff\nsudo apt install iptables-persistent\nsudo bash -c iptables-save &gt; /etc/iptables/rules.v4\n\n# Ensure that ZeroTier always comes back up after a reboot\nsudo systemctl enable zerotier-one\n</code></pre>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E5%A5%87%E6%80%AA%E7%9A%84%E9%85%8D%E7%BD%AE/zerotier%E5%BC%82%E5%9C%B0%E9%9B%86%E7%BE%A4/#zerotier_3","title":"\ud83d\udcd6 \u914d\u7f6e zerotier","text":"<p>\u8fdb\u5165zerotier\u7f51\u7edc &gt; Advanced &gt; Managed Routes &gt; Add Routes</p> <p></p> <ul> <li> <p>Destination - router\u6240\u5904\u7684\u7f51\u6bb5 \u5982192.168.0.0/24</p> </li> <li> <p>(Via) - router\u7684\u865a\u62dfip\u5730\u5740</p> </li> </ul>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E5%A5%87%E6%80%AA%E7%9A%84%E9%85%8D%E7%BD%AE/zerotier%E5%BC%82%E5%9C%B0%E9%9B%86%E7%BE%A4/#_1","title":"\ud83e\uddea \u6d4b\u8bd5","text":"<p>\u5c1d\u8bd5 ping router \u7f51\u6bb5\u7684\u8bbe\u5907\u3002</p>"},{"location":"%F0%9F%93%A6%20Container/%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/%E5%A5%87%E6%80%AA%E7%9A%84%E9%85%8D%E7%BD%AE/zerotier%E5%BC%82%E5%9C%B0%E9%9B%86%E7%BE%A4/#_2","title":"\u231a\ufe0f \u63a5\u4e0b\u6765","text":"<p>\u6784\u5efa\u9ad8\u53ef\u7528k3s</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/","title":"\u5206\u652f\u57fa\u7840","text":"<ul> <li>Git\u5bf9\u5206\u652f\u64cd\u4f5c\u975e\u5e38\u5feb\uff0c\u6240\u4ee5Git\u9f13\u52b1\u6211\u4eec\u4f7f\u7528\u5206\u652f\u5b8c\u6210\u67d0\u4e2a\u4efb\u52a1\uff0c\u5408\u5e76\u540e\u518d\u5220\u9664\u5206\u652f\uff0c\u8fd9\u6837\u66f4\u52a0\u5b89\u5168\u3002</li> <li>Git\u628a\u6bcf\u6b21\u63d0\u4ea4\u90fd\u4e32\u6210\u4e00\u6761\u65f6\u95f4\u7ebf\uff0c\u6bcf\u6761\u65f6\u95f4\u7ebf\u90fd\u662f\u4e00\u4e2a\u5206\u652f\u3002 <code>main</code> \u662f\u4e3b\u5206\u652f\u3002</li> <li><code>HEAD</code> \u4e25\u683c\u6765\u8bf4\u4e0d\u662f\u6307\u5411\u63d0\u4ea4\uff0c\u800c\u662f\u6307\u5411 <code>main</code>\uff0c<code>main</code> \u6307\u9488\u624d\u662f\u6307\u5411\u7684\u63d0\u4ea4\uff0c\u6240\u4ee5 <code>HEAD</code> \u6307\u5411\u7684\u5c31\u662f\u5f53\u524d\u5206\u652f\u3002</li> <li> <p>\u6700\u521d\uff0c<code>main</code> \u5206\u652f\u662f\u4e00\u6761\u7ebf\uff0cGit\u7528<code>master</code> \u6307\u5411\u6700\u65b0\u7684\u63d0\u4ea4, \u5728\u7528 <code>HEAD</code> \u6307\u5411 <code>main</code>, \u5c31\u80fd\u786e\u5b9a\u5f53\u524d\u5206\u652f\uff0c\u4ee5\u53ca\u5f53\u524d\u5206\u652f\u7684\u63d0\u4ea4\u70b9\uff1a ![[58BDEA30-8BE6-4BC1-B642-0844A5D62DE6.png]]</p> </li> <li> <p>\u6bcf\u6b21\u63d0\u4ea4\uff0c<code>main</code> \u5206\u652f\u90fd\u4f1a\u5411\u524d\u79fb\u52a8\u4e00\u6b65\uff0c\u968f\u7740\u4e0d\u65ad\u63d0\u4ea4\uff0c<code>main</code> \u5206\u652f\u7684\u7ebf\u4e5f\u4f1a\u8d8a\u6765\u8d8a\u957f\u3002</p> </li> </ul>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/#_2","title":"\u521b\u5efa\u5206\u652f","text":"<pre><code>git checkout -b &lt;branch&gt;\n</code></pre> <pre><code>- `-b` \u53c2\u6570\u8868\u793a\u521b\u5efa\u5e76\u5207\u6362\uff0c\u76f8\u5f53\u4e8e\u6267\u884c\u4e86\u4e24\u6761\u547d\u4ee4\uff1a\n</code></pre> <p>```shell git branche  git checkout  <pre><code>\n\u6216\u8005\n```shell\ngit switch -c &lt;branch&gt; \n</code></pre> <ul> <li>\u5f53\u521b\u5efa\u65b0\u7684\u5206\u652f\uff0c\u4f8b\u5982 <code>dev</code>\uff0cGit\u4f1a\u65b0\u5efa\u4e00\u4e2a\u6307\u9488\u53eb <code>dev</code>, \u6307\u5411 <code>main</code> \u76f8\u540c\u7684\u63d0\u4ea4\uff0c\u518d\u628a <code>HEAD</code> \u6307\u5411 <code>dev</code>, \u4ee5\u6b64\u8868\u793a\u5206\u652f\u5728 <code>dev</code> \u4e0a\uff1a ![[F74A098B-D258-4941-BFBF-BC7D283B9325.png]]</li> <li>\u56e0\u6b64\uff0cGit\u521b\u5efa\u4e00\u4e2a\u5206\u652f\u5f88\u5feb\uff0c\u56e0\u4e3a\u9664\u4e86\u589e\u52a0\u4e00\u4e2a <code>dev</code> \u6307\u9488\uff0c\u6539\u53d8\u4e86 <code>HEAD</code> \u7684\u6307\u5411\uff0c\u5de5\u4f5c\u533a\u7684\u6587\u4ef6\u90fd\u6ca1\u6709\u4efb\u4f55\u53d8\u5316\u3002</li> <li>\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u5bf9\u5de5\u4f5c\u533a\u7684\u4fee\u6539\u548c\u63d0\u4ea4\u5c31\u662f\u9488\u5bf9 <code>dev</code> \u5206\u652f\u4e86\uff0c\u6bd4\u5982\u65b0\u63d0\u4ea4\u4e00\u6b21\u540e\uff0c<code>dev</code> \u6307\u9488\u5f80\u524d\u79fb\u52a8\u4e00\u6b65\uff0c \u800c <code>main</code> \u6307\u9488\u4e0d\u53d8\u3002  ![[C1377BB4-23C6-46E5-AE7B-FB761C8A73AC.png]]</li> </ul>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/#_3","title":"\u67e5\u770b\u5206\u652f","text":"<pre><code>git branch\n*  &lt;branch&gt;\n    main\n</code></pre> <p><code>*</code> \u8868\u793a\u5f53\u524d\u5206\u652f</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/#_4","title":"\u67e5\u770b\u5206\u652f\u5dee\u5f02","text":"<pre><code>git diff &lt;branch1&gt; &lt;branch2&gt;\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/#_5","title":"\u4ec5\u5dee\u5f02\u90e8\u5206","text":"<pre><code>git diff &lt;branch1&gt; &lt;branch2&gt;\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/#_6","title":"\u6bcf\u4e2a\u63d0\u4ea4\u662f\u5728\u54ea\u4e2a\u5206\u652f","text":"<pre><code>git diff &lt;branch1&gt;..&lt;branche2&gt;\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/#_7","title":"\u5207\u6362\u5206\u652f","text":"<pre><code>git checkout &lt;branch&gt;\n</code></pre> <p>\u65b0\u7248\u672c\u7684Git\u63d0\u4f9b\u4e86\u65b0\u7684 <code>git switch</code> \u547d\u4ee4\u6765\u5207\u6362\u5206\u652f\u3002</p> <pre><code>git switch &lt;branch&gt;\n</code></pre> <p>\u6ce8\uff1a\u5728\u5207\u6362\u5206\u652f\u4e4b\u524d\u6211\u4eec\u9700\u8981\u5148[[Git Basic#Commit|\u63d0\u4ea4]]\u6216\u8005\u6682\u5b58\u5f53\u524d\u7684\u4fee\u6539\u3002</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/#_8","title":"\u5408\u5e76\u5206\u652f","text":"<p>\u5728\u5207\u6362\u5206\u652f\u540e\u6211\u4eec\u53ef\u4ee5\u5408\u5e76\u5206\u652f\u3002</p> <pre><code>git merge &lt;branch&gt;  \n</code></pre> <p>![[5D3C71DA-4E1D-4565-83C8-054B69011218.png]] - \u628a <code>dev</code> \u5408\u5e76\u5230 <code>main</code> \u4e0a\uff0c\u6700\u7b80\u5355\u7684\u529e\u6cd5\u5c31\u662f\u628a <code>main</code> \u6307\u5411 <code>dev</code> \u7684\u5f53\u524d\u63d0\u4ea4\u3002\u6240\u4ee5Git\u5408\u5e76\u5206\u652f\u4e5f\u5f88\u5feb\uff0c\u540c\u6837\u5c31\u662f\u6539\u53d8\u6307\u9488\uff0c\u5de5\u4f5c\u533a\u5185\u5bb9\u4e5f\u4e0d\u53d8\u3002 ![[D7E559BD-64D8-45B9-BE34-E626BE71B713.png]] - \u5f53\u5408\u5e76\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u5220\u9664 <code>dev</code> \u5206\u652f\u3002\u8be5\u64cd\u4f5c\u5176\u5b9e\u5c31\u662f\u628a <code>dev</code> \u6307\u9488\u7ed9\u5220\u6389\uff0c\u5220\u6389\u540e\uff0c\u6211\u4eec\u5c31\u5269\u4e0b\u4e00\u6761 <code>master</code> \u5206\u652f\u3002 ![[16205865-6E5D-413B-8B00-D7E3C92AE223.png]]</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/#_9","title":"\u5408\u5e76\u6a21\u5f0f","text":"<p>\u5f53\u6267\u884c\u5408\u5e76\u547d\u4ee4\u540e\u4f1a\u8f93\u51fa\u5408\u5e76\u6a21\u5f0f\uff0c\u6bd4\u5982 <code>Fast-forward</code>\uff1a</p> <pre><code>git merge dev\nUpdating d46f35e..b17d20e\nFast-forward\n readme.txt | 1 +\n 1 file changed, 1 insertion(+)\n</code></pre> <ul> <li><code>Fast-forward</code>  \u5feb\u901f\u6a21\u5f0f\uff0c\u76f4\u63a5\u628a\u5f53\u524d\u5206\u652f\u7684\u6307\u9488\u79fb\u52a8\u5230\u88ab\u5408\u5e76\u7684\u5206\u652f\u3002</li> <li>\u6211\u4eec\u53ef\u4ee5\u5f3a\u5236\u7981\u6b62 <code>Fast-forwad</code> \u6a21\u5f0f\uff0c\u8fd9\u6837Git\u4f1a\u5728merge\u65f6\u80dc\u573a\u4e00\u4e2a\u65b0\u7684commit\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4ece\u5386\u53f2\u4e0a\u770b\u51fa\u5206\u652f\u4fe1\u606f\u3002</li> </ul> <pre><code>git merge dev --no-ff\n</code></pre> <p>\u6ce8 \uff1a<code>--no-ff</code> \u8868\u793a\u7981\u6b62 <code>Fast-forward</code>\u3002</p> <p>\u8fd9\u6837\u5f53\u6211\u4eec\u67e5\u770b[[Git Basic#Log|log]]\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\uff1a</p> <pre><code>git log --graph --pretty=oneline --abbrev-commit\n*   e1e9c68 (HEAD -&gt; master) merge with no-ff\n|\\  \n| * f52c633 (dev) add merge\n|/  \n*   cf810e4 conflict fixed\n</code></pre> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u4e0d\u4f7f\u7528 <code>Fast-forward</code> \u7684\u65f6\u5019merge\u5c31\u50cf\uff1a ![[E47597E5-9027-4C40-9D37-19100D77C936.png]]</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/#_10","title":"\u5220\u9664\u5206\u652f","text":"<pre><code>git branch -d &lt;branch&gt;\n</code></pre> <p>\u5bf9\u4e8e\u90a3\u4e9b\u6ca1\u6709\u63d0\u4ea4\u8fc7\u7684\u5206\u652f\uff0c\u9700\u8981 <code>-D</code> \u53c2\u6570\u6765\u5f3a\u884c\u4e22\u5f03\u3002</p> <pre><code>git branch -D &lt;branch&gt;\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/#_11","title":"\u5206\u652f\u7b56\u7565","text":"<p>\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5e94\u8be5\u6309\u7167\u51e0\u4e2a\u57fa\u672c\u539f\u5219\u8fdb\u884c\u5206\u652f\u7ba1\u7406\uff1a</p> <ul> <li><code>main</code> \u4ec5\u7528\u6765\u53d1\u5e03\u65b0\u7248\u672c\uff0c\u5e73\u65f6\u4e0d\u5e94\u5728\u4e0a\u9762\u5de5\u4f5c\u3002</li> <li><code>dev</code> \u5de5\u4f5c\u5206\u652f\uff0c\u5728\u67d0\u4e2a\u65f6\u95f4\u628a <code>dev</code> \u5408\u5e76\u5230 <code>main</code>, \u5982\u53d1\u5e03\u7248\u672c\u3002</li> </ul>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/#bug","title":"Bug\u5206\u652f","text":"<p>\u6bcf\u4e2abug\u90fd\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u65b0\u7684\u4e34\u65f6\u5206\u652f\u6765\u4fee\u590d\uff0c\u4fee\u590d\u540e\u5728\u5408\u5e76\u5206\u652f\uff0c\u5e76\u5220\u9664\u4e34\u65f6\u5206\u652f\u3002</p> <p>\u5f53\u6211\u4eec\u628a\u4fee\u590d\u7684bug\u5206\u652f\u4e0e <code>main</code> \u5206\u652f\u5408\u5e76\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u63d0\u4ea4\u4e5f\u4e0e <code>dev</code> \u5206\u652f\u5408\u5e76\uff1a</p> <pre><code>git checkout dev //\u5207\u6362\u5206\u652f\ngit branch //\u68c0\u67e5\u5206\u652f\n* dev\n  main\ngit cherry-pick &lt;\u4fee\u590dbug\u7684\u63d0\u4ea4id&gt;\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/#feature","title":"Feature\u5206\u652f","text":"<p>\u56e0\u4e3a\u6211\u4eec\u4e0d\u5e0c\u671b\u4e00\u4e9b\u5b9e\u9a8c\u6027\u8d28\u7684\u4ee3\u7801\u628a\u4e3b\u5206\u652f\u641e\u4e71\u4e86\uff0c\u6240\u4ee5\uff0c\u6bcf\u6dfb\u52a0\u4e00\u4e2a\u65b0\u529f\u80fd\uff0c\u6700\u597d\u65b0\u5efa\u4e00\u4e2a <code>feature</code> \u5206\u652f\uff0c\u5e76\u5728\u4e0a\u9762\u8fdb\u884c\u5f00\u53d1\u3002\u5b8c\u6210\u540e\uff0c\u5408\u5e76\u8fdb <code>dev</code>\uff0c\u5220\u9664 <code>feature</code> \u5206\u652f\u3002</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/#stash","title":"Stash","text":"<p>\u4f46\u662f\u901a\u5e38\u5f53\u6211\u4eec\u4fee\u590dbug\u7684\u65f6\u5019\uff0c\u5728\u5f53\u524d\u5206\u652f\u7684\u5de5\u4f5c\u624d\u505a\u4e86\u4e00\u534a\uff0c\u4f46\u662f\u6211\u4eec\u53c8\u4e0d\u60f3\u63d0\u4ea4\u5b83\u3002\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u4f7f\u7528 <code>stash</code> \u529f\u80fd\uff0c\u5b83\u5c31\u76f8\u5f53\u4e8e\u628a\u5de5\u4f5c\u73b0\u573a\u201c\u5b58\u50a8\u201c\u8d77\u6765\uff0c\u7b49\u4ee5\u540e\u6062\u590d\u73b0\u573a\u540e\u7ee7\u7eed\u5de5\u4f5c\u3002</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/#_12","title":"\u6682\u5b58","text":"<pre><code>git stash \ngit stash save &lt;description&gt;\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/#_13","title":"\u5217\u51fa","text":"<pre><code>git stash list\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/#_14","title":"\u53d6\u51fa","text":"<pre><code>git stash pop\ngit stash pop stash@{1}\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/#_15","title":"\u5220\u9664","text":"<pre><code>git stash clear\ngit stash drop stash@{1}\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/#_16","title":"\u5dee\u5f02","text":"<pre><code>git stash show \ngit stash show stash@{1}\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Branch%20Control/#_17","title":"\u65b0\u5206\u652f","text":"<p>\u5f53\u91cd\u65b0\u5e94\u7528\u6682\u5b58\u7684\u65f6\u5019\u5982\u679c\u9020\u6210\u51b2\u7a81\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6682\u5b58\u65b0\u5efa\u4e00\u4e2a\u5206\u652f\u3002</p> <pre><code>git stash branch &lt;new_branch_name&gt; stash@{1}\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Directory/","title":"Directory","text":"<p>Git \u8ddf\u8e2a\u7684\u662f\u4fee\u6539\uff0c\u800c\u975e\u6587\u4ef6\u3002 \u4fee\u6539\u5305\u62ec\uff1a - \u65b0\u589e - \u5220\u9664 - \u66f4\u6539</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Directory/#working-directory","title":"Working Directory","text":"<p>\u5de5\u4f5c\u533a\uff0c\u5c31\u662f\u6211\u4eec\u7535\u8111\u91cc\u80fd\u770b\u5230\u7684\u76ee\u5f55\u3002</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Directory/#repository","title":"Repository","text":"<p>\u7248\u672c\u5e93\uff0c\u5de5\u4f5c\u533a\u4e2d\u6709\u4e00\u4e2a\u9690\u85cf\u7684 <code>.git</code> \u76ee\u5f55\uff0c\u8fd9\u4e0d\u7b97\u5de5\u4f5c\u533a\uff0c\u800c\u662f\u4e00\u4e2aGit\u7684\u7248\u672c\u5e93\u3002</p> <p>\u7248\u672c\u5e93\u4e2d\u5b58\u5728\u5f88\u591a\u4e1c\u897f\uff1a - stage (index)\uff1a \u6682\u5b58\u533a - \u5206\u652f\uff1a\u5305\u62ecGit\u81ea\u52a8\u4e3a\u6211\u4eec\u521b\u5efa\u7684\u7b2c\u4e00\u4e2a\u5206\u652f <code>main</code>, \u4ee5\u53ca\u6307\u5411 <code>master</code> \u7684\u4e00\u4e2a\u6307\u9488 <code>HEAD</code>\u3002</p> <p>![[3550E7F3-8556-4EC1-9839-C792DA938423.jpeg]]</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Directory/#stage","title":"Stage","text":"<p>\u6682\u5b58\u533a\uff0c\u9700\u8981\u63d0\u4ea4\u7684\u6587\u4ef6\u4fee\u6539\u6682\u65f6\u653e\u5230\u6682\u5b58\u533a\u76f4\u5230\u63d0\u4ea4\u3002 - \u5f53\u6211\u4eec\u4f7f\u7528 <code>git add</code> \u628a\u6587\u4ef6\u6dfb\u52a0\u8fdb\u53bb\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u6587\u4ef6\u4fee\u6539\u6dfb\u52a0\u5230\u6682\u5b58\u533a\u3002 - \u5f53\u6211\u4eec\u4f7f\u7528 <code>git commit</code> \u63d0\u4ea4\u66f4\u6539\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u6587\u4ef6\u63d0\u4ea4\u5230\u5f53\u524d\u5206\u652f\uff0c\u5982\u9ed8\u8ba4\u7684 <code>main</code>\u3002</p> <p>\u5f53\u6240\u6709\u5de5\u4f5c\u533a\u91cc\u7684\u6587\u4ef6\u90fd\u88ab\u63d0\u4ea4\uff0c\u5e76\u4e14\u6ca1\u6709\u5728\u505a\u4efb\u4f55\u4fee\u6539\uff0c\u90a3\u4e48\u5de5\u4f5c\u533a\u5c31\u662f\u2018\u5e72\u51c0\u2019\u7684\u3002</p> <pre><code>git status\nOn branch master\nnothing to commit, working tree clean\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Git%20Basic/","title":"GIt","text":"<p>\u5206\u5e03\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7edf</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Git%20Basic/#repository","title":"Repository","text":"<p>\u4ed3\u5e93\uff0c\u4e00\u4e2a\u53ef\u4ee5\u88ab <code>Git</code> \u7ba1\u7406\u7684\u76ee\u5f55\u3002</p> <pre><code>mkdir mydir\ncd mydir\ngit init\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Git%20Basic/#add","title":"Add","text":"<p>\u6dfb\u52a0\u6587\u4ef6\u5230\u4ed3\u5e93 <code>git add &lt;file&gt;</code></p> <pre><code>git add readme.md\ngit add .\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Git%20Basic/#remove","title":"Remove","text":"<p>\u5220\u9664\u7f13\u5b58\u533a\u6587\u4ef6</p> <pre><code>git rm readme.md\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Git%20Basic/#commit","title":"Commit","text":"<p>\u63d0\u4ea4\u6587\u4ef6\u5230\u4ed3\u5e93 <code>git commit -m &lt;message&gt;</code></p> <pre><code>git commit -m \u201cwrote a readme file\u201d\n</code></pre> <p>\u5f53<code>git commit</code>\u547d\u4ee4\u6267\u884c\u6210\u529f\u540e\u4f1a\u544a\u8bc9\u6211\u4eec\uff0c - <code>x file change</code> \u6709\u51e0\u4e2a\u6587\u4ef6\u88ab\u6539\u52a8 - <code>x insertions</code> \u63d2\u5165\u4e86\u51e0\u884c\u5185\u5bb9</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Git%20Basic/#status","title":"Status","text":"<p>\u83b7\u53d6\u4ed3\u5e93\u5f53\u524d\u72b6\u6001</p> <pre><code>git status\n</code></pre> <p>\u5f53<code>git status</code>\u6267\u884c\u6210\u529f\u540e\u4f1a\u544a\u8bc9\u6211\u4eec\uff0c - <code>On branch</code> \u5904\u4e8e\u54ea\u4e2a\u5206\u652f - <code>mkdified</code>  \u54ea\u4e9b\u6587\u4ef6\u6709\u53d8\u52a8\uff0c\u4f46\u8fd8\u6ca1\u6709\u88ab\u63d0\u4ea4</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Git%20Basic/#diff","title":"Diff","text":"<p>\u67e5\u770b\u4fee\u6539\u7684\u5185\u5bb9 <code>git diff &lt;file&gt;</code> </p> <pre><code>git diff readme.txt\ngit diff HEAD \u2014 readme.txt\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Git%20Basic/#log","title":"Log","text":"<p>\u67e5\u770b\u5386\u53f2</p> <pre><code>git log\n</code></pre> <p>\u6ce8 \u8f93\u51fa\u5f97 <code>commit id</code> \u4e0d\u662f\u9012\u589e\u7684\u6570\u5b57\uff0c\u800c\u662f\u4e00\u4e2aSHA1\u8ba1\u7b97\u51fa\u6765\u7684\u975e\u5e38\u5927\u7684\u6570\u5b57\uff0c\u4ee516\u8fdb\u5236\u8868\u793a\u3002</p> <ul> <li><code>--graph</code>  \u67e5\u770b\u5206\u652f\u5408\u5e76\u56fe</li> <li><code>--pretty=oneline</code></li> <li><code>--abbrev-commit</code></li> </ul>"},{"location":"%F0%9F%94%A7%20Tool/Git/Git%20Basic/#reflog","title":"Reflog","text":"<p>\u67e5\u770b\u6211\u4eec\u6267\u884c\u7684\u6bcf\u4e00\u4e2a Git\u547d\u4ee4</p> <pre><code>git reflog\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Git%20Config/","title":"\u663e\u793a\u989c\u8272","text":"<p>\u8ba9\u547d\u4ee4\u8f93\u51fa\u770b\u8d77\u6765\u66f4\u9192\u76ee\uff0cgit\u4f1a\u9002\u5730\u7684\u663e\u793a\u4e0d\u540c\u7684\u989c\u8272\u3002</p> <pre><code>git config --global color.hi true\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Git%20Config/#_2","title":"\u9ed8\u8ba4\u7f16\u8f91\u5668","text":"<p>Git\u9ed8\u8ba4\u7684\u7f16\u8f91\u5668\u662f <code>vi</code>\uff0c \u5982\u679c\u89c9\u5f97\u96be\u7528\u53ef\u4ee5\u7528\u5176\u4ed6\u7f16\u8f91\u5668\u66ff\u4ee3\u3002\u5982 <code>vscode</code> \uff1a</p> <pre><code>git config --global core.editor \"code --wait\"\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Git%20Config/#_3","title":"\u5ffd\u7565\u7279\u6b8a\u6587\u4ef6","text":"<p>\u6709\u4e9b\u5728\u5de5\u4f5c\u533a\u4f46\u53c8\u4e0d\u9700\u8981\u63d0\u4ea4\u7684\u6587\u4ef6\uff0c\u6bd4\u5982\u6570\u636e\u5e93\u5bc6\u7801\u914d\u7f6e\u4e4b\u7c7b\u3002\u53ef\u4ee5\u4f7f\u7528 <code>.gitignore</code> \u6587\u4ef6\u5ffd\u7565\u8fd9\u4e9b\u6587\u4ef6\u3002</p> <pre><code># \u5355\u4e2a\u6587\u4ef6\nsql.db\ndesktop.ini\n\n# \u6392\u9664\u6240\u6709.\u5f00\u5934\u7684\u6587\u4ef6\n.*\n\n# \u6392\u9664\u6240\u4ee5log\u7ed3\u5c3e\u7684\u6587\u4ef6\n*.log\n\n# \u6392\u9664history\u6587\u4ef6\u5939\n./history\n\n# \u4e0d\u6392\u9664.gitignore\n!.gitignore\n</code></pre> <p>\u5f53\u6211\u4eec\u5c1d\u8bd5\u5728\u6dfb\u52a0\u4e00\u4e9b\u51fa\u73b0\u5728 <code>.gitignore</code> \u4e2d\u7684\u6587\u4ef6\u5c31\u4f1a\u53d1\u73b0\u65e0\u6cd5\u6dfb\u52a0\uff0c\u6bd4\u5982\uff1a</p> <pre><code>git add sql.db\n\nThe following paths are ignored by one of your .gitignore files:\nsql.db\nUse -f if you really want to add them\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Git%20Config/#gitignore","title":"\u68c0\u67e5.gitignore\u683c\u5f0f","text":"<pre><code>git check-ignore -v &lt;file&gt;\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Git%20Config/#_4","title":"\u914d\u7f6e\u8d26\u6237","text":"<pre><code>git config --global user.email &lt;your-email-address&gt;\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Git%20Config/#_5","title":"\u914d\u7f6e\u522b\u540d","text":"<p>\u6bd4\u5982\u6211\u4eec\u60f3\u8ba9 <code>git st</code> \u8868\u793a <code>git status</code></p> <pre><code>git config --global alias.st status\n</code></pre> <p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u914d\u7f6e\u4e00\u4e2a <code>git last</code>, \u663e\u793a\u6700\u540e\u4e00\u6b21\u63d0\u4ea4\u7684\u4fe1\u606f\uff1a</p> <pre><code>git config --global alias.last 'log -1'\n</code></pre> <p>\u5f53\u7136\u4e5f\u53ef\u4ee5\u66f4\u52a0\u590d\u6742:</p> <pre><code>git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit\"\n</code></pre> <p>\u6ce8 <code>--global</code> \u662f\u9488\u5bf9\u5f53\u524d\u7528\u6237\u8d77\u4f5c\u7528\uff0c\u5982\u679c\u4e0d\u52a0\uff0c\u90a3\u53ea\u9488\u5bf9\u5f53\u524d\u7684\u4ed3\u5e93\u8d77\u4f5c\u7528\u3002</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Git%20Config/#_6","title":"\u914d\u7f6e\u6587\u4ef6","text":"<p>\u6bcf\u4e2a\u4ed3\u5e93\u7684Git\u914d\u7f6e\u6587\u4ef6\u90fd\u5728 <code>.git/config</code> \u6587\u4ef6\u4e2d\uff1a</p> <pre><code>cat .git/config\n\n[core]\n    repositoryformatversion = 0\n    filemode = true\n    bare = false\n    logallrefupdates = true\n    ignorecase = true\n    precomposeunicode = true\n[remote \"origin\"]\n    url = git@github.com:michaelliao/learngit.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n    remote = origin\n    merge = refs/heads/master\n[alias]\n    last = log -1\n</code></pre> <p>\u7528\u6237\u7684\u914d\u7f6e\u6587\u4ef6\u5219\u5728\u4e3b\u76ee\u5f55<code>$home</code> \u4e0b\u7684\u4e00\u4e2a\u9690\u85cf\u6587\u4ef6 <code>.gitconfig</code> \u4e2d:</p> <pre><code>cat ~/.gitconfi\n[alias]\n    co = checkout\n    ci = commit\n    br = branch\n    st = status\n[user]\n    name = Your Name\n    email = your@email.com\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Remote%20Repository/","title":"SSH Key","text":"<p>\u9700\u8981\u51c6\u5907SSH key</p> <pre><code>cd ~/.ssh/\nssh-keygen -t rsa -C \"youremail@example.com\"\n</code></pre> <p>\u6267\u884c\u540e\u4f1a\u5728 <code>~/.ssh/</code> \u6587\u4ef6\u5939\u4e2d\u751f\u6210 <code>id_rsa</code> \u548c <code>id_rsa.pub</code> \u4e24\u4e2a\u6587\u4ef6\uff0c\u8fd9\u5c31\u662fSSH key\u7684\u5bc6\u94a5\u5bf9\u3002</p> <ul> <li><code>id_rsa</code> \u79c1\u94a5</li> <li><code>id_rsa.pub</code> \u516c\u94a5</li> </ul> <p>\u63a5\u4e0b\u6765\u8981\u628a\u5b83\u4eec\u90e8\u7f72\u5728\u6211\u4eec\u7684Github/\u670d\u52a1\u5668\u3002</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Remote%20Repository/#_1","title":"\u6dfb\u52a0\u8fdc\u7a0b\u5e93","text":"<p>\u5982\u679c\u5df2\u6709\u672c\u5730\u4ed3\u5e93\u4f46\u662f\u60f3\u8fdb\u884c\u672c\u5730\u5e93\u548c\u8fdc\u7a0b\u5e93\u7684\u540c\u6b65\uff0c\u53ef\u4ee5\u5907\u4efd\u6e90\u7801\uff0c\u53c8\u53ef\u4ee5\u4e0e\u5176\u4ed6\u4eba\u901a\u8fc7\u8fdc\u7a0b\u5e93\u6765\u534f\u4f5c\u3002</p> <p>\u5728\u5efa\u7acb\u597d\u8fdc\u7a0b\u4ed3\u5e93\u4e4b\u540e, \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u4e0e\u672c\u5730\u4ed3\u5e93\u8fdb\u884c\u5173\u8054\u3002</p> <pre><code>git remote add origin git@github.com:YOURNAME/YOURPROJECT.git\n</code></pre> <ul> <li><code>origin</code> \u662fGit\u9ed8\u8ba4\u7684\u8fdc\u7a0b\u5e93\u540d\u79f0\uff0c\u8fd9\u662f\u53ef\u4ee5\u4fee\u6539\u7684\u3002</li> <li><code>YOURNAME</code> \u662f\u4f60\u7684Github\u7528\u6237\u540d\u3002</li> </ul>"},{"location":"%F0%9F%94%A7%20Tool/Git/Remote%20Repository/#_2","title":"\u4ece\u8fdc\u7a0b\u4ed3\u5e93\u514b\u9686","text":"<pre><code>git clone git@github.com:YOURNAME/YOURPROJECT.git\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Remote%20Repository/#_3","title":"\u4ece\u8fdc\u7a0b\u4ed3\u5e93\u66f4\u65b0","text":"<p>\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a - <code>git fetch</code> \u5c06\u8fdc\u7a0b\u4e3b\u673a\u7684\u6700\u65b0\u5185\u5bb9\u62c9\u5230\u672c\u5730\uff0c\u7528\u6237\u68c0\u67e5\u4e86\u4ee5\u540e\u518d\u51b3\u51b3\u5b9a\u662f\u5426\u5408\u5e76\u5230\u672c\u5730\u3002 - <code>git pull</code> \u5c06\u8fdc\u7a0b\u4e3b\u673a\u7684\u6700\u65b0\u5185\u5bb9\u62c9\u5230\u672c\u5730\u540e\u76f4\u63a5\u5408\u5e76\u3002 ![[6B073B8D-2B11-43B5-B9D8-5D1559D2438A.jpeg]] <code>git pull = git fetch + git merge</code></p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Remote%20Repository/#fetch","title":"Fetch","text":"<pre><code>git fetch &lt;\u8fdc\u7a0b\u4e3b\u673a\u540d&gt;\ngit fetch &lt;\u8fdc\u7a0b\u4e3b\u673a\u540d&gt; &lt;\u5206\u652f\u540d&gt;\n</code></pre> <p>\u67e5\u770b\u53d6\u56de\u7684\u66f4\u65b0\u4fe1\u606f\uff1a</p> <pre><code>git log -p FETCH_HEAD\n</code></pre> <p>\u63a5\u4e0b\u6765\u9700\u8981\u624b\u52a8\u5224\u65ad\u662f\u5426\u5408\u5e76\u5230\u5f53\u524d\u5206\u652f\u3002</p> <pre><code>git merge FETCH_HEAD\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Remote%20Repository/#pull","title":"Pull","text":"<pre><code>git pull &lt;\u8fdc\u7a0b\u4e3b\u673a\u540d&gt;\ngit pull &lt;\u8fdc\u7a0b\u4e3b\u673a\u540d&gt; &lt;\u8fdc\u7a0b\u5206\u652f\u540d&gt;:&lt;\u672c\u5730\u5206\u652f\u540d&gt;\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Remote%20Repository/#_4","title":"\u63a8\u9001\u5185\u5bb9","text":"<p>\u628a\u672c\u5730\u4ed3\u5e93\u7684\u5185\u5bb9\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93\u4e0a\uff1a</p> <pre><code>git push -u origin main\n</code></pre> <p>\u8fd9\u91cc\u6211\u4eec\u628a\u672c\u5730 <code>main</code> \u5206\u652f\u63a8\u9001\u5230\u4e86\u8fdc\u7a0b\u4ed3\u5e93\u4e0a\u3002 \u5f53\u6211\u4eec\u7b2c\u4e00\u6b21\u63a8\u9001\u7684\u65f6\u5019\u9700\u8981\u6dfb\u52a0 <code>-u</code> \u53c2\u6570\u3002</p> <ul> <li><code>-u</code> \u4f1a\u628a\u672c\u5730\u7684 <code>main</code> \u5206\u652f\u548c\u8fdc\u7a0b\u7684\u5206\u652f\u5173\u8054\u8d77\u6765\uff0c\u5728\u4ee5\u540e\u7684\u63a8\u9001\u6216\u62c9\u53bb\u65f6\u5c31\u53ef\u4ee5\u7b80\u5316\u547d\u4ee4\u3002</li> </ul> <p>\u73b0\u5728\u8d77\uff0c\u53ea\u8981\u672c\u5730\u505a\u4e86\u63d0\u4ea4\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\uff1a</p> <pre><code>git push origin &lt;branch&gt;\n</code></pre> <p>\u628a\u672c\u5730 <code>main</code> \u5206\u652f\u7684\u6700\u65b0\u4fee\u6539\u6539\u9001\u81f3Git\u670d\u52a1\u5668\u4e86\u3002</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Remote%20Repository/#_5","title":"\u67e5\u770b\u8fdc\u7a0b\u4ed3\u5e93","text":"<pre><code>git remote\ngit remote -v\n</code></pre> <p><code>-v</code> \u5c5e\u6027\u53ef\u4ee5\u663e\u793a\u66f4\u591a\u4fe1\u606f\u3002</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Remote%20Repository/#_6","title":"\u5220\u9664\u4e0e\u8fdc\u7a0b\u4ed3\u5e93\u7684\u8054\u7cfb","text":"<p>\u5982\u679c\u6dfb\u52a0\u65f6\u5730\u5740\u5199\u9519\u4e86\uff0c\u6216\u8005\u60f3\u5220\u9664\u4e0e\u8fdc\u7a0b\u5e93\u7684\u8054\u7cfb\u3002 <code>git remote rm &lt;name&gt;</code></p> <pre><code>git remote rm origin\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Remote%20Repository/#_7","title":"\u591a\u4eba\u534f\u4f5c","text":"<p>\u5f53\u9700\u8981\u5728\u8fdc\u7a0b\u7684\u5206\u652f\u5de5\u4f5c\uff0c\u6bd4\u5982 <code>dev</code>\uff0c\u5c31\u5fc5\u987b\u521b\u5efa\u8fdc\u7a0b <code>orgin</code> \u7684 <code>dev</code> \u5206\u652f\u5230\u672c\u5730\uff1a</p> <pre><code>git checkout -b dev origin/dev\n</code></pre> <p><code>-b</code> \u53c2\u6570\u540c\u65f6\u521b\u5efa\u5e76\u5207\u6362\u5230\u65b0\u5206\u652f</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Remote%20Repository/#_8","title":"\u5176\u4ed6\u4eba\u6700\u8fd1\u7684\u63d0\u4ea4\u4e0e\u4f60\u7684\u6709\u51b2\u7a81","text":"<p>\u89e3\u51b3\u65b9\u6cd5\u662f\u5148\u7528 <code>git pull</code> \u628a\u6700\u65b0\u7684\u63d0\u4ea4\u4ece <code>origin/dev</code> \u6293\u4e0b\u6765\uff0c\u7136\u540e\u5728\u672c\u5730\u5408\u5e76\uff0c\u89e3\u51b3\u51b2\u7a81\uff0c\u5728\u63a8\u9001:</p> <pre><code>git commit -m 'fix conflict'\ngit pull\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Remote%20Repository/#git-pull","title":"git pull \u5931\u8d25","text":"<p>\u5982 <code>git pull</code> \u5931\u8d25\u5e76\u63d0\u793a <code>no tracking information</code>, \u8be5\u95ee\u9898\u7684\u539f\u56e0\u662f\u6ca1\u6709\u6307\u5b9a\u672c\u5730 <code>dev</code> \u5206\u652f\u4e0e\u8fdc\u7a0b <code>origin/dev</code> \u7684\u94fe\u63a5\uff1a</p> <pre><code>git branch --set-upstream-to=origin/&lt;branch&gt; dev\n\ngit pull\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Remote%20Repository/#rebase","title":"Rebase","text":"<p>\u5728\u591a\u4eba\u540c\u65f6\u5de5\u4f5c\u5728\u4e00\u4e2a\u5206\u652f\u4e0a\u65f6\uff0c\u5f88\u5bb9\u6613\u51fa\u73b0\u51b2\u7a81\u3002\u5373\u4f7f\u6ca1\u6709\u51fa\u73b0\u51b2\u7a81\uff0c\u540epush\u7684\u4eba\u4e0d\u5f97\u4e0d\u5148pull\uff0c\u5728\u672c\u5730\u5408\u5e76\uff0c\u7136\u540e\u624d\u80fdpush\u3002\u8fd9\u6837\u4f1a\u8ba9\u63d0\u4ea4\u770b\u8d77\u6765\u5f88\u4e71\uff0c\u4f8b\u5982\uff1a</p> <pre><code>$ git log --graph --pretty=oneline --abbrev-commit\n* d1be385 (HEAD -&gt; master, origin/master) init hello\n*   e5e69f1 Merge branch 'dev'\n|\\  \n| *   57c53ab (origin/dev, dev) fix env conflict\n| |\\  \n| | * 7a5e5dd add env\n| * | 7bd91f1 add new env\n| |/  \n* |   12a631b merged bug fix 101\n|\\ \\  \n| * | 4c805e2 fix bug 101\n|/ /  \n* |   e1e9c68 merge with no-ff\n|\\ \\  \n| |/  \n| * f52c633 add merge\n|/  \n*   cf810e4 conflict fixed\n</code></pre> <p>\u6ce8 Git\u7528 <code>(HEAD -&gt; master)</code> \u548c <code>(origin/master)</code> \u6807\u8bb0\u51fa\u5f53\u524d\u5206\u652f\u7684 <code>HEAD</code> \u548c\u8fdc\u7a0b <code>origin</code> \u7684\u4f4d\u7f6e.</p> <p><code>git rebase</code> \u64cd\u4f5c\u53ef\u4ee5\u628a\u63d0\u4ea4\u6574\u7406\u6210\u76f4\u7ebf\uff0c\u770b\u4e0a\u53bb\u66f4\u76f4\u89c2\uff0c\u4f46\u7f3a\u70b9\u662f\u5206\u53c9\u4f1a\u88ab\u4fee\u6539\u3002</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Remote%20Repository/#_9","title":"\u6e05\u9664\u67d0\u6b21\u63d0\u4ea4","text":"<p>\u67e5\u627e\u9700\u8981\u6e05\u9664\u7684 commit id\uff1a</p> <pre><code>git log\n</code></pre> <p>\u4f7f\u7528 <code>git rebase - i</code> \u5c06 <code>commit_it</code> \u7684\u524d\u7f00 <code>pick</code> \u6539\u4e3a <code>drop</code>\uff1a</p> <pre><code>git rebase -i &lt;commit_id&gt;\npick &lt;commit_id&gt;\n</code></pre> <p>\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93:</p> <pre><code>git push origin HEAD -force\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Tag%20%F0%9F%8F%B7%EF%B8%8F/","title":"\u6807\u7b7e","text":"<ul> <li>\u6807\u7b7e\u662f\u7248\u672c\u5e93\u7684\u4e00\u4e2a\u5feb\u7167\u3002</li> <li>\u5728\u53d1\u5e03\u4e00\u4e2a\u7248\u672c\u65f6\uff0c\u901a\u5e38\u73b0\u5728\u7248\u672c\u5e93\u4e2d\u6253\u4e0a\u4e00\u4e2a\u6807\u7b7e (tag)\uff0c\u8fd9\u6837\u5c31\u80fd\u4e3a\u4e00\u786e\u5b9a\u6253\u6807\u7b7e\u65f6\u523b\u7684\u7248\u672c\u3002\u5c06\u6765\u53d6\u67d0\u4e2a\u6807\u7b7e\u7684\u7248\u672c\uff0c\u5c31\u662f\u628a\u90a3\u4e2a\u6253\u6807\u7b7e\u7684\u5386\u53f2\u7248\u672c\u53d6\u51fa\u6765\u3002</li> <li>\u6807\u7b7e\u65f6\u6307\u5411\u67d0\u4e2acommit\u7684\u6307\u9488\u3002</li> </ul>"},{"location":"%F0%9F%94%A7%20Tool/Git/Tag%20%F0%9F%8F%B7%EF%B8%8F/#_2","title":"\u521b\u5efa\u6807\u7b7e","text":"<p>\u5148\u5207\u6362\u5230\u6253\u6807\u7b7e\u7684\u5206\u652f\u4e0a\uff0c\u5728\u4f7f\u7528\u547d\u4ee4\uff1a</p> <pre><code>git tag &lt;tagname&gt;\n</code></pre> <p>\u6ce8 \u9ed8\u8ba4\u7684\u6807\u7b7e\u662f\u6253\u5728\u6700\u65b0\u63d0\u4ea4\u7684commit\u4e0a\u7684\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u7ed9\u5386\u53f2\u63d0\u4ea4\u6253\u4e0a\u6807\u7b7e:</p> <pre><code>git tag &lt;tagname&gt; &lt;commit_id&gt;\n</code></pre> <p>\u6211\u4eec\u4e5f\u53ef\u4ee5\u521b\u5efa\u5e26\u6709\u8bf4\u660e\u7684\u6807\u7b7e\uff1a</p> <pre><code>git tag -a v0.1 -m \"version 0.1 released\" &lt;commit_id&gt;\n</code></pre> <p><code>-a</code> \u6307\u5b9a\u7b7e\u540d <code>-m</code> \u6307\u5b9a\u6587\u5b57\u8bf4\u660e</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Tag%20%F0%9F%8F%B7%EF%B8%8F/#_3","title":"\u67e5\u770b\u6807\u7b7e","text":""},{"location":"%F0%9F%94%A7%20Tool/Git/Tag%20%F0%9F%8F%B7%EF%B8%8F/#_4","title":"\u5217\u51fa\u6240\u6709\u6807\u7b7e","text":"<pre><code>git tag\n</code></pre> <p>\u6ce8 \u6807\u7b7e\u4e0d\u662f\u65f6\u95f4\u5e8f\u800c\u662f\u6309\u5b57\u6bcd\u6392\u5e8f\u5217\u51fa\u7684\u3002</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Tag%20%F0%9F%8F%B7%EF%B8%8F/#_5","title":"\u67e5\u770b\u6807\u7b7e\u4fe1\u606f","text":"<pre><code>git show &lt;tagname&gt;\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Tag%20%F0%9F%8F%B7%EF%B8%8F/#_6","title":"\u5220\u9664\u6807\u7b7e","text":"<pre><code>git tag -d &lt;tagname&gt;\n</code></pre> <p>\u6ce8 \u56e0\u4e3a\u521b\u5efa\u7684\u6807\u7b7e\u53ea\u4f1a\u5b58\u50a8\u5728\u672c\u5730\uff0c\u4e0d\u4f1a\u81ea\u52a8\u63a8\u9001\u5230\u8fdc\u7a0b\u3002\u6240\u4ee5\u6253\u9519\u7684\u6807\u7b7e\u4e5f\u53ef\u4ee5\u5728\u672c\u5730\u5b89\u5168\u7684\u5220\u9664\u3002</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Tag%20%F0%9F%8F%B7%EF%B8%8F/#_7","title":"\u5220\u9664\u8fdc\u7a0b\u6807\u7b7e","text":"<p>\u9700\u8981\u5148\u5220\u9664\u672c\u5730\u6807\u7b7e\uff0c\u518d\u4ece\u8fdc\u7a0b\u5220\u9664\u3002</p> <pre><code>git tag -d &lt;tagname&gt;\ngit push origin :refs/tags/&lt;tagname&gt;\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Tag%20%F0%9F%8F%B7%EF%B8%8F/#_8","title":"\u63a8\u9001\u6807\u7b7e","text":""},{"location":"%F0%9F%94%A7%20Tool/Git/Tag%20%F0%9F%8F%B7%EF%B8%8F/#_9","title":"\u63a8\u9001\u67d0\u4e2a\u6807\u7b7e","text":"<pre><code>git push origin &lt;tagname&gt;\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Tag%20%F0%9F%8F%B7%EF%B8%8F/#_10","title":"\u63a8\u9001\u5168\u90e8\u6807\u7b7e","text":"<pre><code>git push origin --tags\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Version%20Control/","title":"\u7248\u672c\u63a7\u5236","text":"<p>\u65f6\u5149\u673a</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Version%20Control/#_2","title":"\u9000\u56de\u7248\u672c","text":"<p>\u5728Git\u4e2d <code>HEAD</code> \u662f\u6307\u5411\u7248\u672c\u7684\u6307\u9488  - <code>HEAD</code> \u8868\u793a\u5f53\u524d\u7248\u672c\u3002 - <code>HEAD^</code> \u8868\u793a\u4e0a\u4e00\u4e2a\u7248\u672c\u3002 - <code>HEAD^^</code> \u8868\u793a\u4e0a\u4e0a\u4e00\u4e2a\u7248\u672c\u3002 - <code>HEAD~100</code> \u8868\u793a\u5f80\u4e0a100\u4e2a\u7248\u672c\u3002</p> <p>\u9000\u56de\u4e0a\u4e2a\u7248\u672c\u6709\u4e24\u79cd\u65b9\u6cd5\uff1a - <code>reset</code> \u7528\u4e8e\u9000\u56de\u7248\u672c\uff0c\u53ef\u4ee5\u9057\u5f03\u4e0d\u5728\u4f7f\u7528\u7684\u63d0\u4ea4\u3002 - <code>revert</code> \u5728\u5f53\u524d\u63d0\u4ea4\u540e\u9762\uff0c\u65b0\u589e\u4e00\u6b21\u63d0\u4ea4\uff0c\u62b5\u6d88\u6389\u4e0a\u4e00\u6b21\u63d0\u4ea4\u6240\u5bfc\u81f4\u7684\u6240\u6709\u53d8\u5316\uff0c\u4e0d\u4f1a\u6539\u53d8\u8fc7\u53bb\u7684\u5386\u53f2\uff0c\u7528\u4e8e\u5b89\u5168\u7684\u53d6\u6d88\u8fc7\u53bb\u53d1\u5e03\u7684\u63d0\u4ea4\u3002</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Version%20Control/#rest","title":"Rest","text":"<p><code>git reset \u2014hard &lt;commit_id&gt;</code> ![[B637F488-E751-4E1A-B65C-1B4E3197E3CC.png]] \u5982\u679c\u5c06\u6307\u9488\u79fb\u52a8\u5230\u4e0a\u4e00\u4e2a\u7248\u672c\uff1a</p> <pre><code>git reset --hard HEAD^\n</code></pre> <p>\u5982\u679c\u60f3\u53cd\u6094\u4e86\u53ef\u4ee5\u4f7f\u7528 <code>git reset \u2014hard &lt;commit id&gt;</code> \u5c06\u6307\u9488\u79fb\u52a8\u5230\u6307\u5b9a\u7684\u7248\u672c\uff1a </p> <pre><code>git reset --hard 1094a\n</code></pre> <ul> <li><code>--mixed</code>  (\u9ed8\u8ba4)\uff0c \u53ea\u6709\u6682\u5b58\u533a\u53d8\u5316\u3002</li> <li><code>--hard</code> \u6682\u5b58\u533a\u548c\u5de5\u4f5c\u533a\u90fd\u4f1a\u53d1\u751f\u53d8\u5316\u3002 </li> <li><code>--soft</code> \u6682\u5b58\u533a\u548c\u5de5\u4f5c\u533a\u90fd\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\u3002</li> </ul>"},{"location":"%F0%9F%94%A7%20Tool/Git/Version%20Control/#revert","title":"Revert","text":"<p><code>git revert &lt;commit_id&gt;</code> ![[B74AF672-5E55-42EA-AA93-1A7441F05AA6.png]]</p> <p>\u5982\u679c\u662f\u64a4\u9500\u524d\u4e00\u4e2a\u7248\u672c\uff1a</p> <pre><code>git revert HEAD\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/Version%20Control/#_3","title":"\u5728\u63d0\u4ea4\u4e4b\u524d\u64a4\u9500","text":"<p>\u5728\u63d0\u4ea4\u524d\u64a4\u9500\u4fee\u6539\uff0c \u4f7f\u7528 <code>checkout</code> \u547d\u4ee4\u64a4\u9500\u4fee\u6539\u3002 <code>git checkout \u2014 &lt;file&gt;</code>  - \u5982\u679c <code>&lt;file&gt;</code> \u6ca1\u6709\u653e\u5165\u6682\u5b58\u533a\uff0c\u64a4\u9500\u4fee\u6539\u56de\u5230\u548c\u7248\u672c\u5e93\u4e00\u6837\u7684\u72b6\u6001\u3002 - \u5982\u679c <code>&lt;file&gt;</code> \u5df2\u7ecf\u653e\u5165\u6682\u5b58\u533a\uff0c\u64a4\u9500\u4fee\u6539\u56de\u5230\u6dfb\u52a0\u5230\u6682\u5b58\u533a\u540e\u7684\u72b6\u6001\u3002 \u603b\u4e4b\u5c31\u662f\u8ba9\u6587\u4ef6\u6062\u590d\u5230\u6700\u540e\u4e00\u6b21 <code>git commit</code> \u6216 <code>git add</code> \u65f6\u7684\u72b6\u6001\u3002</p> <pre><code>git checkout -- readme.md \n</code></pre> <p>\u6ce8\u610f <code>--</code> \u5341\u5206\u91cd\u8981\uff0c\u5982\u679c\u6ca1\u6709 <code>--</code> \u5219\u53d8\u6210\u4e86\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u5206\u652f\u7684\u547d\u4ee4\u3002</p>"},{"location":"%F0%9F%94%A7%20Tool/Git/Version%20Control/#_4","title":"\u627e\u56de\u5220\u9664\u7684\u6587\u4ef6","text":"<p>\u540c\u6837\u4f7f\u7528 <code>git checkout -- &lt;file&gt;</code> <code>git checkout</code>  \u5176\u5b9e\u662f\u7528\u7248\u672c\u5e93 / \u6682\u5b58\u533a\u91cc\u7684\u7248\u672c\u66ff\u6362\u5de5\u4f5c\u533a\u7684\u7248\u672c\u3002</p> <pre><code>git checkout -- readme.md\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/winning%20streak/","title":"Project Structure","text":"<pre><code>$ROOT\n\u251c\u2500\u2500 lib                      \n\u2502   \u251c\u2500\u2500 news\n\u2502   \u2502   \u2514\u2500\u2500 model # data model and operations for NewItem\n\u2502   \u2502       \u251c\u2500\u2500 db # database client\n\u2502   \u2502       \u2514\u2500\u2500 fetcher # http fetcher\n\u2502   \u251c\u2500\u2500 providers # state management\n\u2502   \u251c\u2500\u2500 screens # screens \n\u2502   \u251c\u2500\u2500 utils # utils methods\n\u2502   \u2514\u2500\u2500 widgets # widgets\n\u2514\u2500\u2500 test\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/winning%20streak/#dependencies","title":"Dependencies","text":"<pre><code>hive: ^2.0.6 # key-value database\nrxdart: ^0.27.3 # state management\ncached_network_image: ^3.2.0 # cache image from network\nflutter_html: ^3.0.0-alpha.2 # display news detail\nflutter_staggered_animations: ^1.0.0 # animation for grid view\nmockito: ^5.1.0 # mock test\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/","title":"\u51b2\u7a81\u7ba1\u7406","text":""},{"location":"%F0%9F%94%A7%20Tool/Git/%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/#_1","title":"\u51b2\u7a81\u7684\u4ea7\u751f","text":"<p>\u5f53\u6211\u4eec\u64cd\u4f5c\u5206\u652f\u65f6\uff0cGit \u4f1a\u81ea\u52a8\u63d0\u9192\u6211\u4eec\u5f53\u524d\u5206\u652f\u4e0e\u8fdc\u7a0b\u4ed3\u5e93\u7684\u8ddd\u79bb\uff0c\u6bd4\u5982\uff1a</p> <pre><code>git switch master\nSwitched to branch 'master'\nYour branch is ahead of 'origin/master' by 1 commit.\n  (use \"git push\" to publish your local commits)\n</code></pre> <p>\u4f46\u662f\u5f53 <code>main</code> \u5206\u652f\u548c <code>feature1</code> \u5206\u652f\u5404\u81ea\u5206\u522b\u6709\u65b0\u7684\u63d0\u4ea4\uff1a ![[128EE5EC-6B5E-488E-B2C5-47E395858831.png]]</p> <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cGit\u65e0\u6cd5\u6267\u884c[[Branch Control#\u5408\u5e76\u6a21\u5f0f|\u5feb\u901f\u5408\u5e76]]\uff0c\u53ea\u80fd\u8bd5\u56fe\u5c06\u5404\u81ea\u7684\u4fee\u6539\u5408\u5e76\u8d77\u6765\uff0c\u4f46\u662f\u8fd9\u79cd\u60c5\u51b5\u5c31\u53ef\u80fd\u4ea7\u751f\u51b2\u7a81\uff0c\u4f8b\u5982\uff1a</p> <pre><code>git merge feature1\nAuto-merging readme.txt\nCONFLICT (content): Merge conflict in readme.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n</code></pre> <p>Git \u544a\u8bc9\u6211\u4eec\uff0c<code>readme.txt</code> \u4ea7\u751f\u51b2\u7a81\uff0c\u5fc5\u987b\u624b\u52a8\u89e3\u51b3\u51b2\u7a81\u540e\u5728\u63d0\u4ea4\u3002\u901a\u8fc7 [[Git Basic#Status|git status]] \u4e5f\u53ef\u4ee5\u544a\u8bc9\u6211\u4eec\u51b2\u7a81\u7684\u6587\u4ef6:</p> <pre><code>git status\nOn branch master\nYour branch is ahead of 'origin/master' by 2 commits.\n  (use \"git push\" to publish your local commits)\n\nYou have unmerged paths.\n  (fix conflicts and run \"git commit\")\n  (use \"git merge --abort\" to abort the merge)\n\nUnmerged paths:\n  (use \"git add &lt;file&gt;...\" to mark resolution)\n\n    both modified:   readme.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre>"},{"location":"%F0%9F%94%A7%20Tool/Git/%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86/#_2","title":"\u89e3\u51b3\u51b2\u7a81","text":"<p>\u5f53Git\u65e0\u6cd5\u81ea\u5408\u5e76\u5206\u652f\u65f6\uff0c\u5c31\u5fc5\u987b\u9996\u5148\u89e3\u51b3\u51b2\u7a81\u3002\u89e3\u51b3\u51b2\u7a81\u540e\uff0c\u518d\u63d0\u4ea4\uff0c\u5b8c\u6210\u5408\u5e76\u3002</p> <p>\u67e5\u770b <code>readme.txt</code> \u7684\u5185\u5bb9\uff1a</p> <pre><code>Git is a distributed version control system.\nGit is free software distributed under the GPL.\nGit has a mutable index called stage.\nGit tracks changes of files.\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nCreating a new branch is quick &amp; simple.\n=======\nCreating a new branch is quick AND simple.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1\n</code></pre> <p>\u6ce8\uff1a git\u7528 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, \u548c <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> \u6807\u8bb0\u51fa\u4e0d\u540c\u5206\u652f\u7684\u5185\u5bb9\u3002</p> <p>\u6211\u4eec\u4fee\u6539\u5185\u5bb9\u540e\u518d\u6b21\u63d0\u4ea4\uff1a</p> <pre><code>git add readme.txt\ngit commit -m \"conflict fixed\"\n</code></pre> <p>\u73b0\u5728, <code>master</code> \u5206\u652f\u548c <code>feature1</code> \u5206\u652f\u53d8\u6210\u4e86\uff1a ![[08ADEBCE-5FFD-49EA-85B8-29457B5FF647.png]]</p> <p>\u4f7f\u7528 [[Git Basic#Log|git log]] \u547d\u4ee4\u67e5\u770b\u89e3\u51b3\u51b2\u7a81\u540e\u7684\u5206\u652f\uff1a</p> <pre><code> git log --graph --pretty=oneline --abbrev-commit\n*   cf810e4 (HEAD -&gt; master) conflict fixed\n|\\  \n| * 14096d0 (feature1) AND simple\n* | 5dc6824 &amp; simple\n|/  \n* b17d20e branch test\n* d46f35e (origin/master) remove test.txt\n* b84166e add test.txt\n* 519219b git tracks changes\n* e43a48b understand how stage works\n* 1094adb append GPL\n* e475afc add distributed\n* eaadf4e wrote a readme file\n</code></pre> <p>\u6700\u540e\u5220\u9664 <code>feature1</code> \u5206\u652f</p> <pre><code>git branch -d feature1\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/0.%20React/","title":"React","text":"<p>React is a popular JavaScript library for building reusable, [[2. Component|component]]-driven user interfaces for web pages or applications.</p> <p>React combines HTML with JavaScript functionality into its own markup language called [[1. JSX#JSX|JSX]]. React also makes it easy to manage the flow of data throughout the application.</p> <p>React is an Open source view library created and maintained by Facebook. It's a great tool to render the User Interface (UI) of modern web applications.</p>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/1.%20JSX/","title":"JSX","text":"<p>React uses a syntax extension of JavaScript called JSX that allow us to write HTML directly within JavaScript. This have several benefits. It lets us see the full programmatic power of JavaScript within HTML, and helps to keep our code readable.</p> <p>For the most part, JSX is similar to the HTML, however there are a few key differences.</p> <p>For instance, because JSX is a syntactic extension of JavaScript, we can actually write JavaScript directly within JSX. To do this, we simply include the code we want to be treated as JavaScript within curly braces: <code>{ 'this is treated as JavaScript code' }</code>. </p> <p>However, because JSX is not valid JavaScript, JSX code must be complied into JavaScript. The transpiler Babel is a popular tool for this process. </p> <p>For example, create a simple JSX element:</p> <pre><code>const JSX = &lt;h1&gt; Hello World&lt;/h1&gt;;\n</code></pre> <p>Note: This example object worth noting that under the hood the challenges are calling  <code>ReactDOM.render(JSX, document.getElementById('root'))</code>. This function call is what places your JSX into React's own lightweight representation of the DOM. React then uses snapshots of its own DOM to optimize updating only specific parts of the actual DOM.</p>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/1.1%20Create%20a%20JSX%20Element/","title":"Create a Complex JSX Element","text":"<p>The last example was a simple JSX, but JSX can represent more complex HTML as Well.</p> <p>One important thing to know about nested JSX is that is must return a single element.</p> <p>This one parent element would wrap all of the other levels of nested elements.</p> <p>For instance, several JSX elements written as siblings with no parent wrapper element will no transpile. Here's an example:</p> <p>Valid JSX:</p> <pre><code>&lt;div&gt;\n  &lt;p&gt;Paragraph One&lt;/p&gt;\n  &lt;p&gt;Paragraph Two&lt;/p&gt;\n  &lt;p&gt;Paragraph Three&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>Invalid JSX:</p> <pre><code>&lt;p&gt;Paragraph One&lt;/p&gt;\n&lt;p&gt;Paragraph Two&lt;/p&gt;\n&lt;p&gt;Paragraph Three&lt;/p&gt;\n</code></pre> <p>For example, define a new constant <code>JSX</code> that renders a <code>div</code> which contains an <code>h1</code>, a <code>p</code>, and an unordered list that contains three <code>li</code> items:</p> <pre><code>const JSX = (\n    &lt;div&gt;\n        &lt;h1&gt;Hello World&lt;/h1&gt;\n        &lt;p&gt;Paragraph&lt;/p&gt;\n        &lt;ul&gt;\n            &lt;li&gt;1&lt;/li&gt;\n            &lt;li&gt;2&lt;/li&gt;\n            &lt;li&gt;3&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;);\n</code></pre> <p>Note: This example object worth noting that under the hood the challenges are calling  <code>ReactDOM.render(JSX, document.getElementById('root'))</code>. This function call is what places your JSX into React's own lightweight representation of the DOM. React then uses snapshots of its own DOM to optimize updating only specific parts of the actual DOM.</p>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/1.2%20Comments/","title":"Add Comments in JSX","text":"<p>JSX is a syntax that gets compiled into valid JavaScript. </p> <p>Sometimes, for readability, we might need to add comments to our code. Like most programming languages, JSX has it own way to do this.</p> <p>To put commit inside JSX, we use the syntax <code>{/* */}</code> to wrap around the comment text.</p> <pre><code>const JSX = (\n    &lt;div&gt;\n        {*/ This is a block of JSX /*}\n        &lt;p&gt; Hello World &lt;/p&gt;\n    &lt;/div&gt;\n);\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/1.3%20JSX%20Attributes/","title":"Define an HTML Class in JSX","text":"<p>We may be wondering how JSX differs from HTML.</p> <p>So far, it may seem that HTML and JSX are exactly the same. </p> <p>In fact, the naming convention for all HTML attributes and event references in JSX become camelCase. </p> <p>One key difference in JSX is that we can no longer use the word <code>class</code> to define HTML classes. This is because <code>class</code> is a reserved word in JavaScript. Instead, JSX uses <code>className</code>.</p> <p>For example, a click event in JSX is <code>onClick</code>, instead of <code>onclikc</code>. Likewise, <code>onchange</code> becomes <code>onChange</code>. While this is a subtle difference, it is an important one to keep in mind moving forward.</p> <pre><code>const JSX = (\n    &lt;div className=\"myDiv\"&gt; \n        &lt;h1&gt; Add a class to this div&lt;/h1&gt;\n    &lt;/div&gt;\n);\n</code></pre> <p>Here we we apply a class of <code>myDiv</code> to the <code>div</code> in the JSX code.</p>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/1.4%20Self-Closing%20JSX%20Tags/","title":"Self-Closing JSX Tags","text":"<p>We've seem how JSX differs from HTML in a key way with the use of <code>className</code> vs. <code>class</code> for defining HTML classes.</p> <p>Another important way in which JSX differs form HTML is in the idea of the self-closing tag.</p> <p>There are special instances in HTML called \"self-closing tags\", that tags don't required both and opening and closing tag before another tag can start. For example the line-break tag can be written as <code>&lt;br&gt;</code> or <code>&lt;/br&gt;</code>.</p> <p>In JSX, the rules are a little different. Any element can be written with a self-closing tag, and every element must be closed. For example, the line-break tag must be written as <code>&lt;br /&gt;</code> in order to be valid JSX that can be transpiled. </p> <p>A <code>&lt;div&gt;</code> can be written as <code>&lt;div /&gt;</code> or <code>&lt;div&gt; &lt;/div&gt;</code>. The difference is that in the first syntax version there is no way to include anything in the <code>&lt;div /&gt;</code>. </p> <p>For example:</p> <pre><code>const JSX = (\n    &lt;div&gt;\n        &lt;h2&gt;Welcome to React!&lt;/h2&gt; &lt;br /&gt;\n        &lt;p&gt;Be sure to close all tags!&lt;/p&gt;\n        &lt;hr /&gt;\n    &lt;/div&gt;\n);\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/2.%20Component/","title":"Component","text":"<p>Components are the core of React. Everything in React is a component.</p> <p>There are two ways to create a React component. </p> <ul> <li> <p>The first way is to use a JavaScript Function. Defining a component in this way creates a [[2.1 Stateless Functional Component|stateless functional component]]. </p> </li> <li> <p>The second way is with the ES6 [[10. Constructor Function|class]] syntax, by create a new class and let it extends <code>React.Commponent</code>.</p> </li> </ul> <p>Because a JSX component represents HTML, we could put several components together to create a more complex HTML page. This is one of the key advantages of the component architecture React provides. It allows we to compose our UI from many separate, isolated components. This makes it easier to build and maintain complex user interfaces.</p> <p>When you work with React, it is important to start thinking about your user interface in terms of components like the App example in the last challenge. You break down your UI into its basic building blocks, and those pieces become the components. This helps to separate the code responsible for the UI from the code responsible for handling your application logic. It can greatly simplify the development and maintenance of complex projects.</p>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/2.1%20Stateless%20Functional%20Component/","title":"Stateless Functional Component","text":"<p>Think of a stateless component as one that can receive data and render it, but does not manage or track changes to that data.</p> <p>To create a stateless functional component with a function, we simple write a JavaScript function that returns either JSX or <code>null</code>. One important thing to note is that React requires our function name to begin with a capital letter. Here's an example of a stateless functional component that assigns an HTML class in JSX:</p> <pre><code>const DemoComponent = function() {\n    return (\n        &lt;div className='customClass' /&gt; \n    );\n};\n</code></pre> <p>After begin transpiled, the <code>&lt;div&gt;</code> will have a HTML class of <code>customClass</code>.</p>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/2.2%20ES6%20Class%20Component/","title":"Use ES6 Class syntax to Create React Component","text":"<p>For example, let a class extends <code>React.Component</code> :</p> <pre><code>class Kitten extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            &lt;h1&gt; Hello World &lt;/h1&gt;\n        );\n    }\n}\n</code></pre> <p>This creates an ES6 class <code>kitten</code> which extends the <code>React.Component</code> class. So the <code>Kitten</code> class now has access to many useful React features, such as local state and lifecycle hooks.</p> <p>Also notice the <code>Kitten</code> class has a <code>constructor</code> defined within it calls <code>super()</code>. It use <code>super()</code> to call the constructor of the parent class, in this case <code>React.Component</code>.</p> <p>The constructor is a special method used during the initialization of objects that are created with the <code>class</code> keyword. It is best practice to call a component's <code>constructor</code> with <code>super</code>, and pass <code>props</code> to both. This makes sure the component is initialized properly. It is standard for this code to be included. </p>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/3.%20Component%20with%20Composition/","title":"Component with Composition","text":"<p>We can compose multiple React components together. we could create an <code>App</code> parent component which renders each of these components as children. </p> <p>To render a component as a child in a React component, we include the component name written as a custom HTML tag in the JSX. For example, in the <code>render</code> method we could write:</p> <pre><code>class ParentComponent extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            &lt;App&gt;\n                &lt;Navbar /&gt;\n                &lt;Dashboard /&gt;\n                &lt;Footer /&gt;\n            &lt;/App&gt;\n        );\n    }\n}\n</code></pre> <p>Here we build an <code>app</code> component and have created three components: a <code>Navbar</code>, <code>Dashboard</code>, and <code>Footer</code>.</p> <p>When React [[encounter|encounters]] a custom HTML tag that references another component (a component name wrapped in <code>&lt; /&gt;</code>), it renders the markup for that component in the location of the tag. This should illustrate the parent/child relationship between the <code>App</code> component and the <code>NavBar</code>, <code>Dashboard</code>, and <code>Footer</code>.</p>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/3.1%20Compose%20Components/","title":"Compose React Components","text":"<p>Compositions with React components and JSX, there is one important point to note. Rendering ES6 style class components within other components is no different than rendering the simple components. We can render JSX elements, stateless functional components, and ES6 class components within other components.</p> <pre><code>class Fruits extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            &lt;div&gt;\n                &lt;h2&gt;Fruits:&lt;/h2&gt;\n                &lt;NonCitrus /&gt;\n                &lt;Citrus /&gt;\n            &lt;/div&gt;\n        );\n    }\n};\n\nclass TypesOfFood extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            &lt;div&gt;\n                &lt;h1&gt;Types of Food:&lt;/h1&gt;\n                &lt;Vegetables /&gt;\n                &lt;Fruits /&gt;\n            &lt;/div&gt;\n        );\n    }\n};\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/4.%20ReactDOM/","title":"Render HTML Elements to the DOM","text":"<p>As we know JSX is a convenient tool to write readable HTML within JavaScript. With React, we can render this JSX directly to the HTML DOM using React's rendering API known as <code>ReactDOM</code>.</p> <p><code>ReactDOM</code> offers a simple method to render React elements to the DOM which looks like this: </p> <pre><code>ReactDOM.render(COMPONENT_TO_RENDER, TARGET_NODE),\n</code></pre> <p>Where the first argument is the React element or component that we want to render, and the second argument is the DOM node that we want to render the component to.</p> <p>As we would expect, <code>ReactDOM.render()</code> must be called after the JSX element declarations, just like how we must declare variables before using them.</p> <p>For example, to render this component to the page by <code>ReactDOM.render()</code> method, we can pass defined JSX elements directly in as the first argument and use <code>document.getElementByID()</code> to select the DOM node to render them to.</p> <pre><code>const JSX = (\n    &lt;div&gt;\n        &lt;h1&gt;Hello World&lt;/h1&gt;\n        &lt;p&gt;Lets render this to the DOM&lt;/p&gt;\n    &lt;/div&gt;\n);\n\nReactDOM.render(JSX, document.getElementByID('node'));\n</code></pre> <p>There is a <code>div</code> with <code>id='node'</code> available for us to use. </p>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/4.1%20Class%20Component%20with%20DOM/","title":"Render a Class Component to the DOM","text":"<p>None of the React code we write will render to the DOM without making a call to the [[4. ReactDOM|ReactDOM]] API.</p> <p>React components are passed into <code>ReactDOM.render()</code> a little differently than JSX elements. For JSX elements, we pass in the name of the element that we want to render.</p> <p>For React components, we need to use the same syntax as if we were rendering a nested component. For example <code>ReactDOM.render(&lt;ComponentToRender /&gt;, TARGET_NODE)</code>. We use this syntax for both [[2.2 ES6 Class Component|ES6 Class Components]] and [[2.1 Stateless Functional Component|functional components]].</p> <pre><code>class TypesOfFood extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n        &lt;div&gt;\n            &lt;h1&gt;Types of Food:&lt;/h1&gt;\n            &lt;Fruits /&gt;\n            &lt;Vegetables /&gt;\n        &lt;/div&gt;  \n        );\n    }\n};\n\nReactDOM.render(&lt;TypesOfFood /&gt;, document.getElementById('challenge-node'));\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/5.%20Props/","title":"Props","text":"<p>Props is a very common feature in React. In React, we can pass props, or properties, to child components. </p> <p>Say we have an <code>App</code> component which renders a child component called <code>Welcome</code> which is a stateless functional component. We can pass <code>Welcome</code> a <code>user</code> property by writing:</p> <pre><code>&lt;App&gt;\n    &lt;Welcome user='Mark' /&gt;\n&lt;/App&gt;\n</code></pre> <p>We can custom HTML attributes created by us and supported by React to passed to the component. In this case, the created property <code>user</code> is passed to the component <code>Welcome</code>. Since <code>Welcome</code> is a [[2.1 Stateless Functional Component|stateless functional component]], it has access to this value like so:</p> <pre><code>const Welcome = (props) =&gt; &lt;h1&gt;Hello, {props.user}!&lt;/h1&gt;;\n</code></pre> <p>It is standard to call this values <code>props</code> and when dealing with stateless functional components, we basically consider it as an argument to a function which returns JSX. We can access the value of the argument in the function body. </p> <pre><code>const CurrentDate = (props) =&gt; {\n    return (\n        &lt;div&gt;\n            &lt;p&gt;The current date is: {props.date}&lt;/p&gt;\n        &lt;/div&gt;\n    );\n};\n\n\nclass Calendar extends React.Component {\n    constructor(props) {    \n        super(props);\n    }\n\n    render() {\n        return (\n            &lt;div&gt;\n                &lt;h3&gt;What date is it?&lt;/h3&gt;\n                &lt;CurrentDate date={Date()}/&gt;\n            &lt;/div&gt;\n        );\n    }\n};\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/5.1%20Pass%20Array%20as%20Props/","title":"Pass an Array as Props","text":"<p>To pass an array to a JSX element, it must be treated as JavaScript and wrapped in cruly braces.</p> <pre><code>&lt;ParentComponent&gt;\n    &lt;ChildComponent colors={[\"green\", \"blue\", \"red\"]} /&gt;\n&lt;/ParentComponent&gt;\n</code></pre> <p>The child component then has access to the array property <code>colors</code>. Array methods such as <code>join()</code> can be used when accessing the property. `</p> <pre><code>const ChildComponent = (props) =&gt; &lt;p&gt;{props.colors.join(', ')}&lt;/p&gt;;\n</code></pre> <p>This will join all <code>colors</code> array items into a comma separated string and produce: <code>&lt;p&gt;green, blue, red&lt;/p&gt;</code>.</p> <pre><code>const List = (props) =&gt; {\n    return &lt;p&gt;{props.tasks.join(\", \")}&lt;/p&gt;\n};  \n\nclass ToDo extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            &lt;div&gt;\n                &lt;h1&gt;To Do Lists&lt;/h1&gt;\n                &lt;h2&gt;Today&lt;/h2&gt;\n                &lt;List tasks={[\"walk dog\", \"workout\"]} /&gt;\n                &lt;h2&gt;Tomorrow&lt;/h2&gt;\n                &lt;List tasks={[\"walk dog\", \"workout\"]} /&gt;\n            &lt;/div&gt;\n        );\n    }\n};\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/5.2%20Default%20Props/","title":"Default Props","text":"<p>We can assign default props to a component as a property on the component itself and React assigns the default prop if necessary. This allows we to specify what a prop value should be if no value is explicitly provide. For example:</p> <pre><code>MyComponent.defalutProps = { location: \"Toronto\" };\n</code></pre> <p>We have defined a location prop that's set the string <code>Toronto</code>, unless we specify otherwise. </p> <p>React assigns default props if props are undefined, but if we pass <code>null</code> as the value for prop, it will remain <code>null</code>.</p> <pre><code>const ShoppingCart = (props) =&gt; {\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;Shopping Cart Component&lt;/h1&gt;\n        &lt;/div&gt;\n    )\n};\n\nShoppingCart.defaultProps = {items: 0};\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/5.3%20PropTypes/","title":"Use PropTypes to Define the Props You Expect","text":"<p>React provides useful type-checking features to verify that components receive props of the correct type. For example, our application makes an API call to retrieve data that we expect to be in an array, which is then passed to a component as a prop. We can set <code>propTypes</code> on our component to require the data to be of type <code>array</code>. This will throw a useful warning when the data is of any other type.</p> <p>We can define a <code>propTypes</code> property for a component in the same way we defined <code>defaultProps</code>. Doing this will check that props of a given key are present with a given type. Here's an example to require the type <code>function</code> for a prop called <code>handleClick</code>.</p> <pre><code>MyComponent.propTypes = { handleClick: PropTypes.func.isRequired };\n</code></pre> <p>In the example above, the <code>PropTypes.func</code> part check that <code>handleClick</code> is a function. Adding <code>isRequired</code> tells React that <code>handleClick</code> is required property for that component. We will see a warning if that prop isn't provided. Also notice that <code>func</code> represents <code>function</code>. </p> <p>Among the seven JavaScript primitive types, <code>function</code> and <code>boolean</code> (written as <code>bool</code>) are the only two that use unusual spelling. In addition to the primitive types.  In addition to the primitive types, there are other types available. For example, you can check that a prop is a React element. Please refer to the documentationfor all of the options.</p>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/5.4%20this.props/","title":"Access Props Using this.props","text":"<p>With ES6 class components, we will see this is a little different. The ES6 class component uses a slightly different convention to access props.</p> <p>Anytime we refer to a class component within itself, we use the <code>this</code> keyword. To access props chitin a class component, we preface the code that we use to access it with <code>this</code>. For example, if an ES6 class component has a prop called <code>data</code>, we write <code>{this.props.data}</code> in JSX.</p>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/6.%20State/","title":"State","text":"<p>One of the most important topics in React is <code>state</code>. State consists of any data our application needs to know about, that can change over time. We want our apps to respond to state changes and present an updated UI when necessary. React offers a nice solution for the state management of modern web applications.</p> <p><code>state</code> is one of the most powerful features of components in React. It allows you to track important data in your app and render a UI in response to changes in this data. If your data changes, your UI will change. React uses what is called a virtual DOM, to keep track of changes behind the scenes. When state data updates, it triggers a re-render of the components using that data - including child components that received the data as a prop. React updates the actual DOM, but only where necessary. This means we don't have to worry about changing the DOM. You simply declare what the UI should look like.</p>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/6.1%20Stateful%20Component/","title":"Stateful Component","text":"<p>We create state in a React component by declaring a <code>state</code> property on the component class in its <code>constructor</code>. This initializes the component with <code>state</code> when it is created. The <code>state</code> property must be set to a JavaScript <code>object</code>. Declaring it looks like this:</p> <pre><code>this.state = {\n\n}\n</code></pre> <p>We have access to the <code>state</code> object throughout the lief of our component. We can update it, render it in our UI, and pass it as props to child components. The <code>state</code> object cam be as complex or as simple as we need it to be. </p> <p>Note that we must create a class component by extending <code>React.Component</code> in order to create <code>state</code> like this.</p> <pre><code>class StatefulComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: \"terry\"\n        };\n    }\n\n    render() {\n        return (\n        &lt;div&gt;\n            &lt;h1&gt;{this.state.name}&lt;/h1&gt;\n        &lt;/div&gt;\n        );  \n    }\n};\n</code></pre> <p>Note that if we make a component stateful, no other components are aware of its <code>state</code>. Its <code>state</code> is completely encapsulated, or local to that component, unless you pass state data to a child component as <code>props</code>. This notion of encapsulated <code>state</code> is very important because it allows us to write certain logic, then have that logic contained and isolated in one place in your code.</p>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/6.1%20Stateful%20Component/#render-state-in-the-user-interface-another-way","title":"Render State in the User Interface Another Way","text":"<p>There is another way to access <code>state</code> in a component. In the <code>render()</code> method, before the <code>return</code> statement, we can write JavaScript directly. For example, we could declare functions, access data from <code>state</code> or <code>props</code>, perform computations on this data, and so on. Then, we can assign any data to variables, which we have access to in the <code>return</code> statement.</p> <pre><code>class MyComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: 'freeCodeCamp'\n        }\n\n    }\n\n    render() {\n        const name = this.state.name;\n        return (\n            &lt;div&gt;\n                &lt;h1&gt; {name} &lt;/h1&gt;\n            &lt;/div&gt;\n        );\n    }\n};\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/6.2%20this.setState%28%29/","title":"Set State with this.setState","text":"<p>We can call the <code>setState</code> method within our component class like so: <code>this.setState()</code> passing in an object with key-value pairs. The keys are our state properties and the values are the updated state data. </p> <p>For instance, if we were storing a <code>username</code> in state and wanted to update it, it would look like this:</p> <pre><code>this.setState({\n    username: 'Lewis'\n});\n</code></pre> <p>React expects us to never modify <code>state</code> directly, instead always use <code>this.setState()</code> when state changes occur. </p> <p>Also, we should note that React may batch multiple state updates in order to improve performance. What this means that state updates through the <code>setState</code> method can be asynchronous. There is an alternative syntax fro the <code>setState</code> method which provides a way around this problem. This rarely needed but it's good to keep it in mind! Please consult the React documentationfor further details.</p> <p>There is a <code>button</code> element in the code editor which has an <code>onClick()</code> handler. This handler is triggered when the <code>button</code>receives a click event in the browser, and runs the <code>handleClick</code>method defined on <code>MyComponent</code>. Within the <code>handleClick</code>method, update the component <code>state</code> using <code>this.setState()</code>. Set the <code>name</code> property in <code>state</code> to equal the string <code>React Rocks!</code>.</p> <pre><code>class MyComponent extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: 'Initial State'\n        };\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick() {\n        this.setState({\n            name: 'React Rocks!'\n        });\n    }\n\n    render() {\n        return (\n        &lt;div&gt;\n            &lt;button onClick={this.handleClick}&gt;Click Me&lt;/button&gt;\n            &lt;h1&gt;{this.state.name}&lt;/h1&gt;\n        &lt;/div&gt;\n        );\n    }\n};\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/6.2%20this.setState%28%29/#bind-this-keyword","title":"Bind this keyword","text":"<p>A class method typically needs to use the <code>this</code> keyword so it can access properties on the class (such as <code>state</code> and <code>props</code>) inside the scope of the method. There are a few ways to allow our class methods to access <code>this</code>.</p> <p>One common way is to explicitly bind <code>this</code> in the constructor so <code>this</code> become bound to the class methods when the component is initialized. </p> <p><code>this.handleClick = this.handleClick.bind(this)</code> for its <code>handleClcik</code> method in the constructor. The when we call a function like <code>this.setState()</code> within our class method, <code>this</code> refers to the class and will not be <code>undefined</code>.</p> <p>Note: The <code>this</code> keyword is one of the most confusing aspects of JavaScript but it plays an important role in React. </p>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/6.2%20this.setState%28%29/#use-state-to-toggle-an-element","title":"Use State to Toggle an Element","text":"<p>State updates may be asynchronous, which means React may batch multiple <code>setState()</code> calls into a single update. This means we can't rely on the previous value of <code>this.state</code> or <code>this.props</code> when calculating the next value. So we should not use code like:</p> <pre><code>this.setState({\n    counter: this.state.counter + this.props.increment\n});\n</code></pre> <p>Instead, we should pass <code>setState</code> a function that allows us to access state and props. Using a function with <code>setState</code> guarantees we are working with the most current values of stat and props. This means that the above should be rewritten as:</p> <pre><code>this.setState((state, props) =&gt; ({\n    counter: state.counter + props.increment\n}));\n</code></pre> <p>We can also use a form without <code>props</code> if we need only the <code>state</code>:</p> <pre><code>this.setState( state =&gt; ({\n    counter: state.counter + 1;\n})); \n</code></pre> <p>Note: We have to wrap the object literal in parentheses, otherwise JavaScript thinks it's block of code.</p> <p>For example, <code>MyComponent</code> has a <code>visibility</code> property which is initialized to <code>false</code>. The render method returns one view if the value of <code>visibility</code> is true, and a different view if it is false.</p> <p>Currently, there is no way of updating the <code>visibility</code> property in the component's <code>state</code>. The value should toggle back and forth between true and false. There is a click handler on the button which triggers a class method called <code>toggleVisibility()</code>. Pass a function to <code>setState</code> to define this method so that the <code>state</code> of <code>visibility</code> toggles to the opposite value when the method is called. If <code>visibility</code> is <code>false</code>, the method sets it to <code>true</code>, and vice versa.</p> <p>Finally, click the button to see the conditional rendering of the component based on its <code>state</code>.</p> <pre><code>class MyComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        visibility: false\n    };\n    this.toggleVisibility = this.toggleVisibility.bind(this);\n}\n\ntoggleVisibility(){\n    this.setState( state =&gt; ({\n        visibility: !state.visibility\n    }));\n}\n\n\n\nrender() {\n    if (this.state.visibility) {\n        return (        \n            &lt;div&gt;\n                &lt;button onClick={this.toggleVisibility}&gt;Click Me&lt;/button&gt;\n                &lt;h1&gt;Now you see me!&lt;/h1&gt;\n            &lt;/div&gt;\n        );\n        } else {    \n        return (\n            &lt;div&gt;\n                &lt;button onClick={this.toggleVisibility}&gt;Click Me&lt;/button&gt;\n            &lt;/div&gt;\n            );\n        }\n    }\n}\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/6.2%20this.setState%28%29/#example","title":"Example","text":""},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/6.2%20this.setState%28%29/#counter","title":"Counter","text":"<p>Writing methods that set <code>state</code>, and assigning click handlers to trigger these methods.</p> <pre><code>class Counter extends React.Component { constructor(props) { super(props); this.state = { count: 0 }; this.increment = this.increment.bind(this); this.decrement = this.decrement.bind(this); this.reset = this.reset.bind(this); } reset() { this.setState({ count: 0 }); } increment() { this.setState(state =&gt; ({ count: state.count + 1 })); } decrement() { this.setState(state =&gt; ({ count: state.count - 1 })); } render() { return ( &lt;div&gt; &lt;button className='inc' onClick={this.increment}&gt;Increment!&lt;/button&gt; &lt;button className='dec' onClick={this.decrement}&gt;Decrement!&lt;/button&gt; &lt;button className='reset' onClick={this.reset}&gt;Reset&lt;/button&gt; &lt;h1&gt;Current Count: {this.state.count}&lt;/h1&gt; &lt;/div&gt; ); } };\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/6.2%20this.setState%28%29/#controlled-input","title":"Controlled Input","text":"<pre><code>class ControlledInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: ''\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange (event) {\n        this.setState({input: event.target.value}); //get value from onChange\n    }\n\n    render() {\n        return (\n            &lt;div&gt;\n                &lt;input value={this.state.input} onChange={this.handleChange} /&gt; \n                &lt;h4&gt;Controlled Input:&lt;/h4&gt;\n                &lt;p&gt;{this.state.input}&lt;/p&gt;\n            &lt;/div&gt;\n        );\n    }\n};\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/6.2%20this.setState%28%29/#controlled-form","title":"Controlled Form","text":"<pre><code>class MyForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: '',\n            submit: ''\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {   \n        this.setState({\n            input: event.target.value\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault() //prevent the default form submit behavior which will refresh the web page\n        this.setState({\n            submit: this.state.input\n        });\n    }\n\n    render() {\n        return (\n            &lt;div&gt;\n                &lt;form onSubmit={this.handleSubmit}&gt;\n                &lt;input onChange={this.handleChange} value={this.state.input} placeholder=\"Input\"&gt;&lt;/input&gt;\n                &lt;button type='submit'&gt;Submit!&lt;/button&gt;\n                &lt;/form&gt;\n                &lt;h1&gt;{this.state.submit}&lt;/h1&gt;\n            &lt;/div&gt;\n        );\n    }\n}\n</code></pre> <p>Note: You also must call <code>event.preventDefault()</code> in the submit handler, to prevent the default form submit behavior which will refresh the web page. </p>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/6.3%20Pass%20State%20as%20Props/","title":"Pass State as Props to Child Components","text":"<p>When passed props to child JSX elements, we may be wondering where those props come from. A common pattern is to have a stateful component containing the <code>state</code> important to our app, that then renders child components. We want these components to have access to some pieces of that <code>state</code>, which are passed in as props.</p> <p>For example, maybe we have an <code>App</code> component that renders a <code>Navbar</code>, among other components. In our <code>App</code>, we have <code>state</code> that contains a lot of user information, but the <code>Navrbar</code> only needs access to the user's username so it can display it. We pass that piece of <code>state</code> to the <code>Navbar</code> component as a prop.</p> <p>This pattern illustrates some important paradigms in React. The first is unidirectional data flow. State flows in on direction down the tree of our application's components, from the stateful parent component to child components. The child components only receive the state data they need. The second is that complex stateful apps can be broken down into just a few, or maybe a single, stateful component. The rest of our components simply receive state from the parent as props, and render a UI from that state. It begin to create a separation where state management is handled in one part of code and UI rendering in another. This principle of separating state logic from UI logic in one of React's key principles. When it's used correctly, it makes the design of complex, stateful applications much easier to manage.</p> <pre><code>class MyApp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        name: 'CamperBot'\n        }\n    }\n    render() {\n        return (\n            &lt;div&gt;\n                &lt;Navbar name={this.state.name} /&gt;\n            &lt;/div&gt;      \n        );\n\n    }\n\n};\n\nclass Navbar extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n        &lt;div&gt;\n            &lt;h1&gt;Hello, my name is: {this.props.name} &lt;/h1&gt;\n        &lt;/div&gt;\n        );\n    }\n};\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/6.3%20Pass%20State%20as%20Props/#pass-a-callback-as-props","title":"Pass a Callback as Props","text":"<pre><code>class MyApp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inputValue: ''\n        }\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({\n            inputValue: event.target.value\n        });\n    }\n\n    render() {\n        return (\n        &lt;div&gt;\n        &lt;GetInput input={this.state.inputValue} handleChange={this.handleChange} /&gt;\n        &lt;RenderInput input={this.state.inputValue}/&gt;\n        &lt;/div&gt;\n        );\n    }\n};\n\n\n\nclass GetInput extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            &lt;div&gt;\n                &lt;h3&gt;Get Input:&lt;/h3&gt;\n                &lt;input value={this.props.input} onChange={this.props.handleChange}/&gt;\n            &lt;/div&gt;\n        );  \n    }\n};\n\n\n\nclass RenderInput extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (        \n            &lt;div&gt;\n                &lt;h3&gt;Input Render:&lt;/h3&gt;  \n                &lt;p&gt;{this.props.input}&lt;/p&gt;\n            &lt;/div&gt;\n        );\n    }\n};\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/7.%20Lifecycle%20Method/","title":"Lifecycle Method","text":"<p>React components have serval special methods that provide opportunities to perform actions at specific points in the lifecycle of a component. There are called lifecycle methods, or lifecycle hooks.</p> <p>Lifecycle methods allow us to catch components at certain points in time. This can be before they are rendered, before they update, before they receive props, before they unmount, and so on.</p> <p>Here is a list of some of the main lifecycle methods:</p> <p><code>componentWillMount()</code>: called before the <code>render()</code> when a component is being mount to the DOM.log something to the console within <code>componentWill()</code>- you may want to have your browser console open to see the output.</p> <p><code>componentDidMount()</code> <code>shouldComponentUpdate()</code> <code>componentDidUpdate()</code> <code>componentWillUnmount()</code></p>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/7.1%20ComponentDidMount%28%29/","title":"ComponentDidMount()","text":"<p>Most web developers, at some point, need to call an API endpoint to retrieve data. If we're working with React, it's important to know where to perform this action.</p> <p>The best perceptive with React is to place API calls or any calls to our sever in the lifecycle method <code>componentDidMount()</code>. </p> <p><code>componentDidMount()</code> method is called after a component is mounted to the DOM. Any calls to <code>setState()</code> here will trigger a re-rendering of our component. When we call an API in this method, and set our state with the data that the API returns, it will automatically trigger an update once we receive the data.</p> <pre><code>class MyComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        activeUsers: null\n        };\n    }\n\n    componentDidMount() {\n        setTimeout(() =&gt; {\n            this.setState({\n            activeUsers: 1273\n            });\n        }, 2500);\n    }\n\n    render() {\n        return (\n            &lt;div&gt;\n            &lt;h1&gt;Active Users: {this.state.activeUsers}&lt;/h1&gt;\n            &lt;/div&gt;\n        );\n    }\n}\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/7.1%20ComponentDidMount%28%29/#event-listeners","title":"Event Listeners","text":"<p>The <code>componentDidMount()</code> method is also the best place to attach any event listeners we need to add for specific functionality. </p> <p>React provides a synthetic event system which wraps the native event system present in browsers. This means that the synthetic event system behaves exactly the same regardless of the user's browser - even if the native events may behave differently between different browsers.</p> <p>We're already been using some of these synthetic event handlers such as <code>onClick()</code>. React's synthetic event system is great use for most interactions we'll manage on DOM elements. However, if we want to attach an event handler to the document or window objects, we have to do this directly.</p> <pre><code>class MyComponent extends React.Component {\n    constructor(props) {\n    super(props);\n    this.state = {\n        message: ''\n    };\n    this.handleEnter = this.handleEnter.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n}\n\n    componentDidMount() {\n        document.addEventListener(\"keydown\", this.handleKeyPress);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.handleKeyPress);\n    }\n\n    handleEnter() {\n        this.setState((state) =&gt; ({\n            message: state.message + 'You pressed the enter key! '\n        }));\n    }\n\n    handleKeyPress(event) {\n        if (event.keyCode === 13) {\n            this.handleEnter();\n        }\n    }\n\n    render() {\n        return (\n            &lt;div&gt;\n                &lt;h1&gt;{this.state.message}&lt;/h1&gt;\n            &lt;/div&gt;  \n        );\n    }\n};\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/7.2%20shouldComponentUpdate/","title":"Optimize Re-Renders with shouldComponentUpdate","text":"<p>So far, if any component receives new <code>state</code> or new <code>props</code>, it re-renders itself and all its children. This usually okay. But React provides a lifecycle method we can call when child components receive new <code>state</code> or <code>props</code>, and declar specifically if the components should update or not. The method is <code>shouldComponentUpdate()</code>, and it takes <code>nextPorps</code> and <code>nextState</code> as parameters.</p> <p>This method is useful way to optimize performance. For example, the defalut behavior is that we component re-renders when it receives new <code>props</code>, even if the <code>props</code> haven't changed. We can use <code>shouldComponentUpdate()</code> to prevent this by comparing the <code>props</code>. </p> <p>The method must return a <code>boolean</code> value that tells React whether or not to update the component. We can compare the current props (<code>this.props</code>) to next props (<code>nexrProps</code>) to determine if we need to update or not, and return <code>true</code> or <code>false</code> accordingly.</p> <pre><code>class OnlyEvens extends React.Component {\\\n    constructor(props) {\n        super(props);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log('Should I update?');\n        if(nextProps.value % 2 === 0){\n            return true;\n        }else{\n            return false;\n        }\n    }\n\n    componentDidUpdate() {\n        console.log('Component re-rendered.');\n    }\n\n    render() {\n        return &lt;h1&gt;{this.props.value}&lt;/h1&gt;;\n        }\n    }\n\n\n\n    class Controller extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                value: 0\n            };\n            this.addValue = this.addValue.bind(this);\n        }\n\n        addValue() {\n            this.setState(state =&gt; ({       \n            value: state.value + 1  \n        }));\n\n    }\n\n    render() {\n        return (\n            &lt;div&gt;\n                &lt;button onClick={this.addValue}&gt;Add&lt;/button&gt;\n                &lt;OnlyEvens value={this.state.value} /&gt;\n            &lt;/div&gt;\n        );\n    }\n}\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/8.%20Inline%20Style/","title":"Inline Style","text":"<p>To style those JSX elements our create in React, we can import styles from a stylesheet. You apply a class to your JSX element using the <code>className</code> attribute, and apply styles to the class in your stylesheet.</p> <p>Another option is to apply inline styles, which are very common in ReactJS development. We apply inline styles to JSX elements similar to how you do it in HTML, but with a few JSX differences. Here's an example of an inline style in HTML:</p> <p>```jsx</p> Mellow Yellow <pre><code>\nJSX elements use the `style` attribute, but because of the way JSX is transpiled, you can't set the value to a `string`. Instead, you set it equal to a JavaScript `object`. Here's an example:\n\n```jsx\n&lt;div style={{color: \"yellow\", fontSize: 16}}&gt;Mellow Yellow&lt;/div&gt;\n</code></pre> <p>Notice how we camelCase the <code>fontSize</code> property? This is because React will not accept kebab-case keys in the style object. React will apply the correct property name for us in the HTML.</p> <pre><code>class Colorful extends React.Component {\n    render() {\n        return (\n            &lt;div style={{color: \"red\", fontSize: 72}}&gt;Big Red&lt;/div&gt;\n        );\n    }\n};\n</code></pre> <p>Set the size of the font with <code>fontSize</code> instead of <code>font-size</code>. Hyphenated words like <code>font-size</code> are invalid syntax for JavaScript object properties, so React uses camel case. As a rule, any hyphenated style properties are written using camel case in JSX.</p> <p>All property value length units (like <code>height</code>, <code>width</code>, and <code>fontSize</code>) are assumed to be in <code>px</code> unless otherwise specified. If we want to use <code>em</code>, for example, we wrap the value and the units in quotes, like <code>{fontSize: \"4em\"}</code>. Other than the length values that default to <code>px</code>, all other property values should be wrapped in quotes.</p> <pre><code>let obj = {\ncolor: \"purple\",\nfontSize: 40,\nborder: \"2px solid purple\",\n};\n\nclass Colorful extends React.Component {\n    render() {  \n        return (\n            &lt;div style={obj}&gt;Style Me!&lt;/div&gt;\n        );\n    }\n};\n\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/9.%20Conditional%20Rendering/","title":"Render with an If-Else Condition","text":"<pre><code>render() {\n    return (\n        &lt;div&gt;\n            &lt;button onClick={this.toggleDisplay}&gt;Toggle Display&lt;/button&gt;\n            {this.state.display &amp;&amp; &lt;h1&gt;Displayed!&lt;/h1&gt;}\n        &lt;/div&gt;\n    );\n}\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/9.%20Conditional%20Rendering/#operator","title":"&amp;&amp; Operator","text":"<pre><code>render() {\n    if(this.state.display){\n        return (\n            &lt;div&gt;\n                &lt;button onClick={this.toggleDisplay}&gt;Toggle Display&lt;/button&gt;\n                &lt;h1&gt;Displayed!&lt;/h1&gt;\n            &lt;/div&gt;\n        );\n    }else{\n        return (\n            &lt;div&gt;\n                &lt;button onClick={this.toggleDisplay}&gt;Toggle Display&lt;/button&gt;\n            &lt;/div&gt;\n        );\n    }\n}\n</code></pre>"},{"location":"%F0%9F%AA%9C%20Framework/%E2%9A%9B%EF%B8%8F%20React/9.%20Conditional%20Rendering/#ternary-expression","title":"Ternary Expression","text":"<pre><code>condition ? expressionIfTrue : expressionIfFalse;\n</code></pre> <pre><code>{ this.state.userAge === '' ? buttonOne : this.state.userAge &gt;= 18 ? buttonTwo : buttonThree }\n</code></pre>"}]}